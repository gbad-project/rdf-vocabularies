/* This file was automatically generated. Do not edit by hand. */

const {
  ns1,
  rdfs,
  ns3,
  unit,
  dcterms,
  qudt,
  xsd,
  qkdv,
  quantitykind,
  sou,
  rdf,
  ns12,
  skos,
  owl,
  vaem,
  prefix,
  prov,
  ns18,
  ns19,
  ns20,
  ns21
} = {
  'ns1': 'http://qudt.org/2.1/vocab/',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns3': 'http://qudt.org/vocab/',
  'unit': 'http://qudt.org/vocab/unit/',
  'dcterms': 'http://purl.org/dc/terms/',
  'qudt': 'http://qudt.org/schema/qudt/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'qkdv': 'http://qudt.org/vocab/dimensionvector/',
  'quantitykind': 'http://qudt.org/vocab/quantitykind/',
  'sou': 'http://qudt.org/vocab/sou/',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'ns12': 'http://www.ontology-of-units-of-measure.org/resource/om-2/',
  'skos': 'http://www.w3.org/2004/02/skos/core#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'vaem': 'http://www.linkedmodel.org/schema/vaem#',
  'prefix': 'http://qudt.org/vocab/prefix/',
  'prov': 'http://www.w3.org/ns/prov#',
  'ns18': 'https://unesdoc.unesco.org/ark:/48223/',
  'ns19': 'https://en.wikipedia.org/wiki/Salinity#',
  'ns20': 'http://qudt.org/2.1/schema/facade/',
  'ns21': 'http://voag.linkedmodel.org/schema/voag#'
}

export default ({ literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  return [
    quad(
      namedNode(`${ns1}unit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Ampere hour}\\) is a practical unit of electric charge equal to the charge flowing in one hour through a conductor passing one ampere. An ampere-hour or amp-hour (symbol \\(Ah,\\,AHr,\\, A \\cdot h, A h\\)) is a unit of electric charge, with sub-units milliampere-hour (\\(mAh\\)) and milliampere second (\\(mAs\\)). One ampere-hour is equal to 3600 coulombs (ampere-seconds), the electric charge transferred by a steady current of one ampere for one hour. The ampere-hour is frequently used in measurements of electrochemical systems such as electroplating and electrical batteries. The commonly seen milliampere-hour (\\(mAh\\) or \\(mA \\cdot h\\)) is one-thousandth of an ampere-hour (\\(3.6 \\,coulombs\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA102`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ampere-hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199233991.001.0001/acref-9780199233991-e-86`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}symbol`),
      literal(`A⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AMH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-HR`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of gyromagnetic ratio.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(A-m^2/J-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/ampere+square+meter+per+joule+second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`A⋅m²/(J⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m2.J-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m2/(J.s)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Square Meter Per Joule Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Square Metre Per Joule Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of electromagnetic moment.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(A-M^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA106`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/ampere+meter+squared`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}symbol`),
      literal(`A⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A5`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-M2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB052`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit ampere divided by the 0.0001-fold  of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`A/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A4`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB073`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit ampere divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`A/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`A measure used to express how a current is subject to temperature. Originally used in Wien's Law to describe phenomena related to filaments. One use today is to express how a current generator derates with temperature.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`57.2957795`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(A/degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://books.google.com/books?id=zkErAAAAYAAJ&pg=PA60&lpg=PA60&dq=ampere+per+degree`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://web.mit.edu/course/21/21.guide/use-tab.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`A/°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/Cel`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${dcterms}description`),
      literal(`The inverse measure of \\(joule-per-ampere\\) or \\(weber\\). The measure for the reciprical of magnetic flux.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}expression`),
      literal(`\\(A/J\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}symbol`),
      literal(`A/J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.J-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/J`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-J`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}expression`),
      literal(`\\(a/m^2-k^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H-2T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB353`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}symbol`),
      literal(`A/m²⋅k²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m-2.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/(m2.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A6`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Square Meter Square Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Square Metre Square Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Ampere Per Square Meter}\\) is a unit in the category of electric current density. This unit is commonly used in the SI unit system.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(A/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA105`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://cdd.iec.ch/cdd/iec61360/iec61360.nsf/Units/0112-2---62720%23UAA105`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`A/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${dcterms}description`),
      literal(` is the SI unit of magnetic field strength. One ampere per meter is equal to \\(\\pi/250\\) oersteds (\\(12.566\\, 371\\,millioersteds\\)) in CGS units. The ampere per meter is also the SI unit of "magnetization" in the sense of magnetic dipole moment per unit volume; in this context \\(1 A/m = 0.001\\,emu\\,per\\,cubic\\,centimeter\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(A/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Coercivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA104`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`A/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB051`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit ampere divided by the 0.000 001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`A/mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.mm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/mm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A7`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB072`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit ampere divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`A/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/mm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Ampere per Radian}\\) is a derived unit for measuring the amount of current per unit measure of angle, expressed in ampere per radian.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}expression`),
      literal(`\\(a-per-rad\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`A/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.rad-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`A/rad`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Ampere per Radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA107`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the SI base unit ampere and the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`A⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`A.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A8`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${dcterms}description`),
      literal(`The  \\(\\textit{ampere}\\), often shortened to \\(\\textit{amp}\\), is the SI unit of electric current and is one of the seven SI base units.
\\(\\text{A}\\ \\equiv\\ \\text{amp (or ampere)}\\ \\equiv\\ \\frac{\\text{C}}{\\text{s}}\\ \\equiv\\ \\frac{\\text{coulomb}}{\\text{second}}\\ \\equiv\\ \\frac{\\text{J}}{\\text{Wb}}\\ \\equiv\\ \\frac{\\text{joule}}{\\text{weber}}\\)
Note that SI supports only the use of symbols and deprecates the use of any abbreviations for units.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ampere`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA101`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD717`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ampere?oldid=494026699`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}ucumCode`),
      literal(`A`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}udunitsCode`),
      literal(`A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AMP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${rdfs}label`),
      literal(`Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A`),
      namedNode(`${skos}altLabel`),
      literal(`amp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${dcterms}description`),
      literal(`An acre-foot is a unit of volume commonly used in the United States in reference to large-scale water resources, such as reservoirs, aqueducts, canals, sewer flow capacity, and river flows. It is defined by the volume of one acre of surface area to a depth of one foot. Since the acre is defined as a chain by a furlong (\\(66 ft \\times 660 ft\\)) the acre-foot is exactly \\(43,560 cubic feet\\). For irrigation water, the volume of \\(1 ft \\times 1 \\; ac = 43,560 \\; ft^{3} (1,233.482 \\; m^{3}, 325,851 \\; US gal)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1233.4818375475202`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acre-foot`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-35`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}acreFoot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}symbol`),
      literal(`ac⋅ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[acr_br].[ft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC-FT`),
      namedNode(`${rdfs}label`),
      literal(`Acre Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${dcterms}description`),
      literal(`The acre is a unit of area in a number of different systems, including the imperial and U.S. customary systems. Its international symbol is ac. The most commonly used acres today are the international acre and, in the United States, the survey acre. The most common use of the acre is to measure tracts of land. One international acre is equal to 4046.8564224 square metres.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4046.8564224`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Acre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA320`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acre?oldid=495387342`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}symbol`),
      literal(`acre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[acr_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ACR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${rdfs}label`),
      literal(`Acre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AC`),
      namedNode(`${skos}altLabel`),
      literal(`acre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${dcterms}description`),
      literal(`Afghanistan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}currencyCode`),
      literal(`AFN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}currencyNumber`),
      literal(`971`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Afghani`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Afghani?oldid=485904590`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AFN`),
      namedNode(`${rdfs}label`),
      literal(`Afghani`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${dcterms}description`),
      literal(`Armenia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}currencyCode`),
      literal(`AMD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`051`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Armenian_dram`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Armenian_dram?oldid=492709723`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMD`),
      namedNode(`${rdfs}label`),
      literal(`Armenian Dram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{Unified Atomic Mass Unit}\\) (symbol: \\(\\mu\\)) or \\(\\textit{dalton}\\) (symbol: Da) is a unit that is used for indicating mass on an atomic or molecular scale. It is defined as one twelfth of the rest mass of an unbound atom of carbon-12 in its nuclear and electronic ground state, and has a value of \\(1.660538782(83) \\times 10^{-27} kg\\).  One \\(Da\\) is approximately equal to the mass of one proton or one neutron. The CIPM have categorised it as a \\(\\textit{"non-SI unit whose values in SI units must be obtained experimentally"}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000166053878283`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Da`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_mass_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}symbol`),
      literal(`amu`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}ucumCode`),
      literal(`u`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}udunitsCode`),
      literal(`u`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${rdfs}label`),
      literal(`Atomic mass unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Da`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AMU`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${dcterms}description`),
      literal(`A unit that is a non-SI unit, specifically a CGS unit,  of polarizability known informally as polarizability volume.  The SI defined units for polarizability are C*m^2/V and can be converted to \\(Angstr\\ddot{o}m\\)^3 by multiplying the SI value by 4 times pi times the vacuum permittivity and then converting the resulting m^3 to \\(Angstr\\ddot{o}m\\)^3 through the SI base 10 conversion (multiplying by 10^-30).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000000000000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L0I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Polarizability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${qudt}symbol`),
      literal(`Å³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Angstrom`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Angstrom`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${dcterms}description`),
      literal(`The \\(Angstr\\ddot{o}m\\) is an internationally recognized unit of length equal to \\(0.1 \\,nanometre\\) or \\(1 \\times 10^{-10}\\,metres\\).  Although accepted for use, it is not formally defined within the International System of Units(SI). The angstrom is often used in the natural sciences to express the sizes of atoms, lengths of chemical bonds and the wavelengths of electromagnetic radiation, and in technology for the dimensions of parts of integrated circuits. It is also commonly used in structural biology.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/%C3%85ngstr%C3%B6m`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA023`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ångström?oldid=436192495`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\AA\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}symbol`),
      literal(`Å`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ao`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Å`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Å`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ANGSTROM`),
      namedNode(`${rdfs}label`),
      literal(`Angstrom`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${dcterms}description`),
      literal(`A minute of arc, arcminute, or minute arc (MOA), is a unit of angular measurement equal to one sixtieth (1/60) of one degree (circle/21,600), or \\(\\pi /10,800 radians\\). In turn, a second of arc or arcsecond is one sixtieth (1/60) of one minute of arc. Since one degree is defined as one three hundred and sixtieth (1/360) of a rotation, one minute of arc is 1/21,600 of a rotation. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000290888209`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA097`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Minute_of_arc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}symbol`),
      literal(`'`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`'`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}udunitsCode`),
      literal(`′`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${rdfs}label`),
      literal(`ArcMinute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCMIN`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${dcterms}description`),
      literal(`"Arc Second" is a unit of angular measure, also called the \\(\\textit{second of arc}\\), equal to \\(1/60 \\; arcminute\\). One arcsecond is a very small angle: there are 1,296,000 in a circle. The SI recommends \\(\\textit{double prime}\\) (\\(''\\)) as the symbol for the arcsecond. The symbol has become common in astronomy, where very small angles are stated in milliarcseconds (\\(mas\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000484813681`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA096`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Minute_of_arc#Symbols.2C_abbreviations_and_subdivisions`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}symbol`),
      literal(`"`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`''`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}udunitsCode`),
      literal(`″`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARCSEC`),
      namedNode(`${rdfs}label`),
      literal(`ArcSecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${dcterms}description`),
      literal(`An 'are' is a unit of area equal to 0.02471 acre and 100 centare.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB048`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.anidatech.com/units.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}are`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}ucumCode`),
      literal(`ar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}udunitsCode`),
      literal(`a`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ARE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARE`),
      namedNode(`${rdfs}label`),
      literal(`are`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${dcterms}description`),
      literal(`Argentina`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}currencyCode`),
      literal(`ARS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}currencyNumber`),
      literal(`032`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Argentine_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Argentine_peso?oldid=491431588`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ARS`),
      namedNode(`${rdfs}label`),
      literal(`Argentine Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{Ampere Turn per Inch}\\) is a measure of magnetic field intensity and is eual to 12.5664 Oersted.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`39.3700787`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(At/in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}symbol`),
      literal(`At/in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-IN`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Turn per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`The  \\(\\textit{Ampere Turn per Metre}\\) is the SI unit of magnetic field strength. One ampere per meter is equal to \\(\\pi/250\\) oersteds (12.566 371 millioersteds) in CGS units. The ampere per meter is also the SI unit of "magnetization" in the sense of magnetic dipole moment per unit volume; in this context \\(1 A/m = 0.001 emu per cubic centimeter\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(At/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`At/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Turn per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Turn per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{ampere-turn}\\) was the MKS unit of magnetomotive force (MMF), represented by a direct current of one ampere flowing in a single-turn loop in a vacuum. "Turns" refers to the winding number of an electrical conductor comprising an inductor. The ampere-turn was replaced by the SI unit, \\(ampere\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${qudt}symbol`),
      literal(`AT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AT`),
      namedNode(`${rdfs}label`),
      literal(`Ampere Turn`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`A unit that consists of the power of the SI base unit metre with the exponent 3 multiplied by the unit atmosphere divided by the SI base unit mol.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`101325.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Atmosphere Cubic Meter per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Atmosphere Cubic Meter per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${dcterms}description`),
      literal(`The standard atmosphere (symbol: atm) is an international reference pressure defined as \\(101.325 \\,kPa\\) and formerly used as unit of pressure. For practical purposes it has been replaced by the bar which is \\(100 kPa\\). The difference of about 1% is not significant for many applications, and is within the error range of common pressure gauges.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`101325.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA322`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atmosphere_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}symbol`),
      literal(`atm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}ucumCode`),
      literal(`atm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`atm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ATM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM`),
      namedNode(`${rdfs}label`),
      literal(`Standard Atmosphere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${dcterms}description`),
      literal(`A technical atmosphere (symbol: at) is a non-SI unit of pressure equal to one kilogram-force per square centimeter. The symbol 'at' clashes with that of the katal (symbol: 'kat'), the SI unit of catalytic activity; a kilotechnical atmosphere would have the symbol 'kat', indistinguishable from the symbol for the katal. It also clashes with that of the non-SI unit, the attotonne, but that unit would be more likely be rendered as the equivalent SI unit. Assay ton (abbreviation 'AT') is not a unit of measurement, but a standard quantity used in assaying ores of precious metals; it is \\(29 1D6 \\,grams\\) (short assay ton) or \\(32 2D3 \\,grams\\) (long assay ton), the amount which bears the same ratio to a milligram as a short or long ton bears to a troy ounce. In other words, the number of milligrams of a particular metal found in a sample of this size gives the number of troy ounces contained in a short or long ton of ore.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98066.5`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA321`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Technical_atmosphere`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1 at = 98.0665 kPa \\approx 0.96784 standard atmospheres\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}symbol`),
      literal(`at`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}ucumCode`),
      literal(`att`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}udunitsCode`),
      literal(`at`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ATT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ATM_T`),
      namedNode(`${rdfs}label`),
      literal(`Technical Atmosphere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${dcterms}description`),
      literal(`An astronomical unit (abbreviated as AU, au, a.u., or ua) is a unit of length equal to \\(149,597,870,700 metres\\) (\\(92,955,807.273 mi\\)) or approximately the mean Earth Sun distance.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`149597870691.6`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Astronomical_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB066`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Astronomical_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An astronomical unit (abbreviated as AU, au, a.u., or ua) is a unit of length equal to 149,597,870,700 metres (92,955,807.273 mi) or approximately the mean Earth Sun distance. The symbol ua is recommended by the International Bureau of Weights and Measures, and the international standard ISO 80000, while au is recommended by the International Astronomical Union, and is more common in Anglosphere countries. In general, the International System of Units only uses capital letters for the symbols of units which are named after individual scientists, while au or a.u. can also mean atomic unit or even arbitrary unit. However, the use of AU to refer to the astronomical unit is widespread. The astronomical constant whose value is one astronomical unit is referred to as unit distance and is given the symbol A. [Wikipedia]`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}symbol`),
      literal(`AU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}ucumCode`),
      literal(`AU`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}udunitsCode`),
      literal(`au`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ua`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AU`),
      namedNode(`${rdfs}label`),
      literal(`astronomical-unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${dcterms}description`),
      literal(`Australia, Australian Antarctic Territory, Christmas Island, Cocos (Keeling) Islands, Heard and McDonald Islands, Kiribati, Nauru, Norfolk Island, Tuvalu`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}currencyCode`),
      literal(`AUD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`036`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Australian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Australian_dollar?oldid=495046408`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}AustralianDollar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AUD`),
      namedNode(`${rdfs}label`),
      literal(`Australian Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${dcterms}description`),
      literal(`Aruba`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}currencyCode`),
      literal(`AWG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}currencyNumber`),
      literal(`533`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Aruban_florin`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Aruban_florin?oldid=492925638`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AWG`),
      namedNode(`${rdfs}label`),
      literal(`Aruban Guilder`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${dcterms}description`),
      literal(`Azerbaijan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}currencyCode`),
      literal(`AZN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}currencyNumber`),
      literal(`944`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Azerbaijani_manat`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Azerbaijani_manat?oldid=495479090`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AZN`),
      namedNode(`${rdfs}label`),
      literal(`Azerbaijanian Manat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`"Abampere Square centimeter" is the unit of magnetic moment in the electromagnetic centimeter-gram-second system.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(aAcm2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://wordinfo.info/unit/4266`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`abA⋅cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bi.cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${vaem}todo`),
      literal(`Determine type for magnetic moment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abampere Square centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abampere Square centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`Abampere Per Square Centimeter (\\(aA/cm^2\\)) is a unit in the category of Electric current density. It is also known as abamperes per square centimeter, abampere/square centimeter, abampere/square centimetre, abamperes per square centimetre, abampere per square centimetre. This unit is commonly used in the cgs unit system. Abampere Per Square Centimeter (\\(aA/cm^2\\)) has a dimension of \\(L^{-2}I\\) where L is length, and I is electric current. It can be converted to the corresponding standard SI unit \\(A/m^{2}\\) by multiplying its value by a factor of 100000.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(aba-per-cm2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://wordinfo.info/results/abampere`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_current_density--abampere_per_square_centimeter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`abA/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bi.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bi/cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abampere per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abampere per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abampere`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BIOT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abampere?oldid=489318583`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://wordinfo.info/results/abampere`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-13?rskey=i2kRRz`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1\\,abA = 10\\,A\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Abampere (aA), also called the biot after Jean-Baptiste Biot, is the basic electromagnetic unit of electric current in the emu-cgs system of units (electromagnetic cgs). One abampere is equal to ten amperes in the SI system of units. An abampere is the constant current that produces, when maintained in two parallel conductors of negligible circular section and of infinite length placed 1 centimetre apart, a force of 2 dynes per centimetre between the two conductors.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bi`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BIOT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Ab`),
      namedNode(`${skos}altLabel`),
      literal(`biot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`The Statampere per Square Centimeter is a unit of electric current density in the c.g.s. system of units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000003335641`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(statA / cm^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`statA/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Statampere per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Statampere per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${dcterms}description`),
      literal(`"Statampere" (statA) is a unit in the category of Electric current. It is also known as statamperes. This unit is commonly used in the cgs unit system. Statampere (statA) has a dimension of I where I is electric current. It can be converted to the corresponding standard SI unit A by multiplying its value by a factor of 3.355641E-010.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000003335641`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_current--statampere.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}A_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${dcterms}description`),
      literal(`An AttoColomb is \\(10^{-18} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Atto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}symbol`),
      literal(`aC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`aC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${rdfs}label`),
      literal(`AttoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA319`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 000 000 000 000 001-fold of the SI derived unit farad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Atto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}symbol`),
      literal(`aF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`aF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoFARAD`),
      namedNode(`${rdfs}label`),
      literal(`Attofarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Action`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB151`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the Planck's constant as product of the SI derived unit joule and the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`aJ⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`aJ.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Attojoule Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB125`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 000 000 000 000 001-fold of the derived SI unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Atto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}symbol`),
      literal(`aJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`aJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}AttoJ`),
      namedNode(`${rdfs}label`),
      literal(`Attojoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${dcterms}description`),
      literal(`A logarithmic unit of sound pressure equal to 10 decibels (dB),  It is defined as: \\(1 B = (1/2) \\log_{10}(Np)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB351`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}ucumCode`),
      literal(`B`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}LogarithmicUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}B`),
      namedNode(`${rdfs}label`),
      literal(`Bel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${dcterms}description`),
      literal(`A ban is a logarithmic unit which measures information or entropy, based on base 10 logarithms and powers of 10, rather than the powers of 2 and base 2 logarithms which define the bit. One ban is approximately \\(3.32 (log_2 10) bits\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2.30258509`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ban`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ban?oldid=472969907`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}symbol`),
      literal(`ban`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAN`),
      namedNode(`${rdfs}label`),
      literal(`Ban`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA326`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit bar and the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bar⋅L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.L/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bar Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bar Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA814`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 0.001-fold of the unit bar and the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bar⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.m3/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bar Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bar Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA325`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`pressure relation consisting of the unit bar divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`bar/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar/bar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Bar Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA324`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit with the name bar divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`bar/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Bar Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to \\(100,000\\,Pa\\). It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000\\,Pa = 1 \\,bar \\approx 750.0616827\\, Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA323`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar?oldid=493875987`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}symbol`),
      literal(`bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BAR`),
      namedNode(`${rdfs}label`),
      literal(`Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${dcterms}description`),
      literal(`A barad is a dyne per square centimetre (\\(dyn \\cdot cm^{-2}\\)), and is equal to \\(0.1 Pa \\) (\\(1 \\, micro \\, bar\\), \\(0.000014504 \\, p.s.i.\\)). Note that this is precisely the microbar, the confusable bar being related in size to the normal atmospheric pressure, at \\(100\\,dyn \\cdot cm^{-2}\\). Accordingly barad was not abbreviated, so occurs prefixed as in \\(cbarad = centibarad\\). Despite being the coherent unit for pressure in c.g.s., barad was probably much less common than the non-coherent bar. Barad is sometimes called \\(barye\\), a name also used for \\(bar\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BARYE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}symbol`),
      literal(`Ba`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${rdfs}label`),
      literal(`Barad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARAD`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BARYE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${dcterms}description`),
      literal(`A barn (symbol b) is a unit of area. Originally used in nuclear physics for expressing the cross sectional area of nuclei and nuclear reactions, today it is used in all fields of high energy physics to express the cross sections of any scattering process, and is best understood as a measure of the probability of interaction between small particles. A barn is defined as \\(10^{-28} m^2 (100 fm^2)\\) and is approximately the cross sectional area of a uranium nucleus. The barn is also the unit of area used in nuclear quadrupole resonance and nuclear magnetic resonance to quantify the interaction of a nucleus with an electric field gradient. While the barn is not an SI unit, it is accepted for use with the SI due to its continued use in particle physics.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Barn`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB297`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Barn?oldid=492907677`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Barn_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}barn`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}ucumCode`),
      literal(`b`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}udunitsCode`),
      literal(`b`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARN`),
      namedNode(`${rdfs}label`),
      literal(`Barn`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${dcterms}description`),
      literal(`<p>The barye, or sometimes barad, barrie, bary, baryd, baryed, or barie, is the centimetre-gram-second (CGS) unit of pressure. It is equal to 1 dyne per square centimetre.</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Barye`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BARAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Barye?oldid=478631158`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g/(cm\\cdot s{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}barye`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}symbol`),
      literal(`Ba`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${rdfs}label`),
      literal(`Barye`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BARAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${skos}altLabel`),
      literal(`barad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${skos}altLabel`),
      literal(`barie`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${skos}altLabel`),
      literal(`bary`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${skos}altLabel`),
      literal(`baryd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BARYE`),
      namedNode(`${skos}altLabel`),
      literal(`baryed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${dcterms}description`),
      literal(`Barbados`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}currencyCode`),
      literal(`BBD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`052`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Barbadian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Barbadian_dollar?oldid=494388633`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBD`),
      namedNode(`${rdfs}label`),
      literal(`Barbados Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${dcterms}description`),
      literal(`A barrel is one of several units of volume, with dry barrels, fluid barrels (UK beer barrel, U.S. beer barrel), oil barrel, etc. The volume of some barrel units is double others, with various volumes in the range of about 100-200 litres (22-44 imp gal; 26-53 US gal).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Barrel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA334`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Barrel?oldid=494614619`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}symbol`),
      literal(`bbl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BLL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL`),
      namedNode(`${rdfs}label`),
      literal(`Barrel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001841587`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA331`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (UK petroleum) for crude oil according to the Imperial system of units divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (UK Petroleum) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000441981`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA332`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (UK petroleum) for crude oil according to the Imperial system of units divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (UK Petroleum) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.002651886`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA330`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (UK petroleum) for crude oil according to the Imperial system of units divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (UK Petroleum) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1591132`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA333`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (UK petroleum) for crude oil according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (UK Petroleum) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1591132`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA329`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for crude oil according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (UK Petroleum)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000184`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA335`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (US petroleum) for crude oil according to the Anglo-American system of units divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US petroleum}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (US) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0026498`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA337`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (US petroleum) for crude oil according to the Anglo-American system of units divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{US petroleum}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`5A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (US) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1589873`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA334`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for crude oil according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{US petroleum}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`bbl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BLL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1156281989625`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB117`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI-conform unit of the volume in the USA which applies to a resolution from 1912: 1 dry barrel (US) equals approximately to 115,63 litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{US dry}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BLD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(`${rdfs}label`),
      literal(`Dry Barrel (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000044163`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA336`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (US petroleum) for crude oil according to the Anglo-American system of units divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (US Petroleum) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1589873`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA338`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume barrel (US petroleum) for crude oil according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bbl{UK petroleum}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bbl_us]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Barrel (US Petroleum) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${dcterms}description`),
      literal(`Bangladesh`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}currencyCode`),
      literal(`BDT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}currencyNumber`),
      literal(`050`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bangladeshi_taka`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bangladeshi_taka?oldid=492673895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BDT`),
      namedNode(`${rdfs}label`),
      literal(`Bangladeshi Taka`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Heart Beat per Minute" is a unit for  'Heart Rate' expressed as \\(BPM\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeartRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`BPM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`/min{H.B.}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`min-1{H.B.}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Heart Beats per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA110`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for classification of winds according to their speed, developed by Sir Francis Beaufort as measure for the over-all behaviour of a ship's sail at different wind speeds`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}symbol`),
      literal(`Beufort`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BFT`),
      namedNode(`${rdfs}label`),
      literal(`Beaufort`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${dcterms}description`),
      literal(`Bahrain`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}currencyCode`),
      literal(`BHD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`048`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bahraini_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bahraini_dinar?oldid=493086643`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BHD`),
      namedNode(`${rdfs}label`),
      literal(`Bahraini Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${dcterms}description`),
      literal(`"Biot" is another name for the abampere (aA), which is the basic electromagnetic unit of electric current in the emu-cgs (centimeter-gram-second) system of units. It is called after a French physicist, astronomer, and mathematician Jean-Baptiste Biot. One abampere is equal to ten amperes in the SI system of units. One abampere is the current, which produces a force of 2 dyne/cm between two infinitively long parallel wires that are 1 cm apart.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Biot`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}A_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB210`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Biot?oldid=443318821`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/current/10-4/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}biot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}symbol`),
      literal(`Bi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bi`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${rdfs}label`),
      literal(`Biot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIOT`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}A_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A bit per second (B/s) is a unit of data transfer rate equal to 1 bits per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.69314718055994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DataRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Data_rate_units#Kilobyte_per_second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`b/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bd`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bit.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`bit/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Bd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}udunitsCode`),
      literal(`bps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bit per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${dcterms}description`),
      literal(`In information theory, a bit is the amount of information that, on average, can be stored in a discrete bit. It is thus the amount of information carried by a choice between two equally likely outcomes. One bit corresponds to about 0.693 nats (ln(2)), or 0.301 hartleys (log10(2)).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.69314718055994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA339`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bit?oldid=495288173`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}bit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}ucumCode`),
      literal(`bit`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BIT`),
      namedNode(`${rdfs}label`),
      literal(`Bit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`The only unit in the category of Specific radioactivity. It is also known as becquerels per kilogram, becquerel/kilogram. This unit is commonly used in the SI unit system. Becquerel Per Kilogram (Bq/kg) has a dimension of \\(M{-1}T{-1}\\) where \\(M\\) is mass, and \\(T\\) is time. It essentially the same as the corresponding standard SI unit \\(/kg/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(Bq/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA112`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--specific_radioactivity--becquerel_per_kilogram.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Becquerel per Kilogram" is used to describe radioactivity, which is often expressed in becquerels per unit of volume or weight, to express how much radioactive material is contained in a sample.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`Bq/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per second from a one part in 10**3 of the SI unit of volume (cubic metre).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`Bq/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Becquerels per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(Bq/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`Bq/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`Becquerel Per Cubic Meter (\\(Bq/m3\\)) is a unit in the category of Radioactivity concentration. It is also known as becquerels per cubic meter, becquerel per cubic metre, becquerels per cubic metre, becquerel/cubic inch. This unit is commonly used in the SI unit system. Becquerel Per Cubic Meter (Bq/m3) has a dimension of \\(L{-3}T{-1}\\) where \\(L\\) is length, and \\(T\\) is time. It essentially the same as the corresponding standard SI unit \\(/s\\cdot m{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(Bq/m^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB126`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--radioactivity_concentration--becquerel_per_cubic_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The SI derived unit of unit in the category of Radioactivity concentration.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`Bq/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`TBD`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`Bq⋅s/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq.s.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Becquerels second per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit of activity, usually meaning radioactivity. "Radioactivity" is caused when atoms disintegrate, ejecting energetic particles. One becquerel is the radiation caused by one disintegration per second; this is equivalent to about 27.0270 picocuries (pCi). The unit is named for a French physicist, Antoine-Henri Becquerel (1852-1908), the discoverer of radioactivity. Note: both the becquerel and the hertz are basically defined as one event per second, yet they measure different things. The hertz is used to measure the rates of events that happen periodically in a fixed and definite cycle. The becquerel is used to measure the rates of events that happen sporadically and unpredictably, not in a definite cycle.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Becquerel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA111`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Becquerel?oldid=493710036`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}becquerel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}symbol`),
      literal(`Bq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}ucumCode`),
      literal(`Bq`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Bq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BQL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BQ`),
      namedNode(`${rdfs}label`),
      literal(`Becquerel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`A unit of respiratory rate.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(breaths/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`breath/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`/min{breath}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`min-1{breath}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Breath per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${dcterms}description`),
      literal(`Bahamas`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}currencyCode`),
      literal(`BSD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`044`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bahamian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bahamian_dollar?oldid=492776024`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BSD`),
      namedNode(`${rdfs}label`),
      literal(`Bahamian Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(BTU_{IT}\\), Foot per Square Foot Hour Degree Fahrenheit</em> is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu_{it} \\cdot ft/(hr \\cdot ft^2  \\cdot degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.730734666`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(IT) ft/(hr ft^2 degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA115`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`British thermal unit (international table) foot per hour Square foot degree Fahrenheit is the unit of the thermal conductivity according to the Imperial system of units.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}⋅ft/(ft²⋅hr⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i].[ft_i]-2.h-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]/([ft_i]2.h.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${vaem}comment`),
      literal(`owl:sameAs: unit:BTU_IT-FT-PER-HR-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (IT) Foot per Square Foot Hour Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU_{IT} \\, Foot}\\) is an Imperial unit for \\(\\textit{Thermal Energy Length}\\) expressed as \\(Btu-ft\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`321.581024`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu-ft\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}symbol`),
      literal(`Btu⋅ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(`${rdfs}label`),
      literal(`BTU Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(BTU_{th}\\) Inch per Square Foot Hour Degree Fahrenheit is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu_{it}-in/(hr-ft^{2}-degF)\\). An International British thermal unit inch per second per square foot per degree Fahrenheit is a unit of thermal conductivity in the US Customary Units and British Imperial Units. \\(1 Btu_{it} \\cdot in/(hr \\cdot ft^{2}  \\cdot degF)\\) shows that one thermochemical BTU of heat per one hour moves through one square foot of material, which is one foot thick due to a temperature difference of one degree Fahrenheit.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.144227889`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(it)-in-per-hr-ft2-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA117`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(Btu_{it} \\cdot in/(hr \\cdot ft^{2}  \\cdot degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`BTU (th) Inch per Square Foot Hour Degree Fahrenheit is an Imperial unit for 'Thermal Conductivity', an International British thermal unit inch per second per square foot per degree Fahrenheit is a unit of thermal conductivity in the US Customary Units and British Imperial Units.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}⋅in/(ft²⋅hr⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i].[ft_i]-2.h-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i]/([ft_i]2.h.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${vaem}comment`),
      literal(`owl:sameAs: unit:BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Inch Per Hour Square Foot Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(BTU_{IT}\\), Inch per Square Foot Second Degree Fahrenheit, is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu_{it}-in/(ft^{2}-s-degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`519.220399911`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(it)-in-per-s-ft2-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA118`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`British thermal unit (international table) inch per second Square foot degree Fahrenheit is the unit of the thermal conductivity according to the Imperial system of units.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}⋅in/(ft²⋅s⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i].[ft_i]-2.s-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i]/([ft_i]2.s.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (IT) Inch per Square Foot Second Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1442279`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA117`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}⋅in/(hr⋅ft²⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i].h-1.[ft_i]-2.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i]/(h.[ft_i]2.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Inch Per Hour Square Foot degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`519.2204`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA118`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}⋅in/(s⋅ft²⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i].s-1.[ft_i]-2.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i]/(s.[ft_i]2.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Inch Per Second Square Foot degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, Inch}\\) is an Imperial unit for 'Thermal Energy Length' expressed as \\(Btu-in\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`26.7984187`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu-in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}symbol`),
      literal(`Btu⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(`${rdfs}label`),
      literal(`BTU Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`British Thermal Unit (IT) Per Fahrenheit Degree (\\(Btu (IT)/^\\circ F\\)) is a measure of heat capacity. It can be converted to the corresponding standard SI unit J/K by multiplying its value by a factor of 1899.10534.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1899.100535`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(btu-per-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (IT) per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Degree \\, Rankine}\\) is an Imperial unit for 'Heat Capacity' expressed as \\(Btu/degR\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1899.100535`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}expression`),
      literal(`\\(btu-per-degR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/°R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[degR]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Square \\, Foot \\, Hour \\, Degree \\, Fahrenheit}\\) is an Imperial unit for 'Coefficient Of Heat Transfer' expressed as \\(Btu/(hr-ft^{2}-degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(hr-ft^{2}-degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(hr⋅ft²⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]-2.h-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([ft_i]2.h.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Square Foot Hour Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Square \\, Foot \\, Second \\, Degree \\, Fahrenheit}\\) is an Imperial unit for 'Coefficient Of Heat Transfer' expressed as \\(Btu/(ft^{2}-s-degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(ft^{2}-s-degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(ft²⋅s⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]-2.s-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([ft_i]2.s.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Square Foot Second Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{BTU per Square Foot}\\) is an Imperial unit for  'Energy Per Area' expressed as \\(Btu/ft^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`11356.5267`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[ft_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{British Thermal Unit (IT) Per Cubic Foot}\\) (\\(Btu (IT)/ft^3\\)) is a unit in the category of Energy density. It is also known as Btu per cubic foot, Btu/cubic foot. This unit is commonly used in the UK, US unit systems. It has a dimension of \\(ML^{-1}T^{-2}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. It can be converted to the corresponding standard SI unit \\(J/m^3\\) by multiplying its value by a factor of 37258.94579.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37258.94579`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(IT)-per-ft3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--energy_density--british_thermal_unit_it_per_cubic_foot.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/fuel-efficiency--volume/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[ft_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (IT) Per Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB099`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat transfer coefficient according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(hr⋅ft²⋅°R)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].h-1.[ft_i]-2.[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(h.[ft_i]2.[degR])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Hour Square Foot degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{BTU per Hour Square Foot}\\) is an Imperial unit for  'Power Per Area' expressed as \\(Btu/(hr-ft^2)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3.15459075`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(hr-ft^{2})\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(hr⋅ft²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].h-1.[ft_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(h.[ft_i]2)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Hour Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`The British thermal unit (BTU or Btu) is a traditional unit of energy equal to about 1 055.05585 joules. It is approximately the amount of energy needed to heat 1 pound (0.454 kg) of water from \\(39 \\,^{\\circ}{\\rm F}\\) (\\(3.9 \\,^{\\circ}{\\rm C}\\)) to \\(40 \\,^{\\circ}{\\rm F}\\) (\\(4.4 \\,^{\\circ}{\\rm C}\\)). The unit is most often used in the power, steam generation, heating and air conditioning industries. In scientific contexts the BTU has largely been replaced by the SI unit of energy, the joule, though it may be used as a measure of agricultural energy production (BTU/kg).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.29307107`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/sibtu.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2I`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`British Thermal Unit (therm.) Per Pound Per Fahrenheit Degree (Btu (therm.)/lb- degF) is a unit in the category of Specific heat. This unit is commonly used in the UK unit system. British Thermal Unit (therm.) Per Pound Per Fahrenheit Degree (Btu (therm.)/lb-degF) has a dimension of \\(L2T^{-2}Q^{-1}\\) where \\(L\\) is length, \\(T\\) is time, and \\(Q\\) is temperature. It can be converted to the corresponding standard SI unit \\(J/kg-K\\) by multiplying its value by a factor of 4183.99895.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(lb-degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lb⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lb_av]-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([lb_av].[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Pound Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Pound \\, Degree \\, Rankine}\\) is a unit for 'Specific Heat Capacity' expressed as \\(Btu/(lb-degR)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(lb-degR)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lb⋅°R)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lb_av]-1.[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([lb_av].[degR])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Pound Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Pound \\,Mole}\\) is an Imperial unit for 'Energy And Work Per Mass Amount Of Substance' expressed as \\(Btu/(lb-mol)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(lb-mol)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lb⋅mol)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lb_av]-1.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([lb_av].mol)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Pound Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${dcterms}description`),
      literal(`The amount of energy generated by a pound of substance is measured in British thermal units (IT) per pound of mass. 1 \\(Btu_{IT}/lb\\) is equivalent to \\(2.326 \\times 10^3\\) joule per kilogram (J/kg).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2326.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/lb\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--energy_density--british_thermal_unit_it_per_cubic_foot.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lb_av]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[lb_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(`${rdfs}label`),
      literal(`BTU-IT-PER-lb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4186.8`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA119`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the product of the units avoirdupois pound according to the avoirdupois system of units and degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lbf⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lbf_av]-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([lbf_av].[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Pound Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`426.9`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB141`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat capacity as British thermal unit according to the international table related to degree Rankine according to the Imperial system of units divided by the unit avoirdupois pound according to the avoirdupois system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lbf⋅°R)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lbf_av]-1.[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([lbf_av].[degR])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Pound Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`237.18597062376833`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB150`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the unit avoirdupois pound of force according to the avoirdupois system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/lbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[lbf_av]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/[lbf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Pound of Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`17.58`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA120`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Pound \\, Mole \\, Degree \\, Fahrenheit}\\) is an Imperial unit for 'Molar Heat Capacity' expressed as \\(Btu/(lb-mol-degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(lb-mol-degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(lb⋅mol⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].mol-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(mol.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Pound Mole Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`178.66`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB107`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(s⋅ft⋅°R)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].s-1.[ft_i]-1.[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(s.[ft_i].[degR])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Second Foot Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.89`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB098`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat transfer coefficient according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(s⋅ft²⋅°R)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].s-1.[ft_i]-2.[degR]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(s.[ft_i]2.[degR])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (international Table) Per Second Square Foot degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{BTU per Second Square Foot}\\) is an Imperial unit for  'Power Per Area' expressed as \\(Btu/(s\\cdot ft^2)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`11356.5267`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/(s-ft^{2})\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/(s⋅ft²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].s-1.[ft_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/(s.[ft_i]2)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Second Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU \\, per \\, Second}\\) is an Imperial unit for 'Heat Flow Rate' expressed as \\(Btu/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1055.05585262`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/sibtu.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`BTU per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{British Thermal Unit}\\) (BTU or Btu) is a traditional unit of energy equal to about \\(1.0550558526 \\textit{ kilojoule}\\). It is approximately the amount of energy needed to heat 1 pound (0.454 kg) of water from \\(39 \\,^{\\circ}{\\rm F}\\)  to \\(40 \\,^{\\circ}{\\rm F}\\) . The unit is most often used in the power, steam generation, heating and air conditioning industries. In scientific contexts the BTU has largely been replaced by the SI unit of energy, the \\(joule\\), though it may be used as a measure of agricultural energy production (BTU/kg). It is still used unofficially in metric English-speaking countries (such as Canada), and remains the standard unit of classification for air conditioning units manufactured and sold in many non-English-speaking metric countries.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1055.05585262`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/British_thermal_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.knowledgedoor.com/2/units_and_constants_handbook/british-thermal-unit_group.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BTU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_IT`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (International Definition)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1055.05585262`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA113`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}symbol`),
      literal(`BTU{mean}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_m]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_MEAN`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (mean)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\({ \\bf BTU_{TH} \\, Foot \\,  per \\, Square \\, Foot \\, Hour \\, Degree \\, Fahrenheit}\\) is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu_{th} \\cdot ft/(hr \\cdot ft^2 \\cdot degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.729577206`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(IT) ft/(hr ft^2 degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}⋅ft/(ft²⋅hr⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT].[ft_i]-2.h-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_IT]/([ft_i]2.h.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (TH) Foot per Square Foot Hour Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.73`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA123`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}⋅ft/(hr⋅ft²⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[ft_i].h-1.[ft_i]-2.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[ft_i]/(h.[ft_i]2.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (thermochemical) Foot Per Hour Square Foot degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf BTU_{th}}\\), Inch per Square Foot Hour Degree Fahrenheit, is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu-in/(hr-ft^{2}-degF)\\). A thermochemical British thermal unit inch per second per square foot per degree Fahrenheit is a unit of thermal conductivity in the US Customary Units and British Imperial Units. \\(1 Btu_{th} \\cdot in/(hr \\cdot ft^{2}  \\cdot degF)\\) shows that one thermochemical BTU of heat per one hour moves through one square foot of material, which is one foot thick due to a temperature difference of one degree Fahrenheit.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.144131434`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(th)-in-per-hr-ft2-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA125`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(Btu_{th} \\cdot in/(hr \\cdot ft^{2}  \\cdot degF)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Unit of thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}⋅in/(ft²⋅hr⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[in_i].[ft_i]-2.h-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[in_i]/([ft_i]2.h.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (TH) Inch per Square Foot Hour Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(BTU_{TH}\\) Inch per Square Foot Second Degree Fahrenheit is an Imperial unit for 'Thermal Conductivity' expressed as \\(Btu_{th} \\cdot in/(ft^{2} \\cdot s \\cdot degF)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`518.8732`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(it)-in-per-s-ft2-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA126`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/thermal-conductivity/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Unit of thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}⋅in/(ft²⋅s⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[in_i].[ft_i]-2.s-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[in_i]/([ft_i]2.s.[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`BTU (TH) Inch per Square Foot Second Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${dcterms}description`),
      literal(`British Thermal Unit (TH) Per Cubic Foot (\\(Btu (TH)/ft^3\\)) is a unit in the category of Energy density. It is also known as Btu per cubic foot, Btu/cubic foot. This unit is commonly used in the UK, US unit systems. It has a dimension of \\(ML^{-1}T^{-2}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. It can be converted to the corresponding standard SI unit \\(J/m^3\\) by multiplying its value by a factor of 37234.03.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37234.03`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}expression`),
      literal(`\\(Btu(th)-per-ft3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--energy_density--british_thermal_unit_it_per_cubic_foot.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.translatorscafe.com/cafe/EN/units-converter/fuel-efficiency--volume/c/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}/ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[ft_i]-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/[ft_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (TH) Per Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.2929`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA124`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (thermochemical) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`426.654`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA127`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units divided by the units pound and degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}/(lb⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[lb_av]-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/([lb_av].[degF])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (thermochemical) Per Pound Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${dcterms}description`),
      literal(`\\({\\bf Btu_{th} / lbm}\\), British Thermal Unit (therm.) Per Pound Mass, is a unit in the category of Thermal heat capacity. It is also known as Btu per pound, Btu/pound, Btu/lb. This unit is commonly used in the UK unit system. British Thermal Unit (therm.) Per Pound Mass (Btu (therm.)/lbm) has a dimension of \\(L^2T^{-2}\\) where \\(L\\) is length, and \\(T\\) is time. It can be converted to the corresponding standard SI unit J/kg by multiplying its value by a factor of 2324.443861.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2324.443861`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}expression`),
      literal(`\\(btu_th-per-lb\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--thermal_heat_capacity--british_thermal_unit_therm_per_pound_mass.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}symbol`),
      literal(`btu{th}/lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].[lb_av]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/[lb_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (TH) Per Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`17.573`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA128`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (thermochemical) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1054.35`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA129`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (thermochemical) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${dcterms}description`),
      literal(`(\\{\\bf (BTU_{th}}\\), British Thermal Unit (thermochemical definition), is a traditional unit of energy equal to about \\(1.0543502645 kilojoule\\). It is approximately the amount of energy needed to heat 1 pound (0.454 kg) of water from \\(39 \\,^{\\circ}{\\rm F}\\) (\\(39 \\,^{\\circ}{\\rm C}\\)) to \\(40 \\,^{\\circ}{\\rm F}\\) (\\(4.4 \\,^{\\circ}{\\rm C}\\)). The unit is most often used in the power, steam generation, heating and air conditioning industries. In scientific contexts the BTU has largely been replaced by the SI unit of energy, the \\(joule\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1054.3502645`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/British_thermal_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.knowledgedoor.com/2/units_and_constants_handbook/british-thermal-unit_group.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}symbol`),
      literal(`Btu{th}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Btu_th]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BTU_TH`),
      namedNode(`${rdfs}label`),
      literal(`British Thermal Unit (Thermochemical Definition)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000004209343`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA345`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (UK) (for fluids and for dry measures) according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br]/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J64`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (UK) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001010242`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA346`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (UK) (for fluids and for dry measures) according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (UK) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0006061453`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA347`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (UK) (for fluids and for dry measures) according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (UK) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.03636872`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA348`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (UK) (for fluids and for dry measures) according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J67`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (UK) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${dcterms}description`),
      literal(`A bushel is an imperial unit of dry volume, equivalent in each of these systems to 4 pecks or 8 gallons. It is used for volumes of dry commodities (not liquids), most often in agriculture. It is abbreviated as bsh. or bu. In modern usage, the dry volume is usually only nominal, with bushels referring to standard weights instead.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.03636872`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bushel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA344`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bushel?oldid=476704875`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BUI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_UK`),
      namedNode(`${rdfs}label`),
      literal(`bushel (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${dcterms}description`),
      literal(`A bushel is an imperial and U.S. customary unit of dry volume, equivalent in each of these systems to 4 pecks or 8 gallons. It is used for volumes of dry commodities (not liquids), most often in agriculture. It is abbreviated as bsh. or bu. In modern usage, the dry volume is usually only nominal, with bushels referring to standard weights instead.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.03523907`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bushel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA353`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bushel?oldid=476704875`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}bushel-US`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`bu`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BUA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US`),
      namedNode(`${rdfs}label`),
      literal(`bushel (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000040786`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA349`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (US dry) for dry measure according to the Anglo-American system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us]/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (US Dry) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000009789`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA350`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (US dry) for dry measure according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (US Dry) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00058732`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA351`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (US dry) for dry measure according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (US Dry) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.03523907`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA352`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume bushel (US dry) for dry measure according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`bsh{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bu_us]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Bushel (US Dry) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${dcterms}description`),
      literal(`Belarus`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}currencyCode`),
      literal(`BYN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}currencyNumber`),
      literal(`933`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Belarusian_ruble`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Belarusian_ruble?oldid=494143246`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYR`),
      namedNode(`${rdfs}label`),
      literal(`Belarussian Ruble`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${dcterms}description`),
      literal(`The byte is a unit of digital information in computing and telecommunications that most commonly consists of eight bits.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5.5451774444795624753378569716654`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Byte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA354`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Byte?oldid=493588918`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}byte`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`By`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BYTE`),
      namedNode(`${rdfs}label`),
      literal(`Byte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${dcterms}description`),
      literal(`Belize`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`BZD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`084`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Belize_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(BZD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Belize_dollar?oldid=462662376`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BelizeDollar`),
      namedNode(`${rdfs}label`),
      literal(`Belize Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${dcterms}description`),
      literal(`Bermuda`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`BMD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`060`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bermudian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(BMD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bermudian_dollar?oldid=492670344`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BermudaDollar`),
      namedNode(`${rdfs}label`),
      literal(`Bermuda Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${dcterms}description`),
      literal(`Bolivia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}currencyCode`),
      literal(`BOV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}currencyNumber`),
      literal(`984`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}expression`),
      literal(`\\(BOV\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BolivianMvdol`),
      namedNode(`${rdfs}label`),
      literal(`Bolivian Mvdol (Funds code)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${dcterms}description`),
      literal(`Bolivia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}currencyCode`),
      literal(`BOB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}currencyNumber`),
      literal(`068`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bolivian_boliviano`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}expression`),
      literal(`\\(BOB\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bolivian_boliviano?oldid=494873944`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Boliviano`),
      namedNode(`${rdfs}label`),
      literal(`Boliviano`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${dcterms}description`),
      literal(`Brazil`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}currencyCode`),
      literal(`BRL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}currencyNumber`),
      literal(`986`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Brazilian_real`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}expression`),
      literal(`\\(BRL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Brazilian_real?oldid=495278259`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}BrazilianReal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BrazilianReal`),
      namedNode(`${rdfs}label`),
      literal(`Brazilian Real`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${dcterms}description`),
      literal(`Brunei`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`BND`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`096`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Brunei_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(BND\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Brunei_dollar?oldid=495134546`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BruneiDollar`),
      namedNode(`${rdfs}label`),
      literal(`Brunei Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${dcterms}description`),
      literal(`Bulgaria`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}currencyCode`),
      literal(`BGN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}currencyNumber`),
      literal(`975`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bulgarian_lev`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}expression`),
      literal(`\\(BGN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bulgarian_lev?oldid=494947467`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BulgarianLev`),
      namedNode(`${rdfs}label`),
      literal(`Bulgarian Lev`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${dcterms}description`),
      literal(`Burundi`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`BIF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`108`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Burundian_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(BIF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Burundian_franc?oldid=489383699`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}BurundianFranc`),
      namedNode(`${rdfs}label`),
      literal(`Burundian Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${dcterms}description`),
      literal(`Coulomb Square Meter (C-m2-per-volt) is a unit in the category of Electric polarizability.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}expression`),
      literal(`\\(C m^{2} v^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L0I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Polarizability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB486`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}symbol`),
      literal(`C⋅m²/V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m2.V-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m2/V`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Square Meter Per Volt`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Square Metre Per Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${dcterms}description`),
      literal(`Coulomb Square Meter (C-m2) is a unit in the category of Electric quadrupole moment. This unit is commonly used in the SI unit system. Coulomb Square Meter (C-m2) has a dimension of L2TI where L is length, T is time, and I is electric current. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(C m^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}symbol`),
      literal(`C⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${dcterms}description`),
      literal(`Coulomb Meter (C-m) is a unit in the category of Electric dipole moment. It is also known as atomic unit, u.a., au, ua. This unit is commonly used in the SI unit system. Coulomb Meter (C-m) has a dimension of LTI where L is length, T is time, and I is electric current. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA133`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}symbol`),
      literal(`C⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-M`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB101`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit coulomb divided by the 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`C/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB120`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit coulomb divided by the 0.000 001-fold of the power of the SI base unit metre by exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`C/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of exposure rate`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(C/kg-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA132`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikibooks.org/wiki/Basic_Physics_of_Nuclear_Medicine/Units_of_Radiation_Measurement`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`C/kg⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.kg-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/(kg.s)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Kilogram Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Coulomb Per Kilogram (C/kg)}\\) is the unit in the category of Exposure. It is also known as coulombs per kilogram, coulomb/kilogram. This unit is commonly used in the SI unit system. Coulomb Per Kilogram (C/kg) has a dimension of \\(M^{-1}TI\\) where \\(M\\) is mass, \\(T\\) is time, and \\(I\\) is electric current. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(C/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA131`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`C/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CKG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`Coulomb Per Square Meter (\\(C/m^2\\)) is a unit in the category of Electric charge surface density. It is also known as coulombs per square meter, coulomb per square metre, coulombs per square metre, coulomb/square meter, coulomb/square metre. This unit is commonly used in the SI unit system. Coulomb Per Square Meter (C/m2) has a dimension of \\(L^{-2}TI\\) where L is length, T is time, and I is electric current. This unit is the standard SI unit in this category. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(C/m^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA134`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`C/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`Coulomb Per Cubic Meter (\\(C/m^{3}\\)) is a unit in the category of Electric charge density. It is also known as coulomb per cubic metre, coulombs per cubic meter, coulombs per cubic metre, coulomb/cubic meter, coulomb/cubic metre. This unit is commonly used in the SI unit system. Coulomb Per Cubic Meter has a dimension of \\(L^{-3}TI\\) where \\(L\\) is length, \\(T\\) is time, and \\(I\\) is electric current. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(C/m^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA135`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`C/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`"Coulomb per Meter" is a unit for  'Electric Charge Line Density' expressed as \\(C/m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(C/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB337`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`C/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(` (\\(C/mol\\)) is a unit in the category of Molar electric charge. It is also known as \\(coulombs/mol\\). Coulomb Per Mol has a dimension of \\(TN{-1}I\\) where \\(T\\) is time, \\(N\\) is amount of substance, and \\(I\\) is electric current. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(c-per-mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB142`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`c/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB100`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit coulomb divided by the 0.000 001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`C/mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.mm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/mm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB119`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit coulomb divided by the 0.000 000 001-fold of the power of the SI base unit metre by exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}symbol`),
      literal(`C/mm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C.mm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C/mm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Cubic Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb Per Cubic Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${dcterms}description`),
      literal(`"Square Coulomb Meter per Joule" is a unit for  'Polarizability' expressed as \\(C^{2} m^{2} J^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}expression`),
      literal(`\\(C^{2} m^{2} J^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L0I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Polarizability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}symbol`),
      literal(`C²⋅m²/J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`C2.m.J-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`C2.m/J`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Coulomb Meter per Joule`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Coulomb Metre per Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${dcterms}description`),
      literal(`"Cubic Coulomb Meter per Square Joule" is a unit for  'Cubic Electric Dipole Moment Per Square Energy' expressed as \\(C^{3} m^{3} J^{-2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}expression`),
      literal(`\\(C^{3} m^{3} J^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E3L-1I0M-2H0T7D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}symbol`),
      literal(`C³⋅m³/J²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C3.m.J-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${qudt}ucumCode`),
      literal(`C3.m/J2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Coulomb Meter per Square Joule`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Coulomb Metre per Square Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${dcterms}description`),
      literal(`"Quartic Coulomb Meter per Cubic Energy" is a unit for  'Quartic Electric Dipole Moment Per Cubic Energy' expressed as \\(C^{4} m^{4} J^{-3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}expression`),
      literal(`\\(C^4m^4/J^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E4L-2I0M-3H0T10D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}symbol`),
      literal(`C⁴m⁴/J³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C4.m4.J-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${qudt}ucumCode`),
      literal(`C4.m4/J3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Coulomb Meter per Cubic Energy`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Coulomb Metre per Cubic Energy`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of electric charge. One coulomb is the amount of charge accumulated in one second by a current of one ampere. Electricity is actually a flow of charged particles, such as electrons, protons, or ions. The charge on one of these particles is a whole-number multiple of the charge e on a single electron, and one coulomb represents a charge of approximately 6.241 506 x 1018 e. The coulomb is named for a French physicist, Charles-Augustin de Coulomb (1736-1806), who was the first to measure accurately the forces exerted between electric charges.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Coulomb`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA130`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Coulomb?oldid=491815163`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}coulomb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}symbol`),
      literal(`C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}ucumCode`),
      literal(`C`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}udunitsCode`),
      literal(`C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`COU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C`),
      namedNode(`${rdfs}label`),
      literal(`Coulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${dcterms}description`),
      literal(`Canada`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}currencyCode`),
      literal(`CAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`124`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Canadian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Canadian_dollar?oldid=494738466`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}CanadianDollar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAD`),
      namedNode(`${rdfs}label`),
      literal(`Canadian Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.1855`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB139`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for the quantity of heat which is required to warm up 1 g  of water, which is free of air, at a constant pressure of 101.325 kPa (the pressure of the standard atmosphere on sea level) from 14.5 degrees Celsius to 15.5 degrees Celsius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`cal{15 °C}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_[15]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (15 Degrees C)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4186.8`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA362`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorieIT divided by the products of the units gram and degree Celsius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}/(g⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT.g-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT/(g.Cel)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Gram Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4186.8`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA363`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorieIT divided by the product of the SI base unit gram and Kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}/(g⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT.g-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT/(g.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Gram Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`Calories produced per gram of substance.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4186.8`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}expression`),
      literal(`\\(cal_{it}-per-gm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB176`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--thermal_heat_capacity--british_thermal_unit_therm_per_pound_mass.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorie according to the international steam table divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`418.68`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB108`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}/(s⋅cm⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT.s-1.cm-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT/(s.cm.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Second Centimeter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Second Centimetre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`41868.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB096`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat transfer coefficient according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}/(s⋅cm²⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT.s-1.cm-2.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT/(s.cm2.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Second Square Centimeter kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (international Table) Per Second Square Centimetre kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${dcterms}description`),
      literal(`International Table calorie.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.1868`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}symbol`),
      literal(`cal{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_IT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_IT`),
      namedNode(`${rdfs}label`),
      literal(`International Table calorie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.19`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA360`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit used particularly for calorific values of foods`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}symbol`),
      literal(`cal{mean}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_MEAN`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (mean)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`418.4`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA365`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/(cm⋅s⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.cm-1.s-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/(cm.s.Cel)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Centimeter Second Degree Celsius`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Centimetre Second Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${dcterms}description`),
      literal(`\\(Thermochemical Calorie. Calories produced per gram of substance.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}expression`),
      literal(`\\(cal\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--thermal_heat_capacity--british_thermal_unit_therm_per_pound_mass.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}symbol`),
      literal(`calTH/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${rdfs}label`),
      literal(`calorie (thermochemical) per gram (calTH/g)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(`${skos}changeNote`),
      literal(`2020-10-30 - incorrect local-name - G is for Gravity, GM is for gram - the correct named individual was already present, so this one deprecated. `),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA366`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorie (thermochemical) divided by the product of the unit gram and degree Celsius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/(g⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.g-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/(g.Cel)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Gram Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA367`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorie (thermochemical) divided by the product of the SI derived unit gram and the SI base unit Kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/(g⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.g-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/(g.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Gram Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`Thermochemical Calorie. Calories produced per gram of substance.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}expression`),
      literal(`\\(cal\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB153`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--thermal_heat_capacity--british_thermal_unit_therm_per_pound_mass.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit thermochemical calorie divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.06973`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA368`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorie divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`418.4`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB109`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal conductivity according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/(s⋅cm⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.s-1.cm-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/(s.cm.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Second Centimeter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Second Centimetre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`41840.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB097`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat transfer coefficient according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/(s⋅cm²⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.s-1.cm-2.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/(s.cm2.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Second Square Centimeter kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Second Square Centimetre kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.184`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA369`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit calorie divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`cal{th}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J82`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Calorie (thermochemical) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${dcterms}description`),
      literal(`The energy needed to increase the temperature of a given mass of water by \\(1 ^\\circ C\\) at atmospheric pressure depends on the starting temperature and is difficult to measure precisely. Accordingly, there have been several definitions of the calorie. The two perhaps most popular definitions used in older literature are the \\(15 ^\\circ C\\) calorie and the thermochemical calorie.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.184`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Calorie`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1 \\; cal_{th} = 4.184 J\\)

\\(\\approx 0.003964 BTU\\)

\\(\\approx 1.163 \\times 10^{-6} kWh\\)

\\(\\approx 2.611 \\times 10^{19} eV\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}symbol`),
      literal(`cal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal_th`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CAL_TH`),
      namedNode(`${rdfs}label`),
      literal(`Thermochemical Calorie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${dcterms}description`),
      literal(`The carat is a unit of mass equal to 200 mg and is used for measuring gemstones and pearls. The current definition, sometimes known as the metric carat, was adopted in 1907 at the Fourth General Conference on Weights and Measures, and soon afterward in many countries around the world. The carat is divisible into one hundred points of two milligrams each. Other subdivisions, and slightly different mass values, have been used in the past in different locations. In terms of diamonds, a paragon is a flawless stone of at least 100 carats (20 g). The ANSI X.12 EDI standard abbreviation for the carat is \\(CD\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0002`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Carat`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}expression`),
      literal(`\\(Nm/ct\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB166`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Carat?oldid=477129057`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}symbol`),
      literal(`ct`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[car_m]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CTM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${rdfs}label`),
      literal(`Carat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CARAT`),
      namedNode(`${skos}altLabel`),
      literal(`metric carat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${dcterms}description`),
      literal(`The typical expression of morbidity rate, expressed as cases per 1000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Incidence_(epidemiology)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The typical expression of morbidity rate, expressed as cases per 1000 individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${qudt}symbol`),
      literal(`Cases/1000 individuals/year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${rdfs}label`),
      literal(`Cases per 1000 individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${dcterms}description`),
      literal(`The typical expression of morbidity rate, expressed as cases per 1000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Incidence_(epidemiology)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The typical expression of morbidity rate, expressed as cases per 1000 individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${qudt}symbol`),
      literal(`Cases/1000 individuals/year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}label`),
      literal(`Cases per 1000 individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${dcterms}description`),
      literal(`"Candela per Square Inch" is a unit for  'Luminance' expressed as \\(cd/in^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1550.0031000062002`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}expression`),
      literal(`\\(cd/in^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Luminance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB257`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`cd/in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cd.[in_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cd/[in_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Candela per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-LM`),
      namedNode(`${rdfs}label`),
      literal(`Candela per Lumen`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`The candela per square metre (\\(cd/m^2\\)) is the derived SI unit of luminance. The unit is based on the candela, the SI unit of luminous intensity, and the square metre, the SI unit of area. Nit (nt) is a deprecated non-SI name also used for this unit (\\(1 nit = 1 cd/m^2\\)). As a measure of light emitted per unit area, this unit is frequently used to specify the brightness of a display device. Most consumer desktop liquid crystal displays have luminances of 200 to 300 \\(cd/m^2\\); the sRGB spec for monitors targets 80 cd/m2. HDTVs range from 450 to about 1000 cd/m2. Typically, calibrated monitors should have a brightness of \\(120 cd/m^2\\). \\(Nit\\) is believed to come from the Latin word nitere, to shine.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(cd/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Luminance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA371`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`cd/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cd.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cd/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}udunitsCode`),
      literal(`nt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`candela per square meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`candela per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Candela}\\) is a unit for  'Luminous Intensity' expressed as \\(cd\\).  The candela is the SI base unit of luminous intensity; that is, power emitted by a light source in a particular direction, weighted by the luminosity function (a standardized model of the sensitivity of the human eye to different wavelengths, also known as the luminous efficiency function). A common candle emits light with a luminous intensity of roughly one candela.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Candela`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA370`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD719`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Candela?oldid=484253082`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}candela`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}symbol`),
      literal(`cd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}ucumCode`),
      literal(`cd`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CDL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CD`),
      namedNode(`${rdfs}label`),
      literal(`Candela`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${dcterms}description`),
      literal(`"Colony Forming Unit" is a unit for  'Microbial Formation' expressed as \\(CFU\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Colony-forming_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Colony-forming_unit?oldid=473146689`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}colonyFormingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}symbol`),
      literal(`CFU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${qudt}ucumCode`),
      literal(`[CFU]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CFU`),
      namedNode(`${rdfs}label`),
      literal(`Colony Forming Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${dcterms}description`),
      literal(`A chain is a unit of length. It measures 66 feet, or 22 yards, or 100 links, or 4 rods. There are 10 chains in a furlong, and 80 chains in one statute mile. An acre is the area of 10 square chains (that is, an area of one chain by one furlong). The chain has been used for several centuries in Britain and in some other countries influenced by British practice.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`20.1168`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Chain`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB203`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Chain?oldid=494116185`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}chain`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}symbol`),
      literal(`ch`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ch_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`X1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${rdfs}label`),
      literal(`chain`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CH`),
      namedNode(`${skos}altLabel`),
      literal(`Gunter's chain`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${dcterms}description`),
      literal(`A C.G.S System unit for \\(\\textit{Thermal Insulance}\\) expressed as "clo".`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.155`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA374`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}symbol`),
      literal(`clo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CLO`),
      namedNode(`${rdfs}label`),
      literal(`Clo`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98.0665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}symbol`),
      literal(`cmH₂0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter of Water`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CM_H2O`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${dcterms}description`),
      literal(`The cord is a unit of measure of dry volume used in Canada and the United States to measure firewood and pulpwood. A cord is the amount of wood that, when 'ranked and well stowed' (arranged so pieces are aligned, parallel, touching and compact), occupies a volume of 128 cubic feet (3.62 cubic metres). This corresponds to a well stacked woodpile 4 feet (122 cm) wide, 4 feet (122 cm) high, and 8 feet (244 cm) long; or any other arrangement of linear measurements that yields the same volume. The name cord probably comes from the use of a cord or string to measure it. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3.62`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cord`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cord?oldid=490232340`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}cord`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}symbol`),
      literal(`cord`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}ucumCode`),
      literal(`[crd_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WCD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CORD`),
      namedNode(`${rdfs}label`),
      literal(`Cord`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${dcterms}description`),
      literal(`"Candlepower" (abbreviated as cp) is a now-obsolete unit which was used to express levels of light intensity in terms of the light emitted by a candle of specific size and constituents. In modern usage Candlepower equates directly to the unit known as the candela.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Candlepower`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Candlepower?oldid=491140098`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}symbol`),
      literal(`cp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CP`),
      namedNode(`${rdfs}label`),
      literal(`Candlepower`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${dcterms}description`),
      literal(`"US Liquid Cup" is a unit for  'Liquid Volume' expressed as \\(cup\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00023658825`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}symbol`),
      literal(`cup`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cup_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP`),
      namedNode(`${rdfs}label`),
      literal(`US Liquid Cup`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0002365882`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA404`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}symbol`),
      literal(`cup{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cup_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CUP_US`),
      namedNode(`${rdfs}label`),
      literal(`Cup (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${dcterms}description`),
      literal(`"Hundred Weight - Long" is a unit for  'Mass' expressed as \\(cwt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`50.80235`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}expression`),
      literal(`\\(cwt long\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}symbol`),
      literal(`cwt{long}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lcwt_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CWI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${rdfs}label`),
      literal(`Long Hundred Weight`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_LONG`),
      namedNode(`${skos}altLabel`),
      literal(`British hundredweight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${dcterms}description`),
      literal(`"Hundred Weight - Short" is a unit for  'Mass' expressed as \\(cwt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`45.359237`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}expression`),
      literal(`\\(cwt\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}symbol`),
      literal(`cwt{short}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[scwt_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${rdfs}label`),
      literal(`Hundred Weight - Short`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CWT_SHORT`),
      namedNode(`${skos}altLabel`),
      literal(`U.S. hundredweight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`Abcoulomb Per Square Centimeter is a unit in the category of Electric charge surface density. It is also known as abcoulombs per square centimeter, abcoulomb per square centimetre, abcoulombs per square centimetre, abcoulomb/square centimeter,abcoulomb/square centimetre. This unit is commonly used in the cgs unit system.
Abcoulomb Per Square Centimeter (abcoulomb/cm2) has a dimension of \\(L_2TI\\).  where L is length, T is time, and I is electric current. It can be converted to the corresponding standard SI unit \\(C/m^2\\) by multiplying its value by a factor of 100,000.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(abc-per-cm2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_charge_surface_density--abcoulomb_per_square_centimeter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(abcoulomb/cm^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`abC/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.C.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abcoulomb per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Abcoulomb per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${dcterms}description`),
      literal(`"abcoulomb" (abC or aC) or electromagnetic unit of charge (emu of charge) is the basic physical unit of electric charge in the cgs-emu system of units. One abcoulomb is equal to ten coulombs (\\(1\\,abC\\,=\\,10\\,C\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abcoulomb`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abcoulomb?oldid=477198635`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-9?rskey=KHjyOu`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abcoulomb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.C`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abcoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Statcoulomb per Square Centimeter}\\) is a unit of measure for electric flux density and electric polarization. One Statcoulomb per Square Centimeter is \\(2.15\\times 10^9 \\, coulomb\\,per\\,square\\,inch\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000333564`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(statc-per-cm2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`statC/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Statcoulomb per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Statcoulomb per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`"Statcoulomb per Mole" is a unit of measure for the electical charge associated with one mole of a substance. The mole is a unit of measurement used in chemistry to express amounts of a chemical substance, defined as an amount of a substance that contains as many elementary entities (e.g., atoms, molecules, ions, electrons) as there are atoms in 12 grams of pure carbon-12 (12C), the isotope of carbon with atomic weight 12.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000333564`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(statC/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`statC/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Statcoulomb per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${dcterms}description`),
      literal(`The statcoulomb (\\(statC\\)) or franklin (\\(Fr\\)) or electrostatic unit of charge (\\(esu\\)) is the physical unit for electrical charge used in the centimetre-gram-second system of units (cgs) and Gaussian units. It is a derived unit given by \\(1\\ statC = 1\\ g\\ cm\\ s = 1\\ erg\\ cm\\). The SI system of units uses the coulomb (C) instead. The conversion between C and statC is different in different contexts. The number 2997924580 is 10 times the value of the speed of light expressed in meters/second, and the conversions are exact except where indicated. The coulomb is an extremely large charge rarely encountered in electrostatics, while the statcoulomb is closer to everyday charges.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000033356409519815204957557671447492`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Statcoulomb`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}FR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Statcoulomb?oldid=492664360`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1 C \\leftrightarrow 2997924580 statC \\approx 3.00 \\times 10^9 statC,\\ 1 \\hspace{0.3pc} statC \\leftrightarrow \\hspace{0.3pc} \\approx 3.34 \\times 10^{-10} C\\) for electric charge.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1 C \\leftrightarrow 4 \\pi \\times 2997924580 statC \\approx 3.77 \\times 10^{10} statC,\\ 1 \\hspace{0.3pc} statC \\leftrightarrow \\hspace{0.2pc} \\approx 2.6 \\times 10^{-11} C\\) for electric flux \\(\\Phi_D\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1 C/m \\leftrightarrow 4 \\pi \\times 2997924580 \\times 10^{-4} statC/cm \\approx 3.77 \\times 10^6 statC/cm,\\ 1 \\hspace{0.3pc} statC/cm \\leftrightarrow \\hspace{0.3pc} \\approx 2.65 \\times 10^{-7} C/m\\) for electric displacement field \\(D\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statcoulomb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statcoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}C_Stat`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}FR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${dcterms}description`),
      literal(`Cape Verde`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}currencyCode`),
      literal(`CVE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}currencyNumber`),
      literal(`132`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cape_Verdean_escudo`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}expression`),
      literal(`\\(CVE\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cape_Verdean_escudo?oldid=491416749`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(`${rdfs}label`),
      literal(`Cape Verde Escudo`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${dcterms}description`),
      literal(`Cayman Islands`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`KYD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`136`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cayman_Islands_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(KYD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cayman_Islands_dollar?oldid=494206112`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(`${rdfs}label`),
      literal(`Cayman Islands Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${dcterms}description`),
      literal(`Ghana`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}currencyCode`),
      literal(`GHS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}currencyNumber`),
      literal(`936`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ghanaian_cedi`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}expression`),
      literal(`\\(GHS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ghanaian_cedi?oldid=415914569`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Cedi`),
      namedNode(`${rdfs}label`),
      literal(`Cedi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to 100,000 Pa. It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000\\,Pa = 1 bar \\approx 750.0616827 Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}symbol`),
      literal(`cbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiBAR`),
      namedNode(`${rdfs}label`),
      literal(`Centibar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${dcterms}description`),
      literal(`A CentiCoulomb is \\(10^{-2} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}symbol`),
      literal(`cC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${rdfs}label`),
      literal(`CentiCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB077`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 01-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CGM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiGM`),
      namedNode(`${rdfs}label`),
      literal(`Centigram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA373`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}symbol`),
      literal(`cL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}ucumCode`),
      literal(`cL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CLT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${rdfs}label`),
      literal(`Centilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiL`),
      namedNode(`${rdfs}label`),
      literal(`Centilitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA378`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the SI base unit metre divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`cm/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA376`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the SI base unit metre divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`cm/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000316880878140289`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${qudt}symbol`),
      literal(`cm/(1000 yr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.ka-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(`${rdfs}label`),
      literal(`Centimetres per thousand years`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Centimeter per Square Second}\\) is a C.G.S System unit for  \\(\\textit{Linear Acceleration}\\) expressed as \\(cm/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB398`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`cm/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter per Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Centimeter per Second" is a C.G.S System unit for  'Linear Velocity' expressed as \\(cm/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA379`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(cm/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`cm/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`centimeter per second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`centimetre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Centimeter Second Degree Celsius}\\) is a C.G.S System unit for 'Length Temperature Time' expressed as \\(cm-s-degC\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm-s-degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`cm⋅s⋅°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.s.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm.s/Cel`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter Second Degree Celsius`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre Second Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Square centimeter minute" is a unit for  'Area Time' expressed as \\(cm^{2} . m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.006`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm^{2}m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`cm²m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm2.min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimeter Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimetre Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`cm²/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm2.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Square centimetres per cubic centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`cm²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square centimetres per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Square Centimeter Second" is a C.G.S System unit for  'Area Time' expressed as \\(cm^2 . s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm^2 . s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`cm²⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm2.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimeter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimetre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`A unit of area equal to that of a square, of sides 1cm`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(sqcm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA384`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CMK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the 0.000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA388`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA391`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA386`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA394`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the 0.000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA395`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A unit that is the 0.000001-fold of the power of the SI base unit metre with the exponent 3 divided by the SI base unit mol multiplied by the SI base unit second.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter per Mole Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter per Mole Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA398`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA399`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 001-fold of the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`cm³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimeter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Centimetre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${dcterms}description`),
      literal(`The CGS unit of volume, equal to 10-6 cubic meter, 1 milliliter, or about 0.061 023 7 cubic inch`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}expression`),
      literal(`\\(cubic-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA385`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CMQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`cubic centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`cubic centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${dcterms}description`),
      literal(`A centimetre is a unit of length in the metric system, equal to one hundredth of a metre, which is the SI base unit of length. Centi is the SI prefix for a factor of 10.  The centimetre is the base unit of length in the now deprecated centimetre-gram-second (CGS) system of units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Centimetre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA375`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Centimetre?oldid=494931891`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Centi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1/100 of SI unit of amount of substance per kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`cmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cmol/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Centimole per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Centimeter of Water}\\) is a C.G.S System unit for  'Force Per Area' expressed as \\(cm_{H2O}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98.0665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Centimetre_of_water`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA402`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Centimetre_of_water?oldid=487656894`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI conforming unit of pressure that corresponds to the static pressure generated by a water column with a height of 1 centimetre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}symbol`),
      literal(`cmH₂0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm[H2O]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cmH2O`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cm_H2O`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter of Water`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Conventional Centimeter Of Water`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Conventional Centimetre Of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1333.224`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA403`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`not SI conform unit of the pressure, that corresponds with the static pressure generated by a mercury column with the height of 1 centimetre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}symbol`),
      literal(`cmHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm[Hg]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cmHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`cm_Hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${rdfs}label`),
      literal(`Centimeter Of Mercury`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiM_HG`),
      namedNode(`${rdfs}label`),
      literal(`Centimetre Of Mercury`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA355`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the product of the SI derived unit newton and SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}symbol`),
      literal(`cN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`cN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${rdfs}label`),
      literal(`Centinewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiN-M`),
      namedNode(`${rdfs}label`),
      literal(`Centinewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA358`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.01-fold of the CGS unit of the dynamic viscosity poise divided by the unit of the pressure bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`cP/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cP.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`cP/bar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Centipoise Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Centipoise}\\) is a C.G.S System unit for  'Dynamic Viscosity' expressed as \\(cP\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA356`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the CGS unit of the dynamic viscosity poise`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}symbol`),
      literal(`cP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}ucumCode`),
      literal(`cP`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C7`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiPOISE`),
      namedNode(`${rdfs}label`),
      literal(`Centipoise`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Centistokes}\\) is a C.G.S System unit for  'Kinematic Viscosity' expressed as \\(cSt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA359`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}symbol`),
      literal(`cSt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}ucumCode`),
      literal(`cSt`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CentiST`),
      namedNode(`${rdfs}label`),
      literal(`Centistokes`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${dcterms}description`),
      literal(`Chile`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`CLP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`152`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Chilean_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(CLP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Chilean_peso?oldid=495455481`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ChileanPeso`),
      namedNode(`${rdfs}label`),
      literal(`Chilean Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${dcterms}description`),
      literal(`The curie (symbol Ci) is a non-SI unit of radioactivity, named after Marie and Pierre Curie. It is defined as \\(1Ci = 3.7 \\times 10^{10} decays\\ per\\ second\\). Its continued use is discouraged. One Curie is roughly the activity of 1 gram of the radium isotope Ra, a substance studied by the Curies. The SI derived unit of radioactivity is the becquerel (Bq), which equates to one decay per second. Therefore: \\(1Ci = 3.7 \\times 10^{10} Bq= 37 GBq\\) and \\(1Bq \\equiv 2.703 \\times 10^{-11}Ci \\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Curie`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA138`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Curie?oldid=495080313`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}curie`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}symbol`),
      literal(`Ci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ci`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Ci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CUR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ci`),
      namedNode(`${rdfs}label`),
      literal(`Curie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${dcterms}description`),
      literal(`Colombia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`COP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`170`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Colombian_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(COP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Colombian_peso?oldid=490834575`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ColombianPeso`),
      namedNode(`${rdfs}label`),
      literal(`Colombian Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${dcterms}description`),
      literal(`Comoros`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`KMF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`174`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Comorian_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(KMF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Comorian_franc?oldid=489502162`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ComoroFranc`),
      namedNode(`${rdfs}label`),
      literal(`Comoro Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${dcterms}description`),
      literal(`Bosnia and Herzegovina`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}currencyCode`),
      literal(`BAM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}currencyNumber`),
      literal(`977`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}expression`),
      literal(`\\(BAM\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ConvertibleMark`),
      namedNode(`${rdfs}label`),
      literal(`Convertible Marks`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${dcterms}description`),
      literal(`Nicaragua`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}currencyCode`),
      literal(`NIO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}currencyNumber`),
      literal(`558`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nicaraguan_c%C3%B3rdoba`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}expression`),
      literal(`\\(NIO\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nicaraguan_córdoba?oldid=486140595`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CordobaOro`),
      namedNode(`${rdfs}label`),
      literal(`Cordoba Oro`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${dcterms}description`),
      literal(`Costa Rica`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}currencyCode`),
      literal(`CRC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}currencyNumber`),
      literal(`188`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Costa_Rican_col%C3%B3n`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}expression`),
      literal(`\\(CRC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Costa_Rican_colón?oldid=491007608`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CostaRicanColon`),
      namedNode(`${rdfs}label`),
      literal(`Costa Rican Colon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${dcterms}description`),
      literal(`Croatia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}currencyCode`),
      literal(`HRK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}currencyNumber`),
      literal(`191`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Croatian_kuna`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}expression`),
      literal(`\\(HRK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Croatian_kuna?oldid=490959527`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CroatianKuna`),
      namedNode(`${rdfs}label`),
      literal(`Croatian Kuna`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${dcterms}description`),
      literal(`Cuba`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`CUP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`192`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cuban_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(CUP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cuban_peso?oldid=486492974`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CubanPeso`),
      namedNode(`${rdfs}label`),
      literal(`Cuban Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${dcterms}description`),
      literal(`Cyprus`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`CYP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`196`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cypriot_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(CYP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cypriot_pound?oldid=492644935`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CyprusPound`),
      namedNode(`${rdfs}label`),
      literal(`Cyprus Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${dcterms}description`),
      literal(`Czech Republic`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}currencyCode`),
      literal(`CZK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}currencyNumber`),
      literal(`203`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Czech_koruna`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}expression`),
      literal(`\\(CZK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Czech_koruna?oldid=493991393`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}CzechKoruna`),
      namedNode(`${rdfs}label`),
      literal(`Czech Koruna`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${dcterms}description`),
      literal(`Mean solar day`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`86400.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Day`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA407`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Day?oldid=494970012`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}symbol`),
      literal(`day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}udunitsCode`),
      literal(`d`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DAY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY`),
      namedNode(`${rdfs}label`),
      literal(`Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${dcterms}description`),
      literal(`The length of time which passes between a given fixed star in the sky crossing a given projected meridian (line of longitude). The sidereal day is \\(23 h 56 m 4.1 s\\), slightly shorter than the solar day because the Earth 's orbital motion about the Sun  means the Earth  has to rotate slightly more than one turn with respect to the "fixed" stars in order to reach the same Earth-Sun orientation. Another way of thinking about the difference is that it amounts to \\(1/365.2425^{th}\\) of a day per day, since even if the Earth  did not spin on its axis at all, the Sun  would appear to make one rotation around the Earth  as the Earth  completed a single orbit (which takes one year).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`86164.099`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA412`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sidereal_time`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://scienceworld.wolfram.com/astronomy/SiderealDay.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}symbol`),
      literal(`day{sidereal}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${qudt}ucumCode`),
      literal(`d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(`${rdfs}label`),
      literal(`Sidereal Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${dcterms}description`),
      literal(`The expression of mortality rate, expressed as deaths per 1,000,000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mortality_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The expression of mortality rate, expressed as deaths per Million individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${qudt}symbol`),
      literal(`deaths/million individuals/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${rdfs}label`),
      literal(`Deaths per Million individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${dcterms}description`),
      literal(`The typical expression of mortality rate, expressed as deaths per 1000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mortality_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The typical expression of mortality rate, expressed as deaths per 1000 individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${qudt}symbol`),
      literal(`deaths/1000 individuals/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${rdfs}label`),
      literal(`Deaths per 1000 individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${dcterms}description`),
      literal(`The typical expression of mortality rate, expressed as deaths per 1000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mortality_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The typical expression of mortality rate, expressed as deaths per 1000 individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${qudt}symbol`),
      literal(`deaths/1000 individuals/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(`${rdfs}label`),
      literal(`Deaths per 1000 individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${dcterms}description`),
      literal(`The expression of mortality rate, expressed as deaths per 1,000,000 individuals, per year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mortality_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The expression of mortality rate, expressed as deaths per Million individuals, per year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${qudt}symbol`),
      literal(`deaths/million individuals/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(`${rdfs}label`),
      literal(`Deaths per Million individuals per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${dcterms}description`),
      literal(`One decade is a factor of 10 difference between two numbers (an order of magnitude difference) measured on a logarithmic scale. It is especially useful when referring to frequencies and when describing frequency response of electronic systems, such as audio amplifiers and filters. The factor-of-ten in a decade can be in either direction: so one decade up from 100 Hz is 1000 Hz, and one decade down is 10 Hz. The factor-of-ten is what is important, not the unit used, so \\(3.14 rad/s\\) is one decade down from \\(31.4 rad/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Decade_(log_scale)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${qudt}symbol`),
      literal(`dec`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}LogarithmicUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DECADE`),
      namedNode(`${rdfs}label`),
      literal(`Dec`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Degree per Hour" is an Imperial unit for  'Angular Velocity' expressed as \\(deg/h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000484813681`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(deg/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`°/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Degree per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`A change of angle in one SI unit of length.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0174532925199433`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`°/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Degrees per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`A unit of measure for the rate of change of plane angle, \\(d\\omega / dt\\),  in durations of one minute.The vector \\(\\omega\\) is directed along the axis of rotation in the direction for which the rotation is clockwise.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000290888209`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(deg-per-min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`°/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Degree per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Degree per Square Second}\\) is an Imperial unit for \\(\\textit{Angular Acceleration}\\) expressed as \\(deg/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0174532925`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(deg/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB407`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`°/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Degree per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Degree per Second" is an Imperial unit for  'Angular Velocity' expressed as \\(deg/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0174532925`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(deg/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA026`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`°/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Degree per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${dcterms}description`),
      literal(`A square degree is a non-SI unit measure of solid angle. It is denoted in various ways, including deg, sq. deg. and \\(\\circ^2\\). Just as degrees are used to measure parts of a circle, square degrees are used to measure parts of a sphere. Analogous to one degree being equal to \\(\\pi /180 radians\\), a square degree is equal to (\\(\\pi /180)\\) or about 1/3283 steradian. The number of square degrees in a whole sphere is or approximately 41 253 deg. This is the total area of the 88 constellations in the list of constellations by area. For example, observed from the surface of the Earth, the Moon has a diameter of approximately \\(0.5^\\circ\\), so it covers a solid angle of approximately 0.196 deg, which is \\(4.8 \\times 10\\) of the total sky sphere.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00030461742`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}expression`),
      literal(`\\(deg^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}symbol`),
      literal(`°²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG2`),
      namedNode(`${rdfs}label`),
      literal(`Square degree`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${dcterms}description`),
      literal(`A degree (in full, a degree of arc, arc degree, or arcdegree), usually denoted by \\(^\\circ\\) (the degree symbol), is a measurement of plane angle, representing 1/360 of a full rotation; one degree is equivalent to  \\(2\\pi /360 rad\\), \\(0.017453 rad\\). It is not an SI unit, as the SI unit for angles is radian, but is an accepted SI unit.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0174532925`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA024`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-331`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}degree`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}symbol`),
      literal(`°`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}ucumCode`),
      literal(`deg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`°`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG`),
      namedNode(`${rdfs}label`),
      literal(`Degree`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA027`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for the determination of the density of petroleum at 60 degrees F (15.56 degrees C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}symbol`),
      literal(`°API`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_API`),
      namedNode(`${rdfs}label`),
      literal(`Degree API`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA031`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for the mixing ratio of a soluble dry substance in water at 17.5 degrees C similar to the percent designation for solutions, in which a solution of 1 g saccharose in 100 g saccharose/ water solution corresponds to 1 degree Balling and respectively a one percent solution`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}symbol`),
      literal(`°Balling`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(`${rdfs}label`),
      literal(`Degree Balling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA028`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`graduation of the areometer scale for determination of densitiy of fluids.

The Baumé scale is a pair of hydrometer scales developed by French pharmacist Antoine Baumé in 1768 to measure density of various liquids. The unit of the Baumé scale has been notated variously as degrees Baumé, B°, Bé° and simply Baumé (the accent is not always present). One scale measures the density of liquids heavier than water and the other, liquids lighter than water. The Baumé of distilled water is 0. The API gravity scale is based on errors in early implementations of the Baumé scale.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}symbol`),
      literal(`°Bé{origin}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(`${rdfs}label`),
      literal(`Degree Baume (origin Scale)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA029`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`graduation of the areometer scale for determination of density of fluids according to the Anglo-American system of units, which are heavier than water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}symbol`),
      literal(`°Bé{US Heavy}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(`${rdfs}label`),
      literal(`Degree Baume (US Heavy)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA030`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`graduation of the areometer scale for determination of density of fluids according to the Anglo-American system of units, which are lighter than water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}symbol`),
      literal(`°Bé{US Light}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(`${rdfs}label`),
      literal(`Degree Baume (US Light)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA032`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit named according to Adolf Brix for the mixing ratio of a soluble dry substance in water with 15.5 °C similar to the percent designation for solutions, in which a solution of 1 g saccharose in 100 g saccharose/water solution corresponds to 1 °Brix and respectively an one percent solution`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}symbol`),
      literal(`°Bx`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(`${rdfs}label`),
      literal(`Degree Brix`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA048`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density of the must, as measure for the proportion of the soluble material in the grape must`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}symbol`),
      literal(`°Oe`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(`${rdfs}label`),
      literal(`Degree Oechsle`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA049`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for the mixing ratio of the original gravity in the beer brew at 17,5 °C before the fermentation`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}symbol`),
      literal(`°P`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PLA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(`${rdfs}label`),
      literal(`Degree Plato`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA054`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density of fluids, which are heavier than water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}symbol`),
      literal(`°Tw`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(`${rdfs}label`),
      literal(`Degree Twaddell`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Celsius Centimeter} is a C.G.S System unit for 'Length Temperature' expressed as \\(cm-degC\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(cm-degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`°C⋅cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`Derived unit for the product of the temperature in degrees Celsius and the mass density of a medium, integrated over vertical depth or height in metres.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`°C⋅kg/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.kg.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-KiloGM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Degrees Celsius kilogram per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Celsius per Hour} is a unit for 'Temperature Per Time' expressed as \\(degC / hr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(degC / hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA036`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`°C/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA034`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit with the name Degree Celsius divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`°C/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`°C/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Degrees Celsius per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Celsius per Minute} is a unit for 'Temperature Per Time' expressed as \\(degC / m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(degC / m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA037`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`°C/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Celsius per Second} is a unit for 'Temperature Per Time' expressed as \\(degC / s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(degC / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA038`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`°C/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of temperature expressed on the Celsius scale over a period of an average calendar year (365.25 days).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000316880878140289`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`°C/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Degrees Celsius per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${dcterms}description`),
      literal(`temperature multiplied by unit of time.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`604800.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${qudt}symbol`),
      literal(`°C/wk`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel.wk`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C-WK`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius week`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H2T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`°C²⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Degrees Celsius per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Celsius}\\), also known as centigrade, is a scale and unit of measurement for temperature. It can refer to a specific temperature on the Celsius scale as well as a unit to indicate a temperature interval, a difference between two temperatures or an uncertainty. This definition fixes the magnitude of both the degree Celsius and the kelvin as precisely 1 part in 273.16 (approximately 0.00366) of the difference between absolute zero and the triple point of water. Thus, it sets the magnitude of one degree Celsius and that of one kelvin as exactly the same. Additionally, it establishes the difference between the two scales' null points as being precisely \\(273.15\\,^{\\circ}{\\rm C}\\).</p>`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}conversionOffset`),
      literal(`273.15`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Celsius`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec04.html#4.2.1.1">SP811 section 4.2.1.1</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec06.html#6.2.8">SP811 section 6.2.8</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA033`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Celsius?oldid=494152178`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\,^{\\circ}{\\rm C}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}degreeCelsius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`Cel`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}udunitsCode`),
      literal(`°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}udunitsCode`),
      literal(`℃`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CEL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C`),
      namedNode(`${skos}altLabel`),
      literal(`degree-centigrade`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`86400`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The sum of excess temperature over 5.5°C, where the temperature is the mean of the minimum and maximum atmospheric temperature in a day. This measure is appropriate for most cereal crops.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`GDD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Growing Degree Days (Cereals)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.89563`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA043`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal resistor according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}symbol`),
      literal(`°F⋅hr⋅ft²/Btu{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].h-1.[ft_i]-2.[Btu_IT]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/(h.[ft_i]2.[Btu_IT])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit Hour Square Foot per British Thermal Unit (international Table)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.8969`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA040`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the thermal resistor according to the according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}symbol`),
      literal(`°F⋅hr⋅ft²/Btu{th}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].h-1.[ft_i]-2.[Btu_th]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/(h.[ft_i]2.[Btu_th])`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit Hour Square Foot per British Thermal Unit (thermochemical)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Fahrenheit Hour per BTU} is an Imperial unit for 'Thermal Resistance' expressed as \\(degF-hr/Btu\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF-hr/Btu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}symbol`),
      literal(`°F⋅hr/Btu`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].h.[Btu_IT]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].h/[Btu_IT]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit Hour per BTU`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${dcterms}description`),
      literal(``, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF-hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}symbol`),
      literal(`°F⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-HR`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Fahrenheit per Hour} is a unit for 'Temperature Per Time' expressed as \\(degF / h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF / h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA044`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`°F/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA041`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit degree Fahrenheit for temperature according to the Anglo-American system of units divided by the SI base unit Kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`°F/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Fahrenheit per Minute} is a unit for 'Temperature Per Time' expressed as \\(degF / m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF / m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA045`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`°F/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Degree Fahrenheit per Square Second}\\) is a C.G.S System unit for expressing the acceleration of a temperature expressed as \\(degF / s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF / s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`'Degree Fahrenheit per Square Second' is a unit for expressing the acceleration of a temperature expressed as 'degF /s2'.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`°F/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Fahrenheit per Second} is a unit for 'Temperature Per Time' expressed as \\(degF / s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA046`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`°F/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Degree Fahrenheit} is an Imperial unit for 'Thermodynamic Temperature' expressed as \\(\\,^{\\circ}{\\rm F}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5555555555555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}conversionOffset`),
      literal(`459.669607`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA039`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}degreeFahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`℉`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FAH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(A rate of change of temperature measured in degree Rankine in periods of one hour.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(degR / h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA051`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`°R/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Degree Rankine per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`\\(A rate of change of temperature measured in degree Rankine in periods of one minute\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(degR / m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA052`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`°R/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Degree Rankine per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(A rate of change of temperature measured in degree Rankine in periods of one second.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(degR / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA053`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`°R/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Degree Rankine per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${dcterms}description`),
      literal(`Rankine is a thermodynamic (absolute) temperature scale. The symbol for degrees Rankine is \\(^\\circ R\\) or \\(^\\circ Ra\\) if necessary to distinguish it from the Rømer and Réaumur scales). Zero on both the Kelvin and Rankine scales is absolute zero, but the Rankine degree is defined as equal to one degree Fahrenheit, rather than the one degree Celsius used by the Kelvin scale. A temperature of \\(-459.67 ^\\circ F\\) is exactly equal to \\(0 ^\\circ R\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5555555555555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA050`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rankine_scale`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}degreeRankine`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`°R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[degR]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}udunitsCode`),
      literal(`°R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${dcterms}description`),
      literal(`A dioptre, or diopter, is a unit of measurement for the optical power of a lens or curved mirror, which is equal to the reciprocal of the focal length measured in metres (that is, \\(1/metre\\)). For example, a \\(3 \\; dioptre\\) lens brings parallel rays of light to focus at \\(1/3\\,metre\\). The same unit is also sometimes used for other reciprocals of distance, particularly radii of curvature and the vergence of optical beams. Though the diopter is based on the SI-metric system it has not been included in the standard so that there is no international name or abbreviation for this unit of measurement within the international system of units this unit for optical power would need to be specified explicitly as the inverse metre.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dioptre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Curvature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dioptre?oldid=492506920`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}ucumCode`),
      literal(`[diop]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DIOPTER`),
      namedNode(`${rdfs}label`),
      literal(`Diopter`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`39.37008`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA421`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`point density as amount of the picture base element divided by the unit inch according to the Anglo-American and the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}symbol`),
      literal(`DPI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}ucumCode`),
      literal(`{dot}/[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DPI`),
      namedNode(`${rdfs}label`),
      literal(`Dots Per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0017718451953125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB181`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI-conforming unit of mass comes from the Anglo-American Troy or Apothecaries' Weight System of units which is  mainly used in England, in the Netherlands and in the USA as a commercial weight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}symbol`),
      literal(`dr{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[dr_ap]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DRI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_UK`),
      namedNode(`${rdfs}label`),
      literal(`Dram (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0038879346`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB180`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI-conform unit of the mass according to the avoirdupois system of units: 1 dram (av. ) = 1/16 ounce (av. ) = 1/256 pound (av.)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}symbol`),
      literal(`dr{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[dr_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`dr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`fldr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DRA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DRAM_US`),
      namedNode(`${rdfs}label`),
      literal(`Dram (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${dcterms}description`),
      literal(`"Penny Weight" is a unit for  'Mass' expressed as \\(dwt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00155517384`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pennyweight`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pennyweight?oldid=486693644`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}symbol`),
      literal(`dwt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pwt_tr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DWT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${rdfs}label`),
      literal(`Penny Weight`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DWT`),
      namedNode(`${skos}altLabel`),
      literal(`dryquartus`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`"Dyne Centimeter" is a C.G.S System unit for  'Torque' expressed as \\(dyn-cm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(dyn-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA423`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`dyn⋅cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`"Dyne per Square Centimeter" is a C.G.S System unit for  'Force Per Area' expressed as \\(dyn/cm^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(dyn/cm^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA424`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`dyn/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn/cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D9`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Dyne per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Dyne per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB106`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the surface tension`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`dyn/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn/cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DX`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB102`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the acoustic image impedance of the medium`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`dyn⋅s/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.s.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.s/cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Second Per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Second Per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB144`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the mechanical impedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`dyn⋅s/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.s.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn.s/cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Second Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Dyne Second Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the dyne is a unit of force specified in the centimetre-gram-second (CGS) system of units. One dyne is equal to In physics, the dyne is a unit of force specified in the centimetre-gram-second (CGS) system of units. One dyne is equal to \\SI{10}{\\micro\newton}. Equivalently, the dyne is defined as 'the force required to accelerate a mass of one gram at a rate of one centimetre per square second'. The dyne per centimetre is the unit traditionally used to measure surface tension.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dyne`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA422`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dyne?oldid=494703827`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g\\cdot cm/s^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}dyne`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}symbol`),
      literal(`dyn`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}ucumCode`),
      literal(`dyn`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DYN`),
      namedNode(`${rdfs}label`),
      literal(`Dyne`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${dcterms}description`),
      literal(`Algeria`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}currencyCode`),
      literal(`DZD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}currencyNumber`),
      literal(`012`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Algerian_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Algerian_dinar?oldid=492845503`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DZD`),
      namedNode(`${rdfs}label`),
      literal(`Algerian Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${dcterms}description`),
      literal(`The unified atomic mass unit (symbol: \\(\\mu\\)) or dalton (symbol: Da) is a unit that is used for indicating mass on an atomic or molecular scale. It is defined as one twelfth of the rest mass of an unbound atom of carbon-12 in its nuclear and electronic ground state, and has a value of \\(1.660538782(83) \\times 10^{-27} kg\\). One \\(Da\\) is approximately equal to the mass of one proton or one neutron. The CIPM have categorised it as a "non-SI unit whose values in SI units must be obtained experimentally".`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000166053878283`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dalton`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}AMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_mass_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dalton?oldid=495038954`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}symbol`),
      literal(`Da`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}ucumCode`),
      literal(`u`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${rdfs}label`),
      literal(`Dalton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}AMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Da`),
      namedNode(`${skos}altLabel`),
      literal(`atomic-mass-unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${dcterms}description`),
      literal(`Gambia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}currencyCode`),
      literal(`GMD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}currencyNumber`),
      literal(`270`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gambian_dalasi`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}expression`),
      literal(`\\(GMD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gambian_dalasi?oldid=489522429`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dalasi`),
      namedNode(`${rdfs}label`),
      literal(`Dalasi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${dcterms}description`),
      literal(`Denmark, Faroe Islands, Greenland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}currencyCode`),
      literal(`DKK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}currencyNumber`),
      literal(`208`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Danish_krone`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}expression`),
      literal(`\\(DKK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Danish_krone?oldid=491168880`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DanishKrone`),
      namedNode(`${rdfs}label`),
      literal(`Danish Krone`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${dcterms}description`),
      literal(`"Debye" is a C.G.S System unit for  'Electric Dipole Moment' expressed as \\(D\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000000333564`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Debye`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Debye?oldid=492149112`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}debye`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Debye`),
      namedNode(`${rdfs}label`),
      literal(`Debye`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB049`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the area which is mainly common in the agriculture and forestry: 1 da = 10 a`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}symbol`),
      literal(`daa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}ucumCode`),
      literal(`daar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DAA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaARE`),
      namedNode(`${rdfs}label`),
      literal(`Decare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${dcterms}description`),
      literal(`A DecaCoulomb is \\(10 C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deca`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}symbol`),
      literal(`daC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`daC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${rdfs}label`),
      literal(`DecaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB075`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deca`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}symbol`),
      literal(`dag`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dag`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaGM`),
      namedNode(`${rdfs}label`),
      literal(`Decagram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB115`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`10-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}symbol`),
      literal(`daL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}ucumCode`),
      literal(`daL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${rdfs}label`),
      literal(`Decalitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaL`),
      namedNode(`${rdfs}label`),
      literal(`Decalitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB179`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the power of the SI base unit metre by exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deca`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}symbol`),
      literal(`dam³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dam3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DMA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decameter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decametre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB064`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`10-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deca`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}symbol`),
      literal(`dam`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dam`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${rdfs}label`),
      literal(`Decameter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaM`),
      namedNode(`${rdfs}label`),
      literal(`Decametre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB375`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`10-fold of the derived SI unit pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deca`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}symbol`),
      literal(`daPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`daPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DecaPA`),
      namedNode(`${rdfs}label`),
      literal(`Decapascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${dcterms}description`),
      literal(`A customary logarithmic measure most commonly used (in various ways) for measuring sound.Sound is measured on a logarithmic scale. Informally, if one sound is \\(1\\,bel\\) (10 decibels) "louder" than another, this means the louder sound is 10 times louder than the fainter one. A difference of 20 decibels corresponds to an increase of 10 x 10 or 100 times in intensity. The beginning of the scale, 0 decibels, can be set in different ways, depending on exactly the aspect of sound being measured. For sound intensity (the power of the sound waves per unit of area) \\(0\\,decibel\\) is equal to \\(1\\,picoWatts\\,per\\,Metre\\,Squared\\). This corresponds approximately to the faintest sound that can be detected by a person who has good hearing. For sound pressure (the pressure exerted by the sound waves) 0 decibels equals \\(20\\,micropascals\\,RMS\\), and for sound power \\(0\\,decibels\\) sometimes equals \\(1\\,picoWatt\\). In all cases, one decibel equals \\(\\approx\\,0.115129\\,neper\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Decibel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA409`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Decibel?oldid=495380648`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}symbol`),
      literal(`dB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}ucumCode`),
      literal(`dB`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}LogarithmicUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB`),
      namedNode(`${rdfs}label`),
      literal(`Decibel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of pressure expressed in decibars over a period of an average calendar year (365.25 days).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00031688`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`dbar/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`dbar.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Decibars per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to 100,000 Pa. It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000 Pa = 1 bar \\approx 750.0616827 Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}symbol`),
      literal(`dbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`dbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciBAR`),
      namedNode(`${rdfs}label`),
      literal(`Decibar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${dcterms}description`),
      literal(`"Decibel Carrier Unit" is a unit for  'Signal Detection Threshold' expressed as \\(dBc\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${qudt}symbol`),
      literal(`dBc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_C`),
      namedNode(`${rdfs}label`),
      literal(`Decibel Carrier Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${dcterms}description`),
      literal(`"Decibel Referred to 1mw" is a 'Dimensionless Ratio' expressed as \\(dBm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${qudt}symbol`),
      literal(`dBmW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Bm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DBM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciB_M`),
      namedNode(`${rdfs}label`),
      literal(`Decibel Referred to 1mw`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${dcterms}description`),
      literal(`A DeciCoulomb is \\(10^{-1} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}symbol`),
      literal(`dC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${qudt}ucumCode`),
      literal(`dC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${rdfs}label`),
      literal(`DeciCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB076`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.0001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}symbol`),
      literal(`dg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciGM`),
      namedNode(`${rdfs}label`),
      literal(`Decigram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB094`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the unit of the volume litre divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`dL/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dL.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dL/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Decilitre Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Decilitre Per Gram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB113`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}symbol`),
      literal(`dL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}ucumCode`),
      literal(`dL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DLT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${rdfs}label`),
      literal(`Decilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciL`),
      namedNode(`${rdfs}label`),
      literal(`Decilitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA413`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}symbol`),
      literal(`dm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DMK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001157407407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA415`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA416`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA417`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the 0.001-fold of the power of the SI base unit metre with the exponent 3 divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA418`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.min-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/min3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA419`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the power of the SI base unit metre with the exponent 3 divided by the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA420`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the power of the SI base unit metre with the exponent 3 divided by the unit for time second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`dm³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA414`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}symbol`),
      literal(`dm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DMQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${dcterms}description`),
      literal(`A decimeter is a tenth of a meter.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA412`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Deci`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}symbol`),
      literal(`dm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}ucumCode`),
      literal(`dm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${rdfs}label`),
      literal(`Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciM`),
      namedNode(`${rdfs}label`),
      literal(`Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB084`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the product of the derived SI unit joule and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}symbol`),
      literal(`dN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`dN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${rdfs}label`),
      literal(`Decinewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciN-M`),
      namedNode(`${rdfs}label`),
      literal(`Decinewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Decisiemens per metre.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`dS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`dS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`dS/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`decisiemens per meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`decisiemens per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}symbol`),
      literal(`dt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${rdfs}label`),
      literal(`DeciTonne`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTONNE`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB078`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}symbol`),
      literal(`dt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}ucumCode`),
      literal(`dt`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${rdfs}label`),
      literal(`Metric DeciTON`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${dcterms}description`),
      literal(`Former Yugoslav Republic of Macedonia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}currencyCode`),
      literal(`MKD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`807`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Macedonian_denar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}expression`),
      literal(`\\(MKD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Macedonian_denar?oldid=489550202`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denar`),
      namedNode(`${rdfs}label`),
      literal(`Denar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${dcterms}description`),
      literal(`Denier or den is a unit of measure for the linear mass density of fibers. It is defined as the mass in grams per 9,000 meters. In the International System of Units the tex is used instead (see below). The denier is based on a natural standard: a single strand of silk is approximately one denier. A 9,000-meter strand of silk weighs about one gram. The term denier is from the French denier, a coin of small value (worth 1/12 of a sou). Applied to yarn, a denier was held to be equal in weight to 1/24 of an ounce. The term microdenier is used to describe filaments that weigh less than one gram per 9,000 meter length.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000011`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Denier`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB244`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Denier?oldid=463382291`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Units_of_textile_measurement#Denier`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}ucumCode`),
      literal(`[den]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Denier`),
      namedNode(`${rdfs}label`),
      literal(`Denier`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${dcterms}description`),
      literal(`Djibouti`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`DJF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`262`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Djiboutian_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(DJF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Djiboutian_franc?oldid=486807423`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(`${rdfs}label`),
      literal(`Djibouti Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${dcterms}description`),
      literal(`The currency of São Tomé and Príncipe`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}currencyCode`),
      literal(`STN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}currencyNumber`),
      literal(`930`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dobra`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}expression`),
      literal(`\\(STD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dobra?oldid=475725328`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Dobra`),
      namedNode(`${rdfs}label`),
      literal(`Dobra`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${dcterms}description`),
      literal(`Dominican Republic`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`DOP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`214`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dominican_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(DOP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dominican_peso?oldid=493950199`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}DominicanPeso`),
      namedNode(`${rdfs}label`),
      literal(`Dominican Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${dcterms}description`),
      literal(`"Elementary Charge", usually denoted as \\(e\\), is the electric charge carried by a single proton, or equivalently, the negation (opposite) of the electric charge carried by a single electron. This elementary charge is a fundamental physical constant. To avoid confusion over its sign, e is sometimes called the elementary positive charge. This charge has a measured value of approximately \\(1.602176634 \\times 10^{-19} coulombs\\). In the cgs system, \\(e\\) is \\(4.80320471257026372 \\times 10^{-10} statcoulombs\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}symbol`),
      literal(`e`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}ucumCode`),
      literal(`[e]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${qudt}udunitsCode`),
      literal(`e`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E`),
      namedNode(`${rdfs}label`),
      literal(`Elementary Charge`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Erg per Square Centimeter Second" is a C.G.S System unit for  'Power Per Area' expressed as \\(erg/(cm^{2}-s)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(erg/(cm^{2}-s)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB055`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`erg/(cm²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.cm-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/(cm2.s)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Square Centimeter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Square Centimetre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}expression`),
      literal(`\\(erg-per-cm3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB146`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`erg/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB145`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the length-related energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`erg/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Erg Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Erg Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}expression`),
      literal(`\\(erg-per-g\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB061`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}symbol`),
      literal(`erg/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-G`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB147`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the mass-related power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`erg/(g⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.g-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/(g.s)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Erg Per Gram Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB061`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the mass-related energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`erg/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Erg Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Erg per Second" is a C.G.S System unit for  'Power' expressed as \\(erg/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(erg/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA430`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g\\cdot cm^{2}/s^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`erg/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Erg per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`erg⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Erg Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${dcterms}description`),
      literal(`An erg is the unit of energy and mechanical work in the centimetre-gram-second (CGS) system of units, symbol 'erg'. Its name is derived from the Greek ergon, meaning 'work'. An erg is the amount of work done by a force of one dyne exerted for a distance of one centimeter. In the CGS base units, it is equal to one gram centimeter-squared per second-squared (\\(g \\cdot cm^2/s^2\\)). It is thus equal to \\(10^{-7}\\) joules or 100 nanojoules in SI units. \\(1 erg = 10^{-7} J = 100 nJ\\),  \\(1 erg = 624.15 GeV = 6.2415 \\times 10^{11} eV\\), \\(1 erg = 1 dyne\\cdot cm = 1 g \\cdot cm^2/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Erg`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA429`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Erg?oldid=490293432`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g\\cdot cm^{2}/s^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}erg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}symbol`),
      literal(`erg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}ucumCode`),
      literal(`erg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERG`),
      namedNode(`${rdfs}label`),
      literal(`Erg`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${dcterms}description`),
      literal(`The "Erlang" is a dimensionless unit that is used in telephony as a measure of offered load or carried load on service-providing elements such as telephone circuits or telephone switching equipment.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Erlang_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB340`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Erlang_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ERLANG`),
      namedNode(`${rdfs}label`),
      literal(`Erlang`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(ev/\\AA\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit electronvolt divided by the unit angstrom`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}symbol`),
      literal(`eV/Å`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV.Ao-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV/Ao`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(`${rdfs}label`),
      literal(`Electronvolt Per Angstrom`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Electron Volt per Kelvin} is a unit for 'Heat Capacity' expressed as \\(ev/K\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(ev/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`ev/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Electron Volt per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA426`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit electronvolt divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`eV/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Electronvolt Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Electronvolt Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${dcterms}description`),
      literal(`"Electron Volt per Tesla" is a unit for  'Magnetic Dipole Moment' expressed as \\(eV T^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}expression`),
      literal(`\\(eV T^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}symbol`),
      literal(`eV/T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV.T-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV/T`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-PER-T`),
      namedNode(`${rdfs}label`),
      literal(`Electron Volt per Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Electron Volt Second" is a unit for  'Angular Momentum' expressed as \\(eV s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`eV⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Electron Volt Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${dcterms}description`),
      literal(`An electron volt (eV) is the energy that an electron gains when it travels through a potential of one volt. You can imagine that the electron starts at the negative plate of a parallel plate capacitor and accelerates to the positive plate, which is at one volt higher potential. Numerically \\(1 eV\\) approximates \\(1.6x10^{-19} joules\\), where \\(1 joule\\) is \\(6.2x10^{18} eV\\). For example, it would take \\(6.2x10^{20} eV/sec\\) to light a 100 watt light bulb.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electron_volt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electron_volt?oldid=344021738`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/cuu/Constants/bibliography.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}quantityValue`),
      namedNode(`${qudt}ValueForElectronVolt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}symbol`),
      literal(`eV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}ucumCode`),
      literal(`eV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}udunitsCode`),
      literal(`eV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EV`),
      namedNode(`${rdfs}label`),
      literal(`Electron Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${dcterms}description`),
      literal(`<p>The \\(\\textit{Hartree}\\) (symbol: \\(E_h\\) or \\(Ha\\)), also known as the \\(\\text{Hartree\\,Energy}\\), is the atomic unit of energy. The hartree energy is equal to the absolute value of the electric potential energy of the hydrogen atom in its ground state. The energy of the electron in an H-atom in its ground state is \\(-E_H\\), where \\(E_H= 2 R_\\infty \\cdot hc_0\\). The 2006 CODATA recommended value was \\(E_H = 4.35974394(22) \\times 10^{-18} J = 27.21138386(68) eV\\).</p>
<dt class="size-14">Definition:</dt>
<dd>\\(E_H= \\frac{e^2}{4\\pi \\epsilon_0 a_0 }\\)<br/>
where, \\(e\\) is the elementary charge, \\(\\epsilon_0\\) is the electric constant, and \\(a_0\\) is the Bohr radius.'</dd>`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000435974394`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hartree`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hartree?oldid=489318053`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${qudt}symbol`),
      literal(`Ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}E_h`),
      namedNode(`${rdfs}label`),
      literal(`Hartree`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${dcterms}description`),
      literal(`Earth mass (\\(M_{\\oplus}\\)) is the unit of mass equal to that of the Earth. In SI Units, \\(1 M_{\\oplus} = 5.9722 \\times 10^{24} kg\\). Earth mass is often used to describe masses of rocky terrestrial planets. The four terrestrial planets of the Solar System, Mercury, Venus, Earth, and Mars, have masses of 0.055, 0.815, 1.000, and 0.107 Earth masses respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5972190000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Earth_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Earth_mass?oldid=495457885`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}latexDefinition`),
      literal(`One Earth mass can be converted to related units:

81.3 Lunar mass (ML)
0.00315 Jupiter mass (MJ) (Jupiter has 317.83 Earth masses)[1]
0.0105 Saturn mass (Saturn has 95.16 Earth masses)[3]
0.0583 Neptune mass (Neptune has 17.147 Earth masses)[4]
0.000 003 003 Solar mass (\\(M_{\\odot}\\)) (The Sun has 332946 Earth masses)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${qudt}symbol`),
      literal(`M⊕`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EarthMass`),
      namedNode(`${rdfs}label`),
      literal(`Earth mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${dcterms}description`),
      literal(`Anguilla, Antigua and Barbuda, Dominica, Grenada, Montserrat, Saint Kitts and Nevis, Saint Lucia, Saint Vincent and the Grenadines`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`XCD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`951`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/East_Caribbean_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(XCD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/East_Caribbean_dollar?oldid=493020176`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(`${rdfs}label`),
      literal(`East Caribbean Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${dcterms}description`),
      literal(`Egypt`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`EGP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`818`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Egyptian_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(EGP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Egyptian_pound?oldid=494670285`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EgyptianPound`),
      namedNode(`${rdfs}label`),
      literal(`Egyptian Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Elementary Charge}, usually denoted as \\(e\\), is the electric charge carried by a single proton, or equivalently, the negation (opposite) of the electric charge carried by a single electron. This elementary charge is a fundamental physical constant. To avoid confusion over its sign, e is sometimes called the elementary positive charge. This charge has a measured value of approximately \\(1.602176634 \\times 10^{-19} coulombs\\). In the cgs system, \\(e\\) is \\(4.80320471257026372 \\times 10^{-10} statcoulombs\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}symbol`),
      literal(`e`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${qudt}ucumCode`),
      literal(`[e]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ElementaryCharge`),
      namedNode(`${rdfs}label`),
      literal(`Elementary Charge`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${dcterms}description`),
      literal(`Ethiopia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}currencyCode`),
      literal(`ETB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}currencyNumber`),
      literal(`230`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ethiopian_birr`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}expression`),
      literal(`\\(ETB\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ethiopian_birr?oldid=493373507`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EthiopianBirr`),
      namedNode(`${rdfs}label`),
      literal(`Ethiopian Birr`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${dcterms}description`),
      literal(`European Union Euro`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}currencyCode`),
      literal(`EUR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}currencyNumber`),
      literal(`978`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Euro`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}expression`),
      literal(`\\(EUR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Euro?oldid=495293446`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}euro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Euro`),
      namedNode(`${rdfs}label`),
      literal(`Euro`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${dcterms}description`),
      literal(`Bonds market unit`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${qudt}currencyCode`),
      literal(`XBA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${qudt}currencyNumber`),
      literal(`955`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${qudt}expression`),
      literal(`\\(XBA\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(`${rdfs}label`),
      literal(`European Composite Unit (EURCO) (Bonds market unit)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${dcterms}description`),
      literal(`Bonds market unit`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${qudt}currencyCode`),
      literal(`XBB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${qudt}currencyNumber`),
      literal(`956`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${qudt}expression`),
      literal(`\\(XBB\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(`${rdfs}label`),
      literal(`European Monetary Unit (E.M.U.-6) (Bonds market unit)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${dcterms}description`),
      literal(`Bonds market unit`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${qudt}currencyCode`),
      literal(`XBD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${qudt}currencyNumber`),
      literal(`958`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${qudt}expression`),
      literal(`\\(XBD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(`${rdfs}label`),
      literal(`European Unit of Account 17 (E.U.A.-17) (Bonds market unit)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${dcterms}description`),
      literal(`Bonds market unit`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${qudt}currencyCode`),
      literal(`XBC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${qudt}currencyNumber`),
      literal(`957`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${qudt}expression`),
      literal(`\\(XBC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(`${rdfs}label`),
      literal(`European Unit of Account 9 (E.U.A.-9) (Bonds market unit)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The exabyte is a multiple of the unit byte for digital information. The prefix exa means 10^18 in the International System of Units (SI), so ExaByte is 10^18 Bytes.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545177444479562475.3378569716654`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Exabyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Exa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`EB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`EBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaBYTE`),
      namedNode(`${rdfs}label`),
      literal(`ExaByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${dcterms}description`),
      literal(`An ExaCoulomb is \\(10^{18} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Exa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}symbol`),
      literal(`EC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`EC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${rdfs}label`),
      literal(`ExaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB122`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000 000 000 000-fold of the derived SI unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Exa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}symbol`),
      literal(`EJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`EJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExaJ`),
      namedNode(`${rdfs}label`),
      literal(`Exajoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The exbibyte is a multiple of the unit byte for digital information. The prefix exbi means 1024^6`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6393154322601327829.8943153498712`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Exbibyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Exbi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`EiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ExbiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`ExbiByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${dcterms}description`),
      literal(`"Faraday" is a unit for  'Electric Charge' expressed as \\(F\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`96485.3399`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}faraday`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${qudt}symbol`),
      literal(`F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}F`),
      namedNode(`${rdfs}label`),
      literal(`Faraday`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${dcterms}description`),
      literal(`"Fractional area" is a unit for  'Solid Angle' expressed as \\(fa\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`12.5663706`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${qudt}symbol`),
      literal(`fa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FA`),
      namedNode(`${rdfs}label`),
      literal(`Fractional area`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA145`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit farad divided by the 1 000-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`F/km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`F.km-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`F/km`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Farad Per Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Farad Per Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Farad Per Meter (\\(F/m\\)) is a unit in the category of Electric permittivity. It is also known as farad/meter. This unit is commonly used in the SI unit system. Farad Per Meter has a dimension of M-1L-3T4I2 where M is mass, L is length, T is time, and I is electric current. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(F/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA146`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`F/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`F.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`F/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Farad per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Farad per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of electric capacitance. Very early in the study of electricity scientists discovered that a pair of conductors separated by an insulator can store a much larger charge than an isolated conductor can store. The better the insulator, the larger the charge that the conductors can hold. This property of a circuit is called capacitance, and it is measured in farads. One farad is defined as the ability to store one coulomb of charge per volt of potential difference between the two conductors. This is a natural definition, but the unit it defines is very large. In practical circuits, capacitance is often measured in microfarads, nanofarads, or sometimes even in picofarads (10-12 farad, or trillionths of a farad). The unit is named for the British physicist Michael Faraday (1791-1867), who was known for his work in electricity and electrochemistry.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Farad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA144`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Farad?oldid=493070876`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}farad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`C/V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}symbol`),
      literal(`F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`F`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}udunitsCode`),
      literal(`F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD`),
      namedNode(`${rdfs}label`),
      literal(`Farad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`The absolute dielectric constant of free space is defined as the ratio of displacement to the electric field intensity. The unit of measure is the abfarad per centimeter, a derived CGS unit.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(abf-per-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`abf/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`GF.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Abfarad per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Abfarad per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${dcterms}description`),
      literal(`An abfarad is an obsolete electromagnetic (CGS) unit of capacitance equal to \\(10^{9}\\) farads (1,000,000,000 F or 1 GF). The absolute farad of the e.m.u. system, for a steady current identically \\(abC/abV\\), and identically reciprocal abdaraf. 1 abF = 1 GF.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abfarad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abfarad?oldid=407124018`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-13`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abfarad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`GF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abfarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${dcterms}description`),
      literal(`Statfarad (statF) is a unit in the category of Electric capacitance. It is also known as statfarads. This unit is commonly used in the cgs unit system. Statfarad (statF) has a dimension of \\(M^{-1}L^{-2}T^4I^2\\) where M is mass, L is length, T is time, and I is electric current. It can be converted to the corresponding standard SI unit F by multiplying its value by a factor of 1.11265E-012.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001112650056053618432174089964848`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_capacitance--statfarad.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statfarad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FARAD_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statfarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${dcterms}description`),
      literal(`A fathom = 1.8288 meters, is a unit of length in the imperial and the U.S. customary systems, used especially for measuring the depth of water. There are two yards in an imperial or U.S. fathom. Originally based on the distance between the man's outstretched arms, the size of a fathom has varied slightly depending on whether it was defined as a thousandth of an (Admiralty) nautical mile or as a multiple of the imperial yard.  Abbreviations: f, fath, fm, fth, fthm.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.8288`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Fathom`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fathom?oldid=493265429`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}symbol`),
      literal(`fathom`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[fth_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`AK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FATH`),
      namedNode(`${rdfs}label`),
      literal(`Fathom`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${dcterms}description`),
      literal(`The board-foot is a specialized unit of measure for the volume of lumber in the United States and Canada. It is the volume of a one-foot length of a board one foot wide and one inch thick. Board-foot can be abbreviated FBM (for 'foot, board measure'), BDFT, or BF. Thousand board-feet can be abbreviated as MFBM, MBFT or MBF. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00236`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}symbol`),
      literal(`BDFT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}ucumCode`),
      literal(`[bf_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`BFT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FBM`),
      namedNode(`${rdfs}label`),
      literal(`Board Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Candle" is a unit for  'Luminous Flux Per Area' expressed as \\(fc\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.764`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Foot-candle`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Foot-candle?oldid=475579268`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}symbol`),
      literal(`fc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FC`),
      namedNode(`${rdfs}label`),
      literal(`Foot Candle`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{fermi}\\), or \\(\\textit{femtometer}\\) (other spelling \\(femtometre\\), symbol \\(fm\\)) is an SI unit of length equal to \\(10^{-15} metre\\). This distance is often encountered in nuclear physics as a characteristic of this scale. The symbol for the fermi is also \\(fm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}conversionCoefficient`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}FemtoM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fermi_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}fermi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}symbol`),
      literal(`fm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${rdfs}label`),
      literal(`fermi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FM`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}FemtoM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${dcterms}description`),
      literal(`"Franklin" is a unit for  'Electric Charge' expressed as \\(Fr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000003335641`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Franklin`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}C_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB212`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Franklin?oldid=495090654`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}franklin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}symbol`),
      literal(`Fr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${rdfs}label`),
      literal(`Franklin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}C_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Fraction is a unit for 'Dimensionless Ratio' expressed as the value of the ratio itself.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${qudt}symbol`),
      literal(`÷`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRACTION`),
      namedNode(`${rdfs}label`),
      literal(`Fraction`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Frame per Second" is a unit for  'Video Frame Rate' expressed as \\(fps\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`fps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`/s{frame}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1{frame}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Frame per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Lambert" is a C.G.S System unit for  'Luminance' expressed as \\(ft-L\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3.4262591`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-L\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Luminance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].Lmb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LA`),
      namedNode(`${rdfs}label`),
      literal(`Foot Lambert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force per Square Foot Second" is an Imperial unit for  'Power Per Area' expressed as \\(ft \\cdot lbf/(ft^2 \\cdot s)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.5939042`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/ft^2s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(ft \\cdot lbf/(ft^2 \\cdot s)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/ft²s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].[sft_i]-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Square Foot Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound per Square Foot" is an Imperial unit for  'Energy Per Area' expressed as \\(ft-lbf/ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.5939042`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force per Hour" is an Imperial unit for  'Power' expressed as \\(ft-lbf/hr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00376616129`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force per Square Meter" is a unit for  'Energy Per Area' expressed as \\(ft-lbf/m^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/m^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force per Minute" is an Imperial unit for  'Power' expressed as \\(ft-lbf/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0225969678`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force per Second" is an Imperial unit for  'Power' expressed as \\(ft-lbf/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.35581807`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force Second" is a unit for  'Angular Momentum' expressed as \\(lbf / s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Pound Force" is an Imperial unit for  'Energy And Work' expressed as \\(ft-lbf\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.35581807`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Foot-pound_force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft-lbf\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Foot-pound_force?oldid=453269257`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅lbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-LB_F`),
      namedNode(`${rdfs}label`),
      literal(`Foot Pound Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${dcterms}description`),
      literal(`"Foot Poundal" is an Imperial unit for  'Energy And Work' expressed as \\(ft-pdl\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0421401100938048`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB220`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}footPoundal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}symbol`),
      literal(`ft⋅pdl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PDL`),
      namedNode(`${rdfs}label`),
      literal(`Foot Poundal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${dcterms}description`),
      literal(`"Foot per Day" is an Imperial unit for  'Linear Velocity' expressed as \\(ft/d\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000352777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft/d\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`ft/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Foot per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.54864`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA441`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit foot as a linear measure according to the Anglo-American and the Imperial system of units divided by the unit for temperature degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].[lbf_av].[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Foot Per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Foot per Hour" is an Imperial unit for  'Linear Velocity' expressed as \\(ft/hr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00008466666666666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA442`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ft/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Foot per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Foot per Minute" is an Imperial unit for  'Linear Velocity' expressed as \\(ft/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00508`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA448`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`ft/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Foot per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Foot per Square Second}\\) is an Imperial unit for \\(\\textit{Linear Acceleration}\\) expressed as \\(ft/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.3048`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft/s^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA452`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`ft/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A73`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Foot per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{foot per second}\\) (plural \\(\\textit{feet per second}\\)) is a unit of both speed (scalar) and velocity (vector quantity, which includes direction). It expresses the distance in feet (\\(ft\\)) traveled or displaced, divided by the time in seconds (\\(s\\), or \\(sec\\)). The corresponding unit in the International System of Units (SI) is the \\(\\textit{metre per second}\\). Abbreviations include \\(ft/s\\), \\(ft/sec\\) and \\(fps\\), and the rarely used scientific notation \\(ft\\,s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.3048`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Foot_per_second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA449`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Foot_per_second?oldid=491316573`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`ft/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Foot per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Foot Degree Fahrenheit} is an Imperial unit for 'Area Temperature' expressed as \\(ft^{2}-degF\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft²⋅°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Foot Hour Degree Fahrenheit per BTU} is an Imperial unit for 'Thermal Insulance' expressed as \\((degF-hr-ft^{2})/Btu\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}expression`),
      literal(`\\(sqft-hr-degF/btu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}symbol`),
      literal(`sqft⋅hr⋅°F/btu`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].h.[degF].[Btu_IT]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot Hour Degree Fahrenheit per BTU`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Foot Hour Degree Fahrenheit} is an Imperial unit for 'Area Time Temperature' expressed as \\(ft^{2}-hr-degF\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}-hr-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft²⋅hr⋅°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].h.[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot Hour Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00346673589`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft2-per-btu-in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}symbol`),
      literal(`ft²/btu⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].[Btu_IT]-1.[in_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot per BTU Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Foot per Hour} is an Imperial unit for \\(\\textit{Kinematic Viscosity}\\) and  \\(\\textit{Thermal Diffusivity}\\) expressed as \\(ft^{2}/hr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000258064`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB247`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ft²/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Square Foot per Second" is an Imperial unit for  'Kinematic Viscosity' expressed as \\(ft^{2}/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.09290304`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA455`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`ft²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`S3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Foot Second Degree Fahrenheit} is an Imperial unit for 'Area Time Temperature' expressed as \\(ft^{2}\\cdot s\\cdot degF\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}-s-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft²⋅s⋅°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i].s.[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot Second Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${dcterms}description`),
      literal(`The square foot (plural square feet; abbreviated \\(ft^2\\) or \\(sq \\, ft\\)) is an imperial unit and U.S. customary unit of area, used mainly in the United States, Canada, United Kingdom, Hong Kong, Bangladesh, India, Pakistan and Afghanistan. It is defined as the area of a square with sides of 1 foot in length.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.09290304`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA454`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}symbol`),
      literal(`ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FTK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT2`),
      namedNode(`${rdfs}label`),
      literal(`Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000003277413`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA458`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit foot according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.05097033`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA457`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit foot as a linear measure according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit for temperature degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot Per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000007865792`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA459`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit foot according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00508`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB086`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume flow rate according to the Anglio-American and imperial system of units cubic foot per minute related to the transfer area according to the Anglian American and Imperial system of units square foot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/(min⋅ft²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].min-1.[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot Per Minute Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Cubic Foot per Minute" is an Imperial unit for  'Volume Per Unit Time' expressed as \\(ft^3/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0004719474432000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{3}/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA461`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]3.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]3/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Cubic Foot per Second" is an Imperial unit for \\( \\textit{Volume Per Unit Time}\\) expressed as \\(ft^3/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.028316846592000004`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{3}/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA462`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`ft³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]3/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${dcterms}description`),
      literal(`The cubic foot is an Imperial and US customary unit of volume, used in the United States and the United Kingdom. It is defined as the volume of a cube with sides of one foot (0.3048 m) in length. To calculate cubic feet multiply length X width X height. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.028316846592`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}expression`),
      literal(`\\(ft^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA456`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}symbol`),
      literal(`ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FTQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${dcterms}description`),
      literal(`A foot is a unit of length defined as being 0.3048 m exactly and used in the imperial system of units and United States customary units. It is subdivided into 12 inches. The foot is still officially used in Canada and still commonly used in the United Kingdom, although the latter has partially metricated its units of measurement. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.3048`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Foot_%28length%29`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA440`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}symbol`),
      literal(`ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FOT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT`),
      namedNode(`${rdfs}label`),
      literal(`Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${dcterms}description`),
      literal(`"Foot of Water" is a unit for  'Force Per Area' expressed as \\(ftH2O\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2989.067`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA463`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}symbol`),
      literal(`ftH₂0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i'H2O]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ftH2O`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}udunitsCode`),
      literal(`fth2o`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Foot of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`40636.66`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA464`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`not SI conform unit of the pressure, at which 1 ftHg corresponds to the static pressure, which is excited by a mercury column with a height of 1 foot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}symbol`),
      literal(`ftHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_i'Hg]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_HG`),
      namedNode(`${rdfs}label`),
      literal(`Foot Of Mercury`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{US Survey Foot}\\) is a unit for 'Length' expressed as \\(ftUS\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.3048006`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}symbol`),
      literal(`ft{US Survey}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ft_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FT_US`),
      namedNode(`${rdfs}label`),
      literal(`US Survey Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${dcterms}description`),
      literal(`A furlong is a measure of distance in imperial units and U.S. customary units equal to one-eighth of a mile, equivalent to 220 yards, 660 feet, 40 rods, or 10 chains. The exact value of the furlong varies slightly among English-speaking countries. Five furlongs are approximately 1 kilometre (1.0058 km is a closer approximation). Since the original definition of the metre was one-quarter of one ten-millionth of the circumference of the Earth (along the great circle coincident with the meridian of longitude passing through Paris), the circumference of the Earth is about 40,000 km or about 200,000 furlongs. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`201.168`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Furlong`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB204`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Furlong?oldid=492237369`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}symbol`),
      literal(`furlong`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[fur_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdfs}comment`),
      literal(`Check if this is US-Survey or International Customary definition (multiplier)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR`),
      namedNode(`${rdfs}label`),
      literal(`Furlong`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${qudt}expression`),
      literal(`\\(longfur\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${qudt}symbol`),
      literal(`furlong{long}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FUR_Long`),
      namedNode(`${rdfs}label`),
      literal(`Long Furlong`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${dcterms}description`),
      literal(`Falkland Islands`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`FKP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`238`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Falkland_Islands_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(FKP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Falkland_Islands_pound?oldid=489513616`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(`${rdfs}label`),
      literal(`Falkland Islands Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${dcterms}description`),
      literal(`A FemtoCoulomb is \\(10^{-15} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Femto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}symbol`),
      literal(`fC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`fC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${rdfs}label`),
      literal(`FemtoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**18 by mass of the measurand in the matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`fg/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`fg.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Femtograms per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`One 10**18 part of the SI standard unit of mass of the measurand per litre volume of matrix..`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`fg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`fg.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Femtograms per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB124`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,000 000 000 000 001-fold of the derived SI unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Femto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}symbol`),
      literal(`fJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`fJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoJ`),
      namedNode(`${rdfs}label`),
      literal(`Femtojoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000000001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}symbol`),
      literal(`fL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}ucumCode`),
      literal(`fL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${rdfs}label`),
      literal(`Femtolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoL`),
      namedNode(`${rdfs}label`),
      literal(`Femtolitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{femtometre}\\) is an SI unit of length equal to \\(10^{-15} meter\\). This distance can also be called \\(\\textit{fermi}\\) and was so named in honour of Enrico Fermi. It is often encountered in nuclear physics as a characteristic of this scale. The symbol for the fermi is also \\(fm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}FM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB063`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Femto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}symbol`),
      literal(`fm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`fm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${rdfs}label`),
      literal(`Femtometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${rdfs}label`),
      literal(`Femtometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoM`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}FM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`A 10**15 part quantity of substance of the measurand per kilogram mass of matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`fmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`fmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Femtomoles per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`A 10**18 part quantity of substance of the measurand per litre volume of matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`fmol/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`fmol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Femtomoles per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${dcterms}description`),
      literal(`Fiji`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`FJD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`242`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Fijian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(FJD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fijian_dollar?oldid=494373740`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FijiDollar`),
      namedNode(`${rdfs}label`),
      literal(`Fiji Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${qudt}symbol`),
      literal(`flight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Flight`),
      namedNode(`${rdfs}label`),
      literal(`Flight`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${dcterms}description`),
      literal(`Hungary`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}currencyCode`),
      literal(`HUF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}currencyNumber`),
      literal(`348`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hungarian_forint`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}expression`),
      literal(`\\(HUF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hungarian_forint?oldid=492818607`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Forint`),
      namedNode(`${rdfs}label`),
      literal(`Forint`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${dcterms}description`),
      literal(`Democratic Republic of Congo`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}currencyCode`),
      literal(`CDF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}currencyNumber`),
      literal(`976`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Congolese_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}expression`),
      literal(`\\(CDF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Congolese_franc?oldid=490314640`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}FrancCongolais`),
      namedNode(`${rdfs}label`),
      literal(`Franc Congolais`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${dcterms}description`),
      literal(`"Gravity" is a unit for  'Linear Acceleration' expressed as \\(G\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}ucumCode`),
      literal(`[g]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}G`),
      namedNode(`${rdfs}label`),
      literal(`Gravity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{Galileo}\\) is the unit of acceleration of free fall used extensively in the science of gravimetry. The Galileo is defined as \\(1 \\textit{centimeter per square second}\\) (\\(1 cm/s^2\\)). Unfortunately, the Galileo is often denoted with the symbol Gal, not to be confused with the Gallon that also uses the same symbol.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gal?oldid=482010741`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of acceleration called gal with the definition: 1 Gal = 1 cm/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}symbol`),
      literal(`Gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gal`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GALILEO`),
      namedNode(`${rdfs}label`),
      literal(`Galileo`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${dcterms}description`),
      literal(`"Imperial Gallon" is an Imperial unit for  'Liquid Volume' expressed as \\(galIMP\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00454609`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}symbol`),
      literal(`gal{Imp}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GLI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_IMP`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Gallon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000005261678`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA501`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (UK dry or liq.) according to the Imperial system of units divided by the SI unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`gal{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (UK) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001262803`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA502`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (UK dry or Liq.) according to the Imperial system of units divided by the SI unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`gal{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (UK) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00007576817`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA503`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (UK dry or liq.) according to the Imperial system of units divided by the SI unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`gal{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br].m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (UK) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00454609`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA504`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (UK dry or liq.) according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`gal{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (UK) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00454609`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA500`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for fluids according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}symbol`),
      literal(`gal{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GLI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_UK`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${dcterms}description`),
      literal(`"US Gallon per Day" is a unit for  'Volume Per Unit Time' expressed as \\(gal/d\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000438126389`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}expression`),
      literal(`\\(gal/d\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`gal/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us]/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`US Gallon per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001051503`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA507`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (US, liq.) according to the Anglo-American system of units divided by the SI unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`gal{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (US) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"US Gallon per Minute" is a C.G.S System unit for  'Volume Per Unit Time' expressed as \\(gal/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000630902`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(gal/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`gal/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`US Gallon per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.003785412`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA509`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit gallon (US, liq.) according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`gal{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gallon (US Liquid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${dcterms}description`),
      literal(`"US Gallon" is a unit for  'Liquid Volume' expressed as \\(galUS\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.003785412`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}symbol`),
      literal(`gal{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GLL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${rdfs}label`),
      literal(`US Gallon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US`),
      namedNode(`${skos}altLabel`),
      literal(`Queen Anne's wine gallon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${dcterms}description`),
      literal(`"Dry Gallon US" is a unit for  'Dry Volume' expressed as \\(dry_gal\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00440488377`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`gal{US Dry}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gal_wi]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GLD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${rdfs}label`),
      literal(`Dry Gallon US`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${skos}altLabel`),
      literal(`Winchester gallon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(`${skos}altLabel`),
      literal(`corn gallon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0003333333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB377`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for the diameter of thin tubes in the medical technology (e.g. catheter) and telecommunications engineering (e.g. fiberglasses).`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}symbol`),
      literal(`French gauge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Ch]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUGE_FR`),
      namedNode(`${rdfs}label`),
      literal(`French Gauge`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}T_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB135`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit of the magnetic flux density B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}symbol`),
      literal(`Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}ucumCode`),
      literal(`G`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${rdfs}label`),
      literal(`Gauss`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GAUSS`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}T_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${dcterms}description`),
      literal(`The fundamental unit of magnetomotive force (\\(mmf\\)) in electromagnetic units is called a Gilbert. It is the \\(mmf\\) which will produce a magnetic field strength of one Gauss (Maxwell per Square Centimeter) in a path one centimeter long.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.795774715`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gilbert`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB211`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gilbert?oldid=492755037`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gilbert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}symbol`),
      literal(`Gb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI`),
      namedNode(`${rdfs}label`),
      literal(`Gilbert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001644274`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA512`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (UK) for fluids according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`gill{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Gill (UK) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000003946258`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA513`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (UK) for fluids according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`gill{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gill (UK) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000002367755`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA514`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (UK) for fluids according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`gill{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Gill (UK) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001420653`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA515`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (UK) for fluids according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`gill{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gill (UK) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001420653`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA511`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for fluids according to the Imperial system of units (1/32 Imperial Gallon)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}symbol`),
      literal(`gill{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GII`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_UK`),
      namedNode(`${rdfs}label`),
      literal(`Gill (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001369145`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA517`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (US) for fluids according to the Anglo-American system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`gill{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Gill (US) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000003285947`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA518`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (US) for fluids according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`gill{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gill (US) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001971568`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA519`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (US) for fluids according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`gill{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Gill (US) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001182941`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA520`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume gill (US) for fluids according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`gill{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gill (US) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000118294125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA516`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume according the Anglo-American system of units (1/32 US Gallon)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}symbol`),
      literal(`gill{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gil_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GIA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GI_US`),
      namedNode(`${rdfs}label`),
      literal(`Gill (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB381`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the imbalance as product of the 0.001-fold of the SI base unit kilogram and the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`g/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.mm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of 0.001 of the SI unit of mass over 0.00001 of the SI unit of area in a period of an average calendar year (365.25 days)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000316880878140289`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${qudt}symbol`),
      literal(`g/(cm²⋅yr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.cm-2.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2-YR`),
      namedNode(`${rdfs}label`),
      literal(`Grams per square centimetre per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB103`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 0.0001-fold of the power of the SI base unit metre and exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`g/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA469`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 0.000 001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`g/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/cm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA472`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`g/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Gram Degree Celsius} is a C.G.S System unit for 'Mass Temperature' expressed as \\(g \\cdot degC\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(g-degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`g/°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`d.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Gram Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA475`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 0.001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}symbol`),
      literal(`g/dm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.dm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`mass ratio consisting of the 0.001-fold of the SI base unit kilogram divided by the 0.001-fold of the SI base unit kilogram.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`g/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA478`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`g/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA481`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001 fold of the SI base unit kilogram divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`g/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 1000-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`g/km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.km-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA482`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`g/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000011574073`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}expression`),
      literal(`\\(g-m^{-2}-day^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A metric unit of volume over time indicating the amount generated across one square meter over a day.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`g/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams per square meter per day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA486`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`g/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA487`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`g/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`g/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA485`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`g/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA490`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`g/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA496`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,01-fold of the SI base unit kilogram divided by the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`g/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA493`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 0.001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`g/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Millilitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB376`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI base unit kilogram divided by the 0.001-fold the SI base unit meter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`g/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA497`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001fold of the SI base unit kilogram divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`g/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gram Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${dcterms}description`),
      literal(`A unit of mass in the metric system. The name comes from the Greek gramma, a small weight identified in later Roman and Byzantine times with the Latin scripulum or scruple (the English scruple is equal to about 1.3 grams). The gram was originally defined to be the mass of one cubic centimeter of pure water, but to provide precise standards it was necessary to construct physical objects of specified mass. One gram is now defined to be 1/1000 of the mass of the standard kilogram, a platinum-iridium bar carefully guarded by the International Bureau of Weights and Measures in Paris for more than a century. (The kilogram, rather than the gram, is considered the base unit of mass in the SI.) The gram is a small mass, equal to about 15.432 grains or 0.035 273 966 ounce. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gram`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA465`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gram?oldid=493995797`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GRM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM`),
      namedNode(`${rdfs}label`),
      literal(`Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000011574073`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}expression`),
      literal(`\\(g C-m^{-2}-day^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A metric unit of volume over time indicating the amount generated across one square meter over a day. Used to express productivity of an ecosystem.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`g{carbon}/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-2.d-1{C}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams Carbon per square meter per day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams Carbon per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98.0665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA510`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`not SI conform unit of the pressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`gf/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`gf.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Force Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Gram Force Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${dcterms}description`),
      literal(`"Gram Force" is a unit for  'Force' expressed as \\(gf\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00980665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilogram-force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilogram-force?oldid=493375479`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}symbol`),
      literal(`gf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`gf`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`gf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_F`),
      namedNode(`${rdfs}label`),
      literal(`Gram Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000011574073`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}expression`),
      literal(`\\(g N-m^{-2}-day^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A metric unit of volume over time indicating the amount of Nitrogen generated across one square meter over a day. Used to express productivity of an ecosystem.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`g{nitrogen}/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`g.m-2.d-1{N}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams Nitrogen per square meter per day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`grams Nitrogen per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${dcterms}description`),
      literal(`"Gon" is a C.G.S System unit for  'Plane Angle' expressed as \\(gon\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.015707963267949`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gon`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}GRAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA522`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gon?oldid=424098171`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}symbol`),
      literal(`gon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}ucumCode`),
      literal(`gon`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${rdfs}label`),
      literal(`Gon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GON`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}GRAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${dcterms}description`),
      literal(`the tangent of an angle of inclination multiplied by 100`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Grade`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Grade?oldid=485504533`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${qudt}symbol`),
      literal(`gr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GR`),
      namedNode(`${rdfs}label`),
      literal(`Grade`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${dcterms}description`),
      literal(`"Grad" is a unit for  'Plane Angle' expressed as \\(grad\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0157079633`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Grad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}GON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA522`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Grad?oldid=490906645`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}symbol`),
      literal(`grad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${rdfs}label`),
      literal(`Grad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAD`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}GON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${dcterms}description`),
      literal(`"Grain per Gallon" is an Imperial unit for  'Density' expressed as \\(gr/gal\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.017118061`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}expression`),
      literal(`\\(gr/gal\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}symbol`),
      literal(`grain{UK}/gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gr].[gal_br]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(`${rdfs}label`),
      literal(`Grain per Gallon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01711806`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA524`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}symbol`),
      literal(`grain{US}/gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gr].[gal_us]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(`${rdfs}label`),
      literal(`Grain Per Gallon (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${dcterms}description`),
      literal(`A grain is a unit of measurement of mass that is nominally based upon the mass of a single seed of a cereal.  The grain is the only unit of mass measure common to the three traditional English mass and weight systems; the obsolete Tower grain was, by definition, exactly  /64 of a troy grain. Since 1958, the grain or troy grain measure has been defined in terms of units of mass in the International System of Units as precisely 64.79891 milligrams. Thus, \\(1 gram \\approx 15.4323584 grains\\).  There are precisely 7,000 grains per avoirdupois pound in the imperial and U.S. customary units, and 5,760 grains in the Troy pound.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00006479891`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cereal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA523`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cereal?oldid=495222949`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}grain`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}symbol`),
      literal(`gr{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[gr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GRN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAIN`),
      namedNode(`${rdfs}label`),
      literal(`Grain`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Gray per Second" is a unit for  'Absorbed Dose Rate' expressed as \\(Gy/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Gy/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}KermaRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA164`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Gy/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gy.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gray per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of radiation dose. Radiation carries energy, and when it is absorbed by matter the matter receives this energy. The dose is the amount of energy deposited per unit of mass. One gray is defined to be the dose of one joule of energy absorbed per kilogram of matter, or 100 rad. The unit is named for the British physician L. Harold Gray (1905-1965), an authority on the use of radiation in the treatment of cancer.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Grey`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Kerma`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA163`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Grey?oldid=494774160`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gray`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}symbol`),
      literal(`Gy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Gy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GRAY`),
      namedNode(`${rdfs}label`),
      literal(`Gray`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${dcterms}description`),
      literal(`The formula for calculating GT is given by \\({ GT=V\\times (0.2+0.02\\times \\log _{10}(V))}\\)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.imo.org/en/About/Conventions/ListOfConventions/Pages/International-Convention-on-Tonnage-Measurement-of-Ships.aspx`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Gross_tonnage`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\({ GT=V\\times (0.2+0.02\\times \\log _{10}(V))}\\) where V is measured in cubic meters.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Gross tonnage (GT, G.T. or gt) is a nonlinear measure of a ship's overall internal volume. Gross tonnage is different from gross register tonnage. Gross tonnage is used to determine things such as a ship's manning regulations, safety rules, registration fees, and port dues, whereas the older gross register tonnage is a measure of the volume of only certain enclosed spaces.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}symbol`),
      literal(`G.T.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}ucumCode`),
      literal(`t{gross}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${rdfs}label`),
      literal(`Gross Tonnage`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GT`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${unit}RT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${dcterms}description`),
      literal(`"Gamma" is a C.G.S System unit for  'Magnetic Field'.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gamma`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB213`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gamma?oldid=494680973`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gamma`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}symbol`),
      literal(`γ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gamma`),
      namedNode(`${rdfs}label`),
      literal(`Gamma`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The gibibyte is a multiple of the unit byte for digital information storage. The prefix gibi means 1024^3`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5954088943.6391441429912255610071`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gibibyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Gibi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`GiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`GibiByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${dcterms}description`),
      literal(`Gibraltar`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`GIP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`292`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gibraltar_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(GIP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gibraltar_pound?oldid=494842600`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GibraltarPound`),
      namedNode(`${rdfs}label`),
      literal(`Gibraltar pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A gigabit per second (Gbit/s or Gb/s) is a unit of data transfer rate equal to 1,000,000,000 bits per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`693147180.55994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DataRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Data-rate_units#Gigabit_per_second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Gbps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gbit.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B80`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Gigabit per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB047`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the derived SI unit becquerel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}symbol`),
      literal(`GBq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}ucumCode`),
      literal(`GBq`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GBQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBQ`),
      namedNode(`${rdfs}label`),
      literal(`Gigabecquerel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The gigabyte is a multiple of the unit byte for digital information storage. The prefix giga means 10 in the International System of Units (SI), therefore 1 gigabyte is \\(1,000,000,000 \\; bytes\\). The unit symbol for the gigabyte is \\(GB\\) or \\(Gbyte\\), but not \\(Gb\\) (lower case b) which is typically used for the gigabit. Historically, the term has also been used in some fields of computer science and information technology to denote the \\(gibibyte\\), or \\(1073741824 \\; bytes\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545177444.47956`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gigabyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB185`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gigabyte?oldid=493019145`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`GB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`GBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${rdfs}label`),
      literal(`GigaByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBYTE`),
      namedNode(`${skos}altLabel`),
      literal(`gbyte`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.genome.gov/genetics-glossary/Gigabase`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A gigabase (abbreviated Gb, or Gbp for gigabase pairs.) is a unit of measurement used to help designate the length of DNA. One gigabase is equal to 1 billion bases. `),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${qudt}symbol`),
      literal(`Gbp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${rdfs}label`),
      literal(`Gigabase Pair`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaBasePair`),
      namedNode(`${skos}altLabel`),
      literal(`Gigabase`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA149`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`GC/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`GC.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Gigacoulomb Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Gigacoulomb Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}symbol`),
      literal(`GC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`GC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${rdfs}label`),
      literal(`GigaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${dcterms}description`),
      literal(`"Giga Electron Volt" is a unit for  'Energy And Work' expressed as \\(GeV\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}symbol`),
      literal(`GeV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}ucumCode`),
      literal(`GeV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaEV`),
      namedNode(`${rdfs}label`),
      literal(`Giga Electron Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA151`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000 000 000-fold of the SI derived unit hertz and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}symbol`),
      literal(`GHz⋅M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`GHz.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Gigahertz Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Gigahertz Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${dcterms}description`),
      literal(`The hertz (symbol Hz) is the SI unit of frequency defined as the number of cycles per second of a periodic phenomenon. A GigaHertz is \\(10^{9} hz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hertz`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA150`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}symbol`),
      literal(`GHz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`GHz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaHZ`),
      namedNode(`${rdfs}label`),
      literal(`Gigahertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA152`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the SI derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}symbol`),
      literal(`GJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`GJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaJ`),
      namedNode(`${rdfs}label`),
      literal(`Gigajoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA147`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}symbol`),
      literal(`GΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`GOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaOHM`),
      namedNode(`${rdfs}label`),
      literal(`Gigaohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA153`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the SI derived unit pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}symbol`),
      literal(`GPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`GP`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaPA`),
      namedNode(`${rdfs}label`),
      literal(`Gigapascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA155`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the product of the SI derived unit watt and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}symbol`),
      literal(`GW⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`GW.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GWH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW-HR`),
      namedNode(`${rdfs}label`),
      literal(`Gigawatt Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA154`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000-fold of the SI derived unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Giga`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}symbol`),
      literal(`GW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}ucumCode`),
      literal(`GW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GigaW`),
      namedNode(`${rdfs}label`),
      literal(`Gigawatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}currencyCode`),
      literal(`XAU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}currencyNumber`),
      literal(`959`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}expression`),
      literal(`\\(XAU\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_tr]{Au}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(`${rdfs}label`),
      literal(`Gold (one Troy ounce)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${dcterms}description`),
      literal(`Bank for International Settlements`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`XFO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(XFO\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GoldFranc`),
      namedNode(`${rdfs}label`),
      literal(`Gold franc (special settlement currency)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${dcterms}description`),
      literal(`The gauss, abbreviated as \\(G\\), is the cgs unit of measurement of a magnetic field \\(B\\), which is also known as the "magnetic flux density" or the "magnetic induction".  One gauss is defined as one maxwell per square centimeter; it equals \\(10^{-4} tesla\\) (or \\(100 micro T\\)). The Gauss is identical to maxwells per square centimetre; technically defined in a three-dimensional system, it corresponds in the SI, with its extra base unit the ampere. The gauss is quite small by earthly standards, 1 Gs being only about four times Earth's flux density, but it is subdivided, with \\(1 gauss = 105 gamma\\). This unit of magnetic induction is also known as the \\(\\textit{abtesla}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gauss_%28unit%29`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}T_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gauss_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.diracdelta.co.uk/science/source/g/a/gauss/source.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-526?rskey=HAbfz2`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}ucumCode`),
      literal(`G`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${rdfs}label`),
      literal(`Gs`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Gs`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}T_Ab`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${dcterms}description`),
      literal(`Paraguay`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}currencyCode`),
      literal(`PYG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}currencyNumber`),
      literal(`600`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Guaran%C3%AD`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}expression`),
      literal(`\\(PYG\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Guaraní?oldid=412592698`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Guarani`),
      namedNode(`${rdfs}label`),
      literal(`Guarani`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${dcterms}description`),
      literal(`Guinea`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`GNF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`324`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Guinean_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(GNF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Guinean_franc?oldid=489527042`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuineaFranc`),
      namedNode(`${rdfs}label`),
      literal(`Guinea Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${dcterms}description`),
      literal(`Guyana`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`GYD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`328`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Guyanese_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(GYD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Guyanese_dollar?oldid=495070062`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}GuyanaDollar`),
      namedNode(`${rdfs}label`),
      literal(`Guyana Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA167`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit henry divided by the 1 000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}symbol`),
      literal(`H/kΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`H.kOhm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H03`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(`${rdfs}label`),
      literal(`Henry Per Kiloohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`The henry per meter (symbolized \\(H/m\\)) is the unit of magnetic permeability in the International System of Units ( SI ). Reduced to base units in SI, \\(1\\,H/m\\) is the equivalent of one kilogram meter per square second per square ampere.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(H/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA168`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Henry?oldid=491435978`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`H/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`H.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Henry per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Henry per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA166`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit henry divided by the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}symbol`),
      literal(`H/Ω`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`H.Ohm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H04`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H-PER-OHM`),
      namedNode(`${rdfs}label`),
      literal(`Henry Per Ohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of electric inductance. A changing magnetic field induces an electric current in a loop of wire (or in a coil of many loops) located in the field. Although the induced voltage depends only on the rate at which the magnetic flux changes, measured in webers per second, the amount of the current depends also on the physical properties of the coil. A coil with an inductance of one henry requires a flux of one weber for each ampere of induced current. If, on the other hand, it is the current which changes, then the induced field will generate a potential difference within the coil: if the inductance is one henry a current change of one ampere per second generates a potential difference of one volt. The henry is a large unit; inductances in practical circuits are measured in millihenrys (mH) or microhenrys (u03bc H). The unit is named for the American physicist Joseph Henry (1797-1878), one of several scientists who discovered independently how magnetic fields can be used to generate alternating currents. \\(\\text{H} \\; \\equiv \\; \\text{henry}\\; \\equiv\\; \\frac{\\text{Wb}}{\\text{A}}\\; \\equiv\\; \\frac{\\text{weber}}{\\text{amp}}\\; \\equiv\\ \\frac{\\text{V}\\cdot\\text{s}}{\\text{A}}\\; \\equiv\\; \\frac{\\text{volt} \\cdot \\text{second}}{\\text{amp}}\\; \\equiv\\ \\Omega\\cdot\\text{s}\\; \\equiv\\; \\text{ohm.second}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Henry`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA165`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Henry?oldid=491435978`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}henry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Wb/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}symbol`),
      literal(`H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}ucumCode`),
      literal(`H`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H`),
      namedNode(`${rdfs}label`),
      literal(`Henry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${dcterms}description`),
      literal(`The customary metric unit of land area, equal to 100 ares. One hectare is a square hectometer, that is, the area of a square 100 meters on each side: exactly 10 000 square meters or approximately 107 639.1 square feet, 11 959.9 square yards, or 2.471 054 acres.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hectare`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA532`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hectare?oldid=494256954`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}symbol`),
      literal(`ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`har`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HA`),
      namedNode(`${rdfs}label`),
      literal(`Hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The "Hartley per Second" is a unit of information rate.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Hart/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB347`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ban_(information)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Hart/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Hartley per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${dcterms}description`),
      literal(`The "Hartley" is a unit of information.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2.3025850929940456840179914546844`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB344`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ban_(information)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}hartley`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}symbol`),
      literal(`Hart`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HART`),
      namedNode(`${rdfs}label`),
      literal(`Hartley`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${dcterms}description`),
      literal(`550 foot-pound force per second`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`745.6999`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Horsepower`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Horsepower?oldid=495510329`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}symbol`),
      literal(`HP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}ucumCode`),
      literal(`[HP]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`hp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP`),
      namedNode(`${rdfs}label`),
      literal(`Horsepower`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${dcterms}description`),
      literal(`"Boiler Horsepower" is a unit for  'Power' expressed as \\(hp_boiler\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9809.5`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}expression`),
      literal(`\\(boiler_hp\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}symbol`),
      literal(`HP{boiler}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Boiler`),
      namedNode(`${rdfs}label`),
      literal(`Boiler Horsepower`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9809.5`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA536`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the power according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}symbol`),
      literal(`HP{brake}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Brake`),
      namedNode(`${rdfs}label`),
      literal(`Horsepower (brake)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`746.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA537`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the power according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}symbol`),
      literal(`HP{electric}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Electric`),
      namedNode(`${rdfs}label`),
      literal(`Horsepower (electric)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`735.4988`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA534`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mechanical power according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}symbol`),
      literal(`HP{metric}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HP_Metric`),
      namedNode(`${rdfs}label`),
      literal(`Horsepower (metric)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Hour Square Foot" is an Imperial unit for  'Area Time' expressed as \\(hr-ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`334.450944`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(hr-ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`hr⋅ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`h.[ft_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`h.[sft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Hour Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${dcterms}description`),
      literal(`The hour (common symbol: h or hr) is a unit of measurement of time. In modern usage, an hour comprises 60 minutes, or 3,600 seconds. It is approximately 1/24 of a mean solar day. An hour in the Universal Coordinated Time (UTC) time standard can include a negative or positive leap second, and may therefore have a duration of 3,599 or 3,601 seconds for adjustment purposes. Although it is not a standard defined by the International System of Units, the hour is a unit accepted for use with SI, represented by the symbol h.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA525`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hour?oldid=495040268`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}symbol`),
      literal(`hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}udunitsCode`),
      literal(`h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HUR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR`),
      namedNode(`${rdfs}label`),
      literal(`Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${dcterms}description`),
      literal(`Sidereal time is a time-keeping system astronomers use to keep track of the direction to point their telescopes to view a given star in the night sky. A mean sidereal day is about 23 h 56 m 4.1 s in length. However, due to variations in the rotation rate of the Earth, the rate of an ideal sidereal clock deviates from any simple multiple of a civil clock. In practice, the difference is kept track of by the difference UTC-UT1, which is measured by radio telescopes and kept on file and available to the public at the IERS and at the United States Naval Observatory. A Sidereal Hour is \\(1/24^{th}\\) of a Sidereal Day. A mean sidereal day is 23 hours, 56 minutes, 4.0916 seconds (23.9344699 hours or 0.99726958 mean solar days), the time it takes Earth to make one rotation relative to the vernal equinox. (Due to nutation, an actual sidereal day is not quite so constant.) The vernal equinox itself precesses slowly westward relative to the fixed stars, completing one revolution in about 26,000 years, so the misnamed sidereal day ("sidereal" is derived from the Latin sidus meaning "star") is 0.0084 seconds shorter than Earth's period of rotation relative to the fixed stars.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3590.17`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sidereal_time`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}symbol`),
      literal(`hr{sidereal}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${qudt}ucumCode`),
      literal(`h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HR_Sidereal`),
      namedNode(`${rdfs}label`),
      literal(`Sidereal Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA171`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit hertz and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}symbol`),
      literal(`Hz⋅M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Hz.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Hertz Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Hertz Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Hertz per Kelvin} is a unit for 'Inverse Time Temperature' expressed as \\(Hz K^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(Hz K^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`Hz/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`Hz.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Hertz per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${dcterms}description`),
      literal(`"Hertz per Tesla" is a unit for  'Electric Charge Per Mass' expressed as \\(Hz T^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}expression`),
      literal(`\\(Hz T^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}symbol`),
      literal(`Hz/T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`Hz.T-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-T`),
      namedNode(`${rdfs}label`),
      literal(`Hertz per Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${dcterms}description`),
      literal(`In the Hertz per Volt standard the frequency of the note is directly related to the voltage. A pitch of a note goes up one octave when its frequency doubles, meaning that the voltage will have to double for every octave rise. Depending on the footage (octave) selected, nominally one volt gives 1000Hz, two volts 2000Hz and so on. In terms of notes, bottom C would be 0.25 volts, the next C up would be 0.5 volts, then 1V, 2V, 4V, 8V for the following octaves. This system was used mainly by Yamaha and Korg.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}expression`),
      literal(`\\(Hz V^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}symbol`),
      literal(`Hz/V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${qudt}ucumCode`),
      literal(`Hz.V-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ-PER-V`),
      namedNode(`${rdfs}label`),
      literal(`Hertz per Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${dcterms}description`),
      literal(`The hertz (symbol Hz) is the SI unit of frequency defined as the number of cycles per second of a periodic phenomenon. One of its most common uses is the description of the sine wave, particularly those used in radio and audio applications, such as the frequency of musical tones. The word "hertz" is named for Heinrich Rudolf Hertz, who was the first to conclusively prove the existence of electromagnetic waves.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hertz`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA170`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}hertz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}symbol`),
      literal(`Hz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`Hz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Hz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HTZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${rdfs}label`),
      literal(`Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HZ`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${dcterms}description`),
      literal(`Abhenry is the centimeter-gram-second electromagnetic unit of inductance, equal to one billionth of a henry.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abhenry`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abhenry?oldid=477198643`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abhenry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`nH`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abhenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`The Stathenry per Centimeter is a unit of measure for the absolute permeability of free space.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`89876000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(stath-per-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`statH/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Stathenry per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Stathenry per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${dcterms}description`),
      literal(`"Stathenry" (statH) is a unit in the category of Electric inductance. It is also known as stathenries. This unit is commonly used in the cgs unit system. Stathenry (statH) has a dimension of \\(ML^2T^{-2}I^{-2}\\) where M is mass, L is length, T is time, and I is electric current. It can be converted to the corresponding standard SI unit H by multiplying its value by a factor of \\(8.987552 \\times 10^{11}\\) .`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`898760000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_inductance--stathenry.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}stathenry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}H_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Stathenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${dcterms}description`),
      literal(`Haiti`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}currencyCode`),
      literal(`HTG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}currencyNumber`),
      literal(`332`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Haitian_gourde`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}expression`),
      literal(`\\(HTG\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Haitian_gourde?oldid=486090975`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HaitiGourde`),
      namedNode(`${rdfs}label`),
      literal(`Haiti Gourde`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HeartBeat`),
      namedNode(`${rdfs}label`),
      literal(`Heart Beat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB087`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}symbol`),
      literal(`hbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`hbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HBA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoBAR`),
      namedNode(`${rdfs}label`),
      literal(`Hectobar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${dcterms}description`),
      literal(`"HectoCoulomb" is a unit for  'Electric Charge' expressed as \\(hC\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Hecto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}symbol`),
      literal(`hC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`hC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${rdfs}label`),
      literal(`HectoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB079`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.1-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Hecto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}symbol`),
      literal(`hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`hg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HGM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoGM`),
      namedNode(`${rdfs}label`),
      literal(`Hectogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA533`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}symbol`),
      literal(`hL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}ucumCode`),
      literal(`hL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HLT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${rdfs}label`),
      literal(`Hectolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoL`),
      namedNode(`${rdfs}label`),
      literal(`Hectolitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB062`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Hecto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}symbol`),
      literal(`hm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`hm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${rdfs}label`),
      literal(`Hectometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoM`),
      namedNode(`${rdfs}label`),
      literal(`Hectometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA530`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 100-fold of the SI derived unit pascal and the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`hPa⋅L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa.L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA531`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 100-fold of the SI unit pascal and the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`hPa⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa.m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA529`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the SI derived unit pascal divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`hPa/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`A change in pressure of one hundred Newtons per square metre (100 Pascals) per hour. Equivalent to a change of one millibar per hour.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`hPa/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascals per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA528`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`100-fold of the SI derived unit pascal divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`hPa/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F82`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${dcterms}description`),
      literal(`Hectopascal is a unit of pressure. 1 Pa is approximately the pressure exerted by a 10-g mass resting on a 1-cm2 area. 1013 hPa = 1 atm. There are 100 pascals in 1 hectopascal.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MilliBAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA527`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}symbol`),
      literal(`hPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`hPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdfs}comment`),
      literal(`Hectopascal is commonly used in meteorology to report values for atmospheric pressure. It is equivalent to millibar.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${rdfs}label`),
      literal(`Hectopascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HectoPA`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MilliBAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${dcterms}description`),
      literal(`Hong Kong Special Administrative Region`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`HKD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`344`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Hong_Kong_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(HKD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hong_Kong_dollar?oldid=495133277`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}HongKongDollar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}HongKongDollar`),
      namedNode(`${rdfs}label`),
      literal(`Hong Kong Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${dcterms}description`),
      literal(`Ukraine`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}currencyCode`),
      literal(`UAH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}currencyNumber`),
      literal(`980`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ukrainian_hryvnia`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}expression`),
      literal(`\\(UAH\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ukrainian_hryvnia?oldid=493064633`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hryvnia`),
      namedNode(`${rdfs}label`),
      literal(`Hryvnia`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`50.80235`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA405`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`out of use unit of the mass according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}symbol`),
      literal(`cwt{long}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lcwt_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CWI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${rdfs}label`),
      literal(`Hundredweight (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`45.35924`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA406`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`out of use unit of the mass according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}symbol`),
      literal(`cwt{short}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[scwt_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`CWA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${rdfs}label`),
      literal(`Hundredweight (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Hundredweight_US`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.04572`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA540`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit inch according to the Anglo-American and the Imperial system of units divided by the unit for temperature degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`in/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i].[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Inch Per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Inch per Square second}\\) is an Imperial unit for \\(\\textit{Linear Acceleration}\\) expressed as \\(in/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(in/s2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB044`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`in/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i].s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`IV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Inch per Square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The inch per second is a unit of speed or velocity. It expresses the distance in inches (in) traveled or displaced, divided by time in seconds (s, or sec). The equivalent SI unit is the metre per second. Abbreviations include in/s, in/sec, ips, and less frequently in s.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(in-per-sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA542`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`in/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`IU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Inch per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00064516`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA548`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 2 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`in²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sin_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G08`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Inch Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${dcterms}description`),
      literal(`A square inch is a unit of area, equal to the area of a square with sides of one inch. The following symbols are used to denote square inches: square in, sq inches, sq inch, sq in inches/-2, inch/-2, in/-2, inches^2, \\(inch^2\\), \\(in^2\\), \\(inches^2\\), \\(inch^2\\), \\(in^2\\) or in some cases \\("^2\\). The square inch is a common unit of measurement in the United States and the United Kingdom.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00064516`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}expression`),
      literal(`\\(in^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA547`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}symbol`),
      literal(`in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[sin_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`INK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN2`),
      namedNode(`${rdfs}label`),
      literal(`Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000004551961`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA550`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`in³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Inch Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Cubic Inch per Minute" is an Imperial unit for  'Volume Per Unit Time' expressed as \\(in^{3}/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000027311773333333333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(in^{3}/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA551`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`in³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]3.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]3/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Inch per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001638706`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA552`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`in³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Inch Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${dcterms}description`),
      literal(`The cubic inch is a unit of measurement for volume in the Imperial units and United States customary units systems. It is the volume of a cube with each of its three sides being one inch long. The cubic inch and the cubic foot are still used as units of volume in the United States, although the common SI units of volume, the liter, milliliter, and cubic meter, are continually replacing them, especially in manufacturing and high technology. One cubic foot is equal to exactly 1728 cubic inches.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000016387064`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}expression`),
      literal(`\\(in^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA549`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}symbol`),
      literal(`in³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`INQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000004162314`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA545`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 4`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}symbol`),
      literal(`in⁴`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN4`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${dcterms}description`),
      literal(`An inch is the name of a unit of length in a number of different systems, including Imperial units, and United States customary units. There are 36 inches in a yard and 12 inches in a foot. Corresponding units of area and volume are the square inch and the cubic inch.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Inch`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA539`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Inch?oldid=492522790`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}symbol`),
      literal(`in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}udunitsCode`),
      literal(`in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`INH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN`),
      namedNode(`${rdfs}label`),
      literal(`Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${dcterms}description`),
      literal(`Inches of water, wc, inch water column (inch WC), inAq, Aq, or inH2O is a non-SI unit for pressure. The units are by convention and due to the historical measurement of certain pressure differentials. It is used for measuring small pressure differences across an orifice, or in a pipeline or shaft. Inches of water can be converted to a pressure unit using the formula for pressure head. It is defined as the pressure exerted by a column of water of 1 inch in height at defined conditions for example \\(39 ^\\circ F\\) at the standard acceleration of gravity; 1 inAq is approximately equal to 249 pascals at \\(0 ^\\circ C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`249.080024`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Inch_of_water`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA553`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Inch_of_water?oldid=466175519`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}symbol`),
      literal(`inH₂0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i'H2O]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Inch of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${dcterms}description`),
      literal(`Inches of mercury, (inHg) is a unit of measurement for pressure. It is still widely used for barometric pressure in weather reports, refrigeration and aviation in the United States, but is seldom used elsewhere. It is defined as the pressure exerted by a column of mercury of 1 inch in height at \\(32 ^\\circ F\\) at the standard acceleration of gravity. 1 inHg = 3,386.389 pascals at \\(0 ^\\circ C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3386.389`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Inch_of_mercury`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA554`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Inch_of_mercury?oldid=486634645`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}symbol`),
      literal(`inHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}ucumCode`),
      literal(`[in_i'Hg]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`inHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`in_Hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IN_HG`),
      namedNode(`${rdfs}label`),
      literal(`Inch of Mercury`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`"International Unit per Liter" is a unit for  'Serum Or Plasma Level' expressed as \\(IU/L\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}expression`),
      literal(`\\(IU/L\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`IU/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`[IU].L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`[IU]/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`[iU].L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`[iU]/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`International Unit per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`International Unit per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`International Units per milligramme.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${qudt}symbol`),
      literal(`IU/mg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(`${rdfs}label`),
      literal(`International Unit per milligram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${dcterms}description`),
      literal(`<p><strong>International Unit</strong> is a unit for \\textit{'Amount Of Substance'} expressed as \\(IU\\)</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/International_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB603`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/International_unit?oldid=488801913`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}InternationalUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}symbol`),
      literal(`IU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}ucumCode`),
      literal(`[IU]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${qudt}ucumCode`),
      literal(`[iU]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IU`),
      namedNode(`${rdfs}label`),
      literal(`International Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${dcterms}description`),
      literal(`Iceland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}currencyCode`),
      literal(`ISK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}currencyNumber`),
      literal(`352`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Icelandic_kr%C3%B3na`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}expression`),
      literal(`\\(ISK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Icelandic_króna?oldid=495457496`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IcelandKrona`),
      namedNode(`${rdfs}label`),
      literal(`Iceland Krona`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${dcterms}description`),
      literal(`Bhutan, India`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`INR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`356`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Indian_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(INR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Indian_rupee?oldid=495120167`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}IndianRupee`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IndianRupee`),
      namedNode(`${rdfs}label`),
      literal(`Indian Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${dcterms}description`),
      literal(`Iran`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}currencyCode`),
      literal(`IRR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}currencyNumber`),
      literal(`364`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Iranian_rial`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}expression`),
      literal(`\\(IRR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Iranian_rial?oldid=495299431`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IranianRial`),
      namedNode(`${rdfs}label`),
      literal(`Iranian Rial`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${dcterms}description`),
      literal(`Iraq`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`IQD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`368`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Iraqi_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(IQD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Iraqi_dinar?oldid=494793908`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}IraqiDinar`),
      namedNode(`${rdfs}label`),
      literal(`Iraqi Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Joule Meter per Mole} is a unit for 'Length Molar Energy' expressed as \\(J \\cdot m \\cdot mol^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(J m mol^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`J⋅m/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Joule Meter per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Joule Metre per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-m2/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB487`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`j⋅m²/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m2.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Joule Square Meter per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Joule Square Metre per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA181`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}symbol`),
      literal(`J⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D73`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdfs}label`),
      literal(`Joule Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-M2`),
      namedNode(`${rdfs}label`),
      literal(`Joule Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${dcterms}description`),
      literal(`Radiant energy per 10^-4 SI unit area over a period of one day.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Radiosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`J/(cm²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.cm-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Joules per square centimetre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB188`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit joule divided by the 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`J/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA174`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit joule divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`J/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit joule divided by the 3600 times the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`J/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`Joule Per Kelvin (J/K) is a unit in the category of Entropy. It is also known as joules per kelvin, joule/kelvin. This unit is commonly used in the SI unit system. Joule Per Kelvin (J/K) has a dimension of \\(ML^{2}T^{-2}Q^{-1}\\( where \\(M\\) is mass, L is length, T is time, and Q is temperature. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Entropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA173`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`J/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`JE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-per-kg-k-m3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}symbol`),
      literal(`J/(kg⋅K⋅m³)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.kg-1.K.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kilogram Kelvin Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kilogram Kelvin Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-per-kg-k-pa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}symbol`),
      literal(`J/(kg⋅K⋅Pa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.kg-1.K-1.Pa-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kilogram Kelvin per Pascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${dcterms}description`),
      literal(`Specific heat capacity - The heat required to raise unit mass of a substance by unit temperature interval under specified conditions, such as constant pressure: usually measured in joules per kelvin per kilogram. Symbol \\(c_p\\) (for constant pressure) Also called specific heat.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(J-per-kgK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA176`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(J/(kg \\cdot K)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}symbol`),
      literal(`J/(kg⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.kg-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kilogram Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(`${rdfs}label`),
      literal(`Joules per kilogram per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Joule Per Kilogram} (\\(J/kg\\)) is a unit in the category of Thermal heat capacity. It is also known as \\textit{joule/kilogram}, \\textit{joules per kilogram}. This unit is commonly used in the SI unit system. The unit has a dimension of \\(L2T^{-2}\\) where \\(L\\) is length, and \\(T\\) is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA175`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`J/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`Joule Per Square Meter (\\(J/m^2\\)) is a unit in the category of Energy density. It is also known as joules per square meter, joule per square metre, joule/square meter, joule/square metre. This unit is commonly used in the SI unit system.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA179`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`J/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`J/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Joule per Cubic Meter Kelvin} is a unit for 'Volumetric Heat Capacity' expressed as \\(J/(m^{3} K)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/(m^{3} K)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}symbol`),
      literal(`J/(m³⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m-3.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Cubic Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Cubic Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Joule Per Cubic Meter}\\) (\\(J/m^{3}\\)) is a unit in the category of Energy density. It is also known as joules per cubic meter, joule per cubic metre, joules per cubic metre, joule/cubic meter, joule/cubic metre. This unit is commonly used in the SI unit system.  It has a dimension of \\(ML^{-1}T^{-2}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-per-m3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA180`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`J/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`J/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B8`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Joule Per Quartic Meter} (\\(J/m^4\\)) is a unit for the spectral concentration of radiant energy density (in terms of wavelength), or the spectral radiant energy density (in terms of wave length). This unit is commonly used in the SI unit system.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/m^4\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA177`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}symbol`),
      literal(`J/m⁴`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m-4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Quartic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M4`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Quartic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(j/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA178`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`J/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`J/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${dcterms}description`),
      literal(`Energy needed to heat one mole of substance by 1 Kelvin, under standard conditions (not standard temperature and pressure STP). The standard molar entropy is usually given the symbol S, and has units of joules per mole kelvin ( \\( J\\cdot mol^{-1} K^{-1}\\)). Unlike standard enthalpies of formation, the value of S is an absolute. That is, an element in its standard state has a nonzero value of S at room temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/(mol-K)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA184`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}symbol`),
      literal(`J/(mol⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.mol-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Mole Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`The joule per mole (symbol: \\(J\\cdot mol^{-1}\\)) is an SI derived unit of energy per amount of material. Energy is measured in joules, and the amount of material is measured in moles. Physical quantities measured in \\(J\\cdot mol^{-1}\\)) usually describe quantities of energy transferred during phase transformations or chemical reactions. Division by the number of moles facilitates comparison between processes involving different quantities of material and between similar processes involving different types of materials. The meaning of such a quantity is always context-dependent and, particularly for chemical reactions, is dependent on the (possibly arbitrary) definition of a 'mole' for a particular process.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(J/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA183`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`J/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit joule divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`J/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Joule Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${dcterms}description`),
      literal(`A measure of the diamagnetic energy, for a Bohr-radius spread around a magnetic axis, per square Tesla.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}expression`),
      literal(`\\(J T^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L2I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.eng.fsu.edu/~dommelen/quantum/style_a/elecmagfld.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}symbol`),
      literal(`J/T²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.T-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T2`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Square Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${dcterms}description`),
      literal(`The magnetic moment of a magnet is a quantity that determines the force that the magnet can exert on electric currents and the torque that a magnetic field will exert on it. A loop of electric current, a bar magnet, an electron, a molecule, and a planet all have magnetic moments. The unit for magnetic moment is not a base unit in the International System of Units (SI) and it can be represented in more than one way. For example, in the current loop definition, the area is measured in square meters and I is measured in amperes, so the magnetic moment is measured in ampere-square meters (A m2). In the equation for torque on a moment, the torque is measured in joules and the magnetic field in tesla, so the moment is measured in Joules per Tesla (J u00b7T-1). These two representations are equivalent: 1 A u00b7m2 = 1 J u00b7T-1. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-per-t\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB336`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}symbol`),
      literal(`J/T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.T-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-PER-T`),
      namedNode(`${rdfs}label`),
      literal(`Joule per Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Joule Second per Mole} is a unit for 'Molar Angular Momentum' expressed as \\(J s mol^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(J s mol^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`J⋅s/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.s.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Joule Second per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(The joule-second is a unit equal to a joule multiplied by a second, used to measure action or angular momentum. The joule-second is the unit used for Planck's constant.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Action`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB151`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`J⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`J.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Joule Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of work or energy, defined to be the work done by a force of one newton acting to move an object through a distance of one meter in the direction in which the force is applied. Equivalently, since kinetic energy is one half the mass times the square of the velocity, one joule is the kinetic energy of a mass of two kilograms moving at a velocity of \\(1 m/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Joule`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}N-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA172`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Joule?oldid=494340406`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\text{J}\\ \\equiv\\ \\text{joule}\\ \\equiv\\ \\text{CV}\\ \\equiv\\ \\text{coulomb.volt}\\ \\equiv\\ \\frac{\\text{eV}}{1.602\\ 10^{-19}}\\ \\equiv\\ \\frac{\\text{electron.volt}}{1.602\\ 10^{-19}}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The SI unit of work or energy, defined to be the work done by a force of one newton acting to move an object through a distance of one meter in the direction in which the force is applied. Equivalently, since kinetic energy is one half the mass times the square of the velocity, one joule is the kinetic energy of a mass of two kilograms moving at a velocity of 1 m/s. This is the same as 107 ergs in the CGS system, or approximately 0.737 562 foot-pound in the traditional English system. In other energy units, one joule equals about 9.478 170 x 10-4 Btu, 0.238 846 (small) calories, or 2.777 778 x 10-4 watt hour. The joule is named for the British physicist James Prescott Joule (1818-1889), who demonstrated the equivalence of mechanical and thermal energy in a famous experiment in 1843. `),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}ucumCode`),
      literal(`J`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}udunitsCode`),
      literal(`J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`JOU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${rdfs}label`),
      literal(`Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}J`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}N-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${dcterms}description`),
      literal(`Jamaica`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`JMD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`388`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Jamaican_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(JMD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Jamaican_dollar?oldid=494039981`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JamaicanDollar`),
      namedNode(`${rdfs}label`),
      literal(`Jamaican Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${dcterms}description`),
      literal(`Japan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}currencyCode`),
      literal(`JPY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}currencyNumber`),
      literal(`392`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Japanese_yen`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}expression`),
      literal(`\\(JPY\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Japanese_yen?oldid=493771966`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}JapaneseYen`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JapaneseYen`),
      namedNode(`${rdfs}label`),
      literal(`Japanese yen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${dcterms}description`),
      literal(`Jordan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`JOD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`400`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Jordanian_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(JOD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Jordanian_dinar?oldid=495270728`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}JordanianDinar`),
      namedNode(`${rdfs}label`),
      literal(`Jordanian Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`86400.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅m/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin metres per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB488`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI base unit kelvin and the SI base unit metre divided by the derived SI unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅m/W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.m.W-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin Meter Per Watt`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin Metre Per Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅m²/(kg⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.m2.kg-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M2-PER-KiloGM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin square metres per kilogram per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-M`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin metres`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅Pa/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.Pa.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PA-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin Pascals per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kelvin per Hour} is a unit for 'Temperature Per Time' expressed as \\(K / h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(K / h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA189`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`K/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA186`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kelvin divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`K/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F02`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`A change of temperature on the Kelvin temperature scale in one SI unit of length.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`K/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Degrees Kelvin per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kelvins per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kelvin per Minute} is a unit for 'Temperature Per Time' expressed as \\(K / m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(K / min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA191`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`K/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kelvin per Second} is a unit for 'Temperature Per Time' expressed as \\(K / s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(K / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA192`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`K/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kelvin per Tesla} is a unit for 'Temperature Per Magnetic Flux Density' expressed as \\(K T^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}expression`),
      literal(`\\(K T^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H1T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}symbol`),
      literal(`K/T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.T-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-T`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin per Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${dcterms}description`),
      literal(`Thermal resistance is a heat property and a measure of a temperature difference by which an object or material resists a heat flow (heat per time unit or thermal resistance). Thermal resistance is the reciprocal thermal conductance. Absolute thermal resistance is the temperature difference across a structure when a unit of heat energy flows through it in unit time. It is the reciprocal of thermal conductance. The SI units of thermal resistance are kelvins per watt or the equivalent degrees Celsius per watt (the two are the same since as intervals).</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}expression`),
      literal(`\\(K/W\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA187`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}symbol`),
      literal(`K/W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.W-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`K/W`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin per Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`K.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H2T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${qudt}symbol`),
      literal(`K²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${qudt}ucumCode`),
      literal(`K2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K2`),
      namedNode(`${rdfs}label`),
      literal(`Square Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${dcterms}description`),
      literal(`\\(The SI base unit of temperature, previously called the degree Kelvin. One kelvin represents the same temperature difference as one degree Celsius. In 1967 the General Conference on Weights and Measures defined the temperature of the triple point of water (the temperature at which water exists simultaneously in the gaseous, liquid, and solid states) to be exactly 273.16 kelvins. Since this temperature is also equal to 0.01 u00b0C, the temperature in kelvins is always equal to 273.15 plus the temperature in degrees Celsius. The kelvin equals exactly 1.8 degrees Fahrenheit. The unit is named for the British mathematician and physicist William Thomson (1824-1907), later known as Lord Kelvin after he was named Baron Kelvin of Largs.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kelvin`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA185`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD721`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kelvin?oldid=495075694`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}ucumCode`),
      literal(`K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}udunitsCode`),
      literal(`K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KEL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}K`),
      namedNode(`${rdfs}label`),
      literal(`Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${dcterms}description`),
      literal(`A unit of catalytic activity used especially in the chemistry of enzymes. A catalyst is a substance that starts or speeds a chemical reaction. Enzymes are proteins that act as catalysts within the bodies of living plants and animals. A catalyst has an activity of one katal if it enables a reaction to proceed at the rate of one mole per second. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Katal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB196`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Katal?oldid=486431865`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}katal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}symbol`),
      literal(`kat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}ucumCode`),
      literal(`kat`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}udunitsCode`),
      literal(`kat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KAT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KAT`),
      namedNode(`${rdfs}label`),
      literal(`Katal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${dcterms}description`),
      literal(`"Kip per Square Inch" is a unit for  'Force Per Area' expressed as \\(kip/in^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894757.89`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kip/in^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB242`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`kip/in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[lbf_av].[in_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ksi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Kip per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${dcterms}description`),
      literal(`1000 pound-force`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4448.222`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kip`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kip?oldid=492552722`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}kip`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}symbol`),
      literal(`kip`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[lbf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KIP_F`),
      namedNode(`${rdfs}label`),
      literal(`Kip`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Knot per Second}\\) is a unit for 'Linear Acceleration' expressed as \\(kt/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5144444444444445`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kt/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kn/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[kn_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[kn_i]/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Knot per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${dcterms}description`),
      literal(`The knot (pronounced 'not') is a unit of speed equal to one nautical mile (1.852 km) per hour, approximately 1.151 mph. The abbreviation \\(kn\\) is preferred by the International Hydrographic Organization (IHO), which includes every major sea-faring nation; however, the abbreviations kt (singular) and kts (plural) are also widely used. However, use of the abbreviation kt for knot conflicts with the SI symbol for kilotonne. The knot is a non-SI unit accepted for use with the International System of Units (SI). Worldwide, the knot is used in meteorology, and in maritime and air navigation - for example, a vessel travelling at 1 knot along a meridian travels one minute of geographic latitude in one hour. Etymologically, the term knot derives from counting the number of knots in the line that unspooled from the reel of a chip log in a specific time.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5144444444444445`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Knot`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB110`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Knot?oldid=495066194`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}symbol`),
      literal(`kn`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[kn_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}udunitsCode`),
      literal(`kt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KNT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${rdfs}label`),
      literal(`Knot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${skos}altLabel`),
      literal(`kt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KN`),
      namedNode(`${skos}altLabel`),
      literal(`kts`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kayser`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}expression`),
      literal(`\\(\\(cm^{-1}\\)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kayser?oldid=458489166`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}kayser`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ky`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KY`),
      namedNode(`${rdfs}label`),
      literal(`Kayser`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${dcterms}description`),
      literal(`Kenya`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}currencyCode`),
      literal(`KES`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}currencyNumber`),
      literal(`404`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kenyan_shilling`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}expression`),
      literal(`\\(KES\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kenyan_shilling?oldid=489547027`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KenyanShilling`),
      namedNode(`${rdfs}label`),
      literal(`Kenyan Shilling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The kibibyte is a multiple of the unit byte for digital information equivalent to 1024 bytes.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5678.2617031470719747459655389854`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kibi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`KiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E64`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KibiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`KibiByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB053`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000-fold of the SI base unit ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kA⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kA.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`TAH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kiloampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA559`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit ampere divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kA/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kA.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kiloampere Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kiloampere Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA558`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit ampere divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`kA/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kA.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kiloampere Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kiloampere Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA557`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}symbol`),
      literal(`kA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}ucumCode`),
      literal(`kA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloA`),
      namedNode(`${rdfs}label`),
      literal(`kiloampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to 100,000 Pa. It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000 Pa = 1 bar \\approx 750.0616827 Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB088`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}symbol`),
      literal(`kbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KBA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBAR`),
      namedNode(`${rdfs}label`),
      literal(`Kilobar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A kilobit per second (kB/s) is a unit of data transfer rate equal to 1,000 bits per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`693.14718055994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DataRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA586`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Data_rate_units#Kilobit_per_second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kbps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kbit.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilobit per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA561`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit becquerel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}symbol`),
      literal(`kBq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}ucumCode`),
      literal(`kBq`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2Q`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBQ`),
      namedNode(`${rdfs}label`),
      literal(`Kilobecquerel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`293.07107`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(kBtu/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kBtu{IT}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_IT].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_IT]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilo British Thermal Unit (International Definition) per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`105505.585262`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}symbol`),
      literal(`kBtu{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_IT]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(`${rdfs}label`),
      literal(`Kilo British Thermal Unit (International Definition)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`292.9`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the heat energy according to the Imperial system of units divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kBtu{th}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_th].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_th]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilo British Thermal Unit (thermochemical) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1054350.2645`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}symbol`),
      literal(`kBtu{th}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[Btu_th]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(`${rdfs}label`),
      literal(`Kilo British Thermal Unit (Thermochemical Definition)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A kilobyte per second (kByte/s) is a unit of data transfer rate equal to 1000 bytes per second or 8000 bits per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545.17744447956`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DataRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB306`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Data_rate_units#Kilobyte_per_second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kBps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kBy.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilobyte per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The kilobyte is a multiple of the unit byte for digital information equivalent to 1000 bytes. Although the prefix kilo- means 1000, the term kilobyte and symbol kB have historically been used to refer to either 1024 (210) bytes or 1000 (103) bytes, dependent upon context, in the fields of computer science and information technology. This ambiguity is removed in QUDT, with KibiBYTE used to refer to 1024 bytes.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545.17744447956`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Byte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Byte?oldid=493588918`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kibi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`kB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`kBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2P`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloBYTE`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Byte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA564`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kC/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kC.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilocoulomb Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilocoulomb Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA565`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`kC/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kC.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilocoulomb Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilocoulomb Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA563`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}symbol`),
      literal(`kC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${rdfs}label`),
      literal(`KiloCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(kilocal-per-cm-sec-degc\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/(cm⋅s⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.cm-1.s-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Centimeter Second Degree Celsius`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Centimetre Second Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Kilocalorie per Square Centimeter Minute" is a unit for  'Power Per Area' expressed as \\(kcal/(cm^{2}-min)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000697333333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/(cm^{2}-min)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/(cm²⋅min)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.cm-2.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimeter Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimetre Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Kilocalorie per Square Centimeter Second" is a unit for  'Power Per Area' expressed as \\(kcal/(cm^{2}-s)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000004184`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/(cm^{2}-s)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/(cm²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.cm-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimeter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimetre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`"Kilocalorie per Square Centimeter" is a unit for  'Energy Per Area' expressed as \\(kcal/cm^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000004184`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/cm^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Calorie per Gram Degree Celsius} is a unit for 'Specific Heat Capacity' expressed as \\(kcal/(gm-degC)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/(gm-degC)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/(g⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`cal.g-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Calorie per Gram Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`"Kilocalorie per Gram" is a unit for  'Specific Energy' expressed as \\(kcal/gm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/gm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilocalorie per Minute} is a unit for \\textit{Heat Flow Rate} and \\textit{Power} expressed as \\(kcal/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`69.7333333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilocalorie per Mole Degree Celsius} is a unit for 'Molar Heat Capacity' expressed as \\(kcal/(mol-degC)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/(mol-degC)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/(mol⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.mol-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Mole Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`The kilocalorie per mole is a derived unit of energy per Avogadro's number of particles. It is the quotient of a kilocalorie (1000 thermochemical gram calories) and a mole, mainly used in the United States. In SI units, it is equal to \\(4.184 kJ/mol\\), or \\(6.9477 \\times 10 J per molecule\\). At room temperature it is equal to 1.688 . Physical quantities measured in \\(kcal\\cdot mol\\) are usually thermodynamical quantities; mostly free energies such as: Heat of vaporization Heat of fusion</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilocalorie per Second} is a unit for \\textit{Heat Flow Rate} and \\textit{Power} expressed as \\(kcal/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kcal/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kcal/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilocalorie} is a unit for \\textit{Energy And Work} expressed as \\(kcal\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Calorie`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Calorie?oldid=494307622`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}symbol`),
      literal(`kcal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.163`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA588`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the no longer approved unit international calorie for energy divided by the product of the SI base unit metre, the unit hour for time and the unit degree Celsius for temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{IT}/(hr⋅m⋅°C)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_IT.h-1.m-1.Cel-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (international Table) Per Hour Meter Degree Celsius`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (international Table) Per Hour Metre Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4186.8`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA589`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1000-fold of the unit calorie, which is used particularly for calorific values of food`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_IT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (international Table)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4190.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA587`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1000-fold of the unit calorie, which is used particularly for calorific values of food`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{mean}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (mean)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.162230555555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB184`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the non-legal unit thermochemical calorie divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{th}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_th.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (thermochemical) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`69.73383333333334`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA591`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1000-fold of the unit calorie divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{th}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_th.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (thermochemical) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA592`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1000-fold of the unit calorie divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{th}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_th.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (thermochemical) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA590`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1000-fold of the unit calorie, which is used particularly for calorific values of food`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}symbol`),
      literal(`kcal{th}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[Cal]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}ucumCode`),
      literal(`kcal_th`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(`${rdfs}label`),
      literal(`Kilocalorie (thermochemical)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB046`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the unit curie`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}symbol`),
      literal(`kCi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}ucumCode`),
      literal(`kCi`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloCi`),
      namedNode(`${rdfs}label`),
      literal(`Kilocurie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${dcterms}description`),
      literal(`"Kilo Electron Volt per Micrometer" is a unit for  'Linear Energy Transfer' expressed as \\(keV/microM\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}expression`),
      literal(`\\(keV/microM\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}symbol`),
      literal(`keV/µM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${qudt}ucumCode`),
      literal(`keV.um-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Electron Volt per Micrometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Electron Volt per Micrometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${dcterms}description`),
      literal(`"Kilo Electron Volt" is a unit for  'Energy And Work' expressed as \\(keV\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}symbol`),
      literal(`keV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}ucumCode`),
      literal(`keV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloEV`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Electron Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB136`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the CGS unit of the magnetic flux density B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}symbol`),
      literal(`kGs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}ucumCode`),
      literal(`kG`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGAUSS`),
      namedNode(`${rdfs}label`),
      literal(`Kilogauss`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA600`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI base unit kilogram and the 0 0001fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.cm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilogram Kelvin} is a unit for 'Mass Temperature' expressed as \\(kg-K\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg-K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-K`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Kilogram Meter Per Second" is a unit for  'Linear Momentum' expressed as \\(kg-m/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg-m/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA615`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅m/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Kilogram Square Meter Per Second" is a unit for  'Angular Momentum' expressed as \\(kg-m^2-s^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg-m2/sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA623`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅m²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${dcterms}description`),
      literal(`"Kilogram Square Meter" is a unit for  'Moment Of Inertia' expressed as \\(kg-m^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg-m2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA622`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA627`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI base kilogram and the  0.001-fold of the power of the SI base metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.mm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB174`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D5`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA597`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the 0.000 001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`kg/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA601`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`kg/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA604`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the 0.001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}symbol`),
      literal(`kg/dm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.dm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Cubic Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Cubic Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram Per Hectare is a unit of mass per area. Kilogram Per Hectare (kg/ha) has a dimension of ML-2 where M is mass, and L is length. It can be converted to the corresponding standard SI unit kg/m2 by multiplying its value by a factor of 0.0001.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/hare\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`kg/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/har`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram Per Hour (kg/h) is a unit in the category of Mass flow rate. It is also known as kilogram/hour. Kilogram Per Hour (kg/h) has a dimension of MT-1 where M is mass, and T is time. It can be converted to the corresponding standard SI unit kg/s by multiplying its value by a factor of 0.000277777777778.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA607`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kg/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA610`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`kg/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`3H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${dcterms}description`),
      literal(`One SI standard unit of mass over the square of one thousand standard unit of length.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/km²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.km-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per square kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA611`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the 1 000-fold of the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}symbol`),
      literal(`kg/kmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.kmol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Kilomol`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA612`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`kg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${dcterms}description`),
      literal(`One SI standard unit of mass over one SI standard unit of length over 3600 times one SI standard unit of time.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per metre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of pressure. The pascal is the standard pressure unit in the MKS metric system, equal to one newton per square meter or one "kilogram per meter per second per second." The unit is named for Blaise Pascal (1623-1662), French philosopher and mathematician, who was the first person to use a barometer to measure differences in altitude.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pascal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}PA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`kg/m/s^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m⋅s²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-1.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per metre per square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}PA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}S-PER-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Perm_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m²⋅s⋅Pa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per square metre per Pascal per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}S-PER-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Square Meter Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Square Metre Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram Per Square Meter (kg/m2) is a unit in the category of Surface density. It is also known as kilograms per square meter, kilogram per square metre, kilograms per square metre, kilogram/square meter, kilogram/square metre. This unit is commonly used in the SI unit system. Kilogram Per Square Meter (kg/m2) has a dimension of ML-2 where M is mass, and L is length. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA617`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m³⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilograms per cubic metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram per cubic metre is an SI derived unit of density, defined by mass in kilograms divided by volume in cubic metres. The official SI symbolic abbreviation is \\(kg \\cdot m^{-3}\\), or equivalently either \\(kg/m^3\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/m^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA619`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Kilogram per cubic metre is an SI derived unit of density, defined by mass in kilograms divided by volume in cubic metres. The official SI symbolic abbreviation is kg . m^-3, or equivalently either kg/m^3.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`kg/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KMQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`kilogram per cubic meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`kilogram per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram Per Meter (kg/m) is a unit in the category of Linear mass density. It is also known as kilogram/meter, kilogram/metre, kilograms per meter, kilogram per metre, kilograms per metre. This unit is commonly used in the SI unit system. Kilogram Per Meter (kg/m) has a dimension of ML-1 where M is mass, and L is length. This unit is the standard SI unit in this category. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA616`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`kg/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA624`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`kg/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`<p>In chemistry, the molar mass M is defined as the mass of a given substance (chemical element or chemical compound) divided by its amount of substance. It is a physical property of a given substance. The base SI unit for molar mass is \\(kg/mol\\). However, for historical reasons, molar masses are almost always expressed in \\(g/mol\\). As an example, the molar mass of water is approximately: \\(18.01528(33) \\; g/mol\\)</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg mol^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`kg/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Mol`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB070`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`kg/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA618`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit kilogram divided by the product of the power of the SI base unit metre with the exponent 2 and the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(s⋅m²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.(s.m2)-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.s-1.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/(s.m2)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Second Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Per Second Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg-per-sec2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(kg \\cdot s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`kg/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`Kilogram Per Second (kg/s) is a unit in the category of Mass flow rate. It is also known as kilogram/second, kilograms per second. This unit is commonly used in the SI unit system. Kilogram Per Second (kg/s) has a dimension of \\(MT^{-1}\\) where M is mass, and T is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(kg/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA629`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kilog-sec2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`kg⋅s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg.s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M2H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`kg²/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg2.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM2-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Square Kilograms per square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilogram`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA594`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD720`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilogram?oldid=493633626`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The kilogram or kilogramme (SI symbol: kg), also known as the kilo, is the base unit of mass in the International System of Units and is defined as being equal to the mass of the International Prototype Kilogram (IPK), which is almost exactly equal to the mass of one liter of water. The avoirdupois (or international) pound, used in both the Imperial system and U.S. customary units, is defined as exactly 0.45359237 kg, making one kilogram approximately equal to 2.2046 avoirdupois pounds.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KGM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98066.5`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB189`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit kilogram-force and the SI base unit metre divided by the 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`kgf⋅m/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.m.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Meter Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Metre Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB154`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI base unit metre and the unit kilogram-force according to the Anglo-American and Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kgf⋅m/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA634`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit kilogram-force and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}symbol`),
      literal(`kgf⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram?force Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`"Kilogram Force per Square Centimeter" is a unit for  'Force Per Area' expressed as \\(kgf/cm^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`98066.5`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(kgf/cm^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`kgf/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA635`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`not SI conform unit of the pressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kgf/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9806650.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA636`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`not SI conform unit of the pressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`kgf/mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf.mm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force Per Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force Per Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${dcterms}description`),
      literal(`"Kilogram Force" is a unit for  'Force' expressed as \\(kgf\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilogram-force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilogram-force?oldid=493375479`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}symbol`),
      literal(`kgf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`kgf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloGM_F`),
      namedNode(`${rdfs}label`),
      literal(`Kilogram Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA567`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000-fold of the SI derived unit hertz and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}symbol`),
      literal(`kHz⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kHz.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilohertz Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilohertz Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${dcterms}description`),
      literal(`"Kilohertz" is a C.G.S System unit for  'Frequency' expressed as \\(KHz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA566`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}symbol`),
      literal(`kHz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`kHz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KHZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloHZ`),
      namedNode(`${rdfs}label`),
      literal(`Kilohertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA569`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit joule divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`kJ/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Kilojoule Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA571`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit joule divided by the product of the SI base unit kilogram and the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}symbol`),
      literal(`kJ/(kg⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ.(kg.K)-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ.kg-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ/(kg.K)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(`${rdfs}label`),
      literal(`Kilojoule Per Kilogram Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA570`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit joule divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`kJ/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Kilojoule Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA572`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit joule divided by the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`kJ/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Kilojoule Per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA568`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}symbol`),
      literal(`kJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`kJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KJO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloJ`),
      namedNode(`${rdfs}label`),
      literal(`Kilojoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00277777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB121`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume kilolitres divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kL/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kL.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4X`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilolitre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilolitre Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB114`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}symbol`),
      literal(`kL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K6`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${rdfs}label`),
      literal(`Kilolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloL`),
      namedNode(`${rdfs}label`),
      literal(`Kilolitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2728.302797866667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB483`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the Anglo-American unit pound-force and foot divided by the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}symbol`),
      literal(`klbf⋅ft/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[ft_i].A-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Foot Per Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2989.067`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB484`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the Anglo-American unit pound-force and the Anglo-American unit foot divided by the Anglo-American unit pound (US) of mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}symbol`),
      literal(`klbf⋅ft/lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[ft_i].[lb_av]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Foot Per Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14593.904199475066`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB192`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the length-related force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}symbol`),
      literal(`klbf/ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[ft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Per Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894757.89`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB138`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the unit for pressure psi as a compounded unit pound-force according to the Anglo-American system of units divided by the power of the unit Inch according to the Anglo-American and Imperial system of units by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`kpsi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`k[lbf_av].[sin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Kilopound Force Per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${dcterms}description`),
      literal(`A change in location of a distance of one thousand metres in an elapsed time of one day (86400 seconds).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`kg/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`km.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Kilometres per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Kilometer per Hour" is a C.G.S System unit for  'Linear Velocity' expressed as \\(km/hr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.2777777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilometres_per_hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(km/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA638`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilometres_per_hour?oldid=487674812`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`km/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`km.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`km/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KMH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilometer per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilometre per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Kilometer per Second" is a C.G.S System unit for  'Linear Velocity' expressed as \\(km/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(km/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB392`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`km/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`km.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`km/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilometer per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilometre per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Cubic Kilometer per Square Second}\\) is a unit for \\(\\textit{Standard Gravitational Parameter}\\) expressed as \\(km^3/s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(km^3/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`km³/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`km3.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`km3/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Kilometer per Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Kilometre per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${dcterms}description`),
      literal(`A common metric unit of length or distance. One kilometer equals exactly 1000 meters, about 0.621 371 19 mile, 1093.6133 yards, or 3280.8399 feet. Oddly, higher multiples of the meter are rarely used; even the distances to the farthest galaxies are usually measured in kilometers. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilometre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilometre?oldid=494821851`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`km`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA641`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit mole divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kmol/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Kilomole Per Kilogram (\\(kmol/kg\\)) is a unit of Molality`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(kmol/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`kmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Kilomol per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA642`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit mol divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`kmol/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`16.94444`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA645`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit mole divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`kmol/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA646`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit mol divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kmol/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA640`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}symbol`),
      literal(`kmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`kmol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloMOL`),
      namedNode(`${rdfs}label`),
      literal(`Kilomole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Newton Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilo Newton Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA574`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the product of the SI derived unit newton and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}symbol`),
      literal(`kN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilonewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilonewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA573`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}symbol`),
      literal(`kN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}ucumCode`),
      literal(`kN`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloN`),
      namedNode(`${rdfs}label`),
      literal(`Kilonewton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA555`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}symbol`),
      literal(`kΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloOHM`),
      namedNode(`${rdfs}label`),
      literal(`Kiloohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${dcterms}description`),
      literal(`Same as kilogramForce`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB059`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}symbol`),
      literal(`kP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}ucumCode`),
      literal(`kgf`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloP`),
      namedNode(`${rdfs}label`),
      literal(`Kilopond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB130`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`sector-specific unit of the burst index as 1 000-fold of the derived unit for pressure pascal related to the substance, represented as a quotient from the 0.001-fold of the SI base unit kilogram divided by the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`kPa⋅m²/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa.m2.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Square Meter per Gram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Square Metre per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA577`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit pascal divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`kPa/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F03`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA576`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit pascal divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`kPa/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB060`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the derived SI unit pascal divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`kPa/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${dcterms}description`),
      literal(`Kilopascal is a unit of pressure. 1 kPa is approximately the pressure exerted by a 10-g mass resting on a 1-cm2 area. 101.3 kPa = 1 atm. There are 1,000 pascals in 1 kilopascal.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pascal_%28unit%29`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA575`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}symbol`),
      literal(`kPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KPA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Kilopascal Absolute} is a SI System unit for 'Force Per Area' expressed as \\(KPaA\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}symbol`),
      literal(`KPaA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}ucumCode`),
      literal(`kPa{absolute}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPA_A`),
      namedNode(`${rdfs}label`),
      literal(`Kilopascal Absolute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB059`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`illegal unit of the weight, defined as mass of 1 kg which receives a weight of 1 kp through gravitation at sea level, which equates to a force of 9,806 65 newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}symbol`),
      literal(`kp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloPOND`),
      namedNode(`${rdfs}label`),
      literal(`Kilopond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.258`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB057`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the unit roentgen`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}symbol`),
      literal(`kR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kR`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloR`),
      namedNode(`${rdfs}label`),
      literal(`Kiloroentgen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA579`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`kS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilosiemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilosiemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA578`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit siemens`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}symbol`),
      literal(`kS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}ucumCode`),
      literal(`kS`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloS`),
      namedNode(`${rdfs}label`),
      literal(`Kilosiemens`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${dcterms}description`),
      literal(`"Killosecond" is an Imperial unit for  'Time' expressed as \\(ks\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Millisecond`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA647`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Millisecond?oldid=495102042`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}symbol`),
      literal(`ks`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ks`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloSEC`),
      namedNode(`${rdfs}label`),
      literal(`kilosecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${qudt}symbol`),
      literal(`kt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${rdfs}label`),
      literal(`KiloTonne`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTONNE`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloTONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB080`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}symbol`),
      literal(`kton{short}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}ucumCode`),
      literal(`kt`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${rdfs}label`),
      literal(`Metric KiloTON`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloTONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB160`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000-fold of the unit for apparent by ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kV⋅A/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV.A.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Ampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA581`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the product of the SI derived unit volt and the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}symbol`),
      literal(`kV⋅A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV.A`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KVA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB195`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000-fold of the unit volt ampere reactive and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kV⋅A{Reactive}⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV.A.h{reactive}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Ampere Reactive Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA648`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the unit var`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}symbol`),
      literal(`kV⋅A{Reactive}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV.A{reactive}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KVR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Ampere Reactive`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA582`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit volt divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`kV/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA580`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit volt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}symbol`),
      literal(`kV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}ucumCode`),
      literal(`kV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KVT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloV`),
      namedNode(`${rdfs}label`),
      literal(`Kilovolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A unit of energy per unit area, equivalent to 3 600 000 joules per square metre.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`kW⋅h/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Kilowatt hour per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${dcterms}description`),
      literal(`The kilowatt hour, or kilowatt-hour, (symbol \\(kW \\cdot h\\), \\(kW h\\) or \\(kWh\\)) is a unit of energy equal to 1000 watt hours or 3.6 megajoules. For constant power, energy in watt hours is the product of power in watts and time in hours. The kilowatt hour is most commonly known as a billing unit for energy delivered to consumers by electric utilities.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kilowatt_hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(kW-h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kilowatt_hour?oldid=494927235`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}symbol`),
      literal(`kW⋅h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`kW.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KWH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW-HR`),
      namedNode(`${rdfs}label`),
      literal(`Kilowatthour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${dcterms}description`),
      literal(`\\(The kilowatt is a derived unit of power in the International System of Units (SI),  The unit, defined as 1,000 joule per second, measures the rate of energy conversion or transfer.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Watt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA583`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Watt?oldid=494906356`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Kilo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}symbol`),
      literal(`kW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}ucumCode`),
      literal(`kW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KWT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloW`),
      namedNode(`${rdfs}label`),
      literal(`Kilowatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA585`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI derived unit weber divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`kWb/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`kWb.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kiloweber Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Kiloweber Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${dcterms}description`),
      literal(`Papua New Guinea`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}currencyCode`),
      literal(`PGK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}currencyNumber`),
      literal(`598`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kina`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}expression`),
      literal(`\\(PGK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kina?oldid=477155361`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kina`),
      namedNode(`${rdfs}label`),
      literal(`Kina`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${dcterms}description`),
      literal(`Estonia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}currencyCode`),
      literal(`EEK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}currencyNumber`),
      literal(`233`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Estonian_kroon`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}expression`),
      literal(`\\(EEK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Estonian_kroon?oldid=492626188`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kroon`),
      namedNode(`${rdfs}label`),
      literal(`Kroon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${dcterms}description`),
      literal(`Kuwait`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`KWD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`414`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kuwaiti_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(KWD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kuwaiti_dinar?oldid=489547428`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(`${rdfs}label`),
      literal(`Kuwaiti Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${dcterms}description`),
      literal(`Angola`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}currencyCode`),
      literal(`AOA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}currencyExponent`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}currencyNumber`),
      literal(`973`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angolan_kwanza`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}expression`),
      literal(`\\(AOA\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Angolan_kwanza?oldid=491748749`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kwanza`),
      namedNode(`${rdfs}label`),
      literal(`Kwanza`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${dcterms}description`),
      literal(`Myanmar`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}currencyCode`),
      literal(`MMK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}currencyNumber`),
      literal(`104`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Myanma_kyat`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}expression`),
      literal(`\\(MMK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Myanma_kyat?oldid=441109905`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Kyat`),
      namedNode(`${rdfs}label`),
      literal(`Kyat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA652`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit litre divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`L/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA655`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Unit litre divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`L/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA650`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit litre divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`L/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB380`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume litre divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`L/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA658`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the unit litre divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`L/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA659`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit litre divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`L/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA662`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit litre divided by the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`L/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${dcterms}description`),
      literal(`The inverse of a molar concentration - the untits of per molarity.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}symbol`),
      literal(`L/µmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.umol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(`${rdfs}label`),
      literal(`Litres per micromole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Ventilation rate in Litres per second divided by the floor area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${qudt}symbol`),
      literal(`L/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Second Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Second Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA664`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`L/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${dcterms}description`),
      literal(`The \\(litre\\) (American spelling: \\(\\textit{liter}\\); SI symbol \\(l\\) or \\(L\\)) is a non-SI metric system unit of volume equal to \\(1 \\textit{cubic decimetre}\\) (\\(dm^3\\)), 1,000 cubic centimetres (\\(cm^3\\)) or \\(1/1000 \\textit{cubic metre}\\). If the lower case "L" is used as the symbol, it is sometimes rendered as a cursive "l" to help distinguish it from the capital "I", although this usage has no official approval by any international bureau.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Litre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Litre?oldid=494846400`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}ucumCode`),
      literal(`L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}ucumCode`),
      literal(`l`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}udunitsCode`),
      literal(`L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LTR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${rdfs}label`),
      literal(`Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${rdfs}label`),
      literal(`Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}L`),
      namedNode(`${skos}altLabel`),
      literal(`litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${dcterms}description`),
      literal(`The lambert (symbol \\(L\\), \\(la\\) or \\(Lb\\)) is a non-SI unit of luminance. A related unit of luminance, the foot-lambert, is used in the lighting, cinema and flight simulation industries. The SI unit is the candela per square metre (\\(cd/m^2\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3183.09886`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lambert`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Luminance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB259`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lambert?oldid=494078267`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}lambert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}ucumCode`),
      literal(`Lmb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LA`),
      namedNode(`${rdfs}label`),
      literal(`Lambert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Pound Degree Fahrenheit} is an Imperial unit for 'Mass Temperature' expressed as \\(lb-degF\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Pound Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Pound Degree Rankine} is an Imperial unit for 'Mass Temperature' expressed as \\(lb-degR\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb-degR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅°R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[degR]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-DEG_R`),
      namedNode(`${rdfs}label`),
      literal(`Pound Degree Rankine`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.04214011`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA671`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit pound according to the avoirdupois system of units and the power of the unit foot according to the Anglo-American and the Imperial system of units with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[sft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mass (avoirdupois) Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0002926397`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA672`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit pound according to the avoirdupois system of units and the power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[sin_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mass (avoirdupois) Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.011521246198`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB194`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the unbalance (product of avoirdupois pound according to the avoirdupois system of units and inch according to the Anglo-American and Imperial system of units)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`IA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-IN`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mass (avoirdupois) Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Pound Mole Degree Fahrenheit} is a unit for 'Mass Amount Of Substance Temperature' expressed as \\(lb-mol-degF\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb-mol-degF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅mol⋅°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].mol.[degF]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mole Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${dcterms}description`),
      literal(`<p><strong>Pound Mole</strong> is a unit for \\textit{'Mass Amount Of Substance'} expressed as \\(lb-mol\\).</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.45359237`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb-mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB402`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`lb⋅mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000005249912`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA673`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass avoirdupois pound according to the avoirdupois system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`lb/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Pound (avoirdupois) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Foot Hour" is an Imperial unit for  'Dynamic Viscosity' expressed as \\(lb/(ft-hr)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0004133788732137649`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/(ft-hr)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}symbol`),
      literal(`lb/(ft⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i]-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K67`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Foot Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Foot Second" is an Imperial unit for  'Dynamic Viscosity' expressed as \\(lb/(ft-s)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.4881639435695537`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/(ft-s)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`lb/(ft⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i]-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Foot Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.882428`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB262`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit for areal-related mass as a unit pound according to the avoirdupois system of units divided by the power of the unit foot according to the Anglo-American and Imperial system of units by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`lb/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i]-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mass (avoirdupois) Per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Cubic Foot" is an Imperial unit for  'Density' expressed as \\(lb/ft^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`16.018463373960138`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/ft^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}symbol`),
      literal(`lb/ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[cft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Foot" is an Imperial unit for  'Mass Per Length' expressed as \\(lb/ft\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.4881639435695537`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/ft\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}symbol`),
      literal(`lb/ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-FT`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Gallon" is an Imperial unit for  'Density' expressed as \\(lb/gal\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`99.7763727`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/gal\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}symbol`),
      literal(`lb/gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[gal_br]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Gallon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`99.77637`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA679`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass avoirdupois pound according to the avoirdupois system of units divided by the unit gallon (UK) according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}symbol`),
      literal(`lb/gal{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[gal_br]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(`${rdfs}label`),
      literal(`Pound (avoirdupois) Per Gallon (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`83.0812213`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA680`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass avoirdupois pound according to the avoirdupois system divided by the unit gallon (US, liq.) according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}symbol`),
      literal(`lb/gal{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[gal_us]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(`${rdfs}label`),
      literal(`Pound (avoirdupois) Per Gallon (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`Pound per hour is a mass flow unit. It is abbreviated as PPH or more conventionally as lb/h. Fuel flow for engines is usually expressed using this unit, it is particularly useful when dealing with gases or liquids as volume flow varies more with temperature and pressure. \\(1 lb/h = 0.4535927 kg/h = 126.00 mg/s\\).  Minimum fuel intake on a jumbojet can be as low as 150 lb/h when idling, however this is not enough to sustain flight.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00012599788055555556`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pound_per_hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(PPH\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pound_per_hour?oldid=328571072`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`PPH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`703.06957963916`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB137`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the areal-related mass as avoirdupois pound according to the avoirdupois system of units related to the area square inch according to the Anglo-American and Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`lb/in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[sin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`80`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Pound (avoirdupois) Per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Cubic Inch" is an Imperial unit for  'Density' expressed as \\(lb/in^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`27679.904710203125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/in^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}symbol`),
      literal(`lb/in³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[cin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Cubic Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Inch" is an Imperial unit for  'Mass Per Length' expressed as \\(lb/in\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`17.857967322834646`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}symbol`),
      literal(`lb/in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[in_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-IN`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Cubic Meter" is a unit for  'Density' expressed as \\(lb/m^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.45359237`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/m^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`lb/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Minute" is an Imperial unit for  'Mass Per Time' expressed as \\(lb/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.007559872833333333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`lb/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.4535924`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA692`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass avoirdupois pound according to the avoirdupois system of units divided by the SI base unit for time second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`lb/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pound (avoirdupois) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${dcterms}description`),
      literal(`"Pound per Cubic Yard" is an Imperial unit for  'Density' expressed as \\(lb/yd^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.5932764212577829`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}expression`),
      literal(`\\(lb/yd^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`lb/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Pound per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${dcterms}description`),
      literal(`A pound of mass, based on the international standard definition of the pound as exactly 0.45359237 kg.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.45359237`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}symbol`),
      literal(`lbm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}udunitsCode`),
      literal(`lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LBR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB`),
      namedNode(`${rdfs}label`),
      literal(`Pound Mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force Foot" is an Imperial unit for  'Torque' expressed as \\(lbf-ft\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.35581807`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf-ft\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}symbol`),
      literal(`lbf⋅ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[ft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-FT`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force Inch" is an Imperial unit for  'Torque' expressed as \\(lbf-in\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.112984839`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf-in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}symbol`),
      literal(`lbf⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-IN`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`Pounds or Pounds Force per Square Foot is a British (Imperial) and American pressure unit which is directly related to the psi pressure unit by a factor of 144 (1 sq ft = 12 in x 12 in = 144 sq in). 1 Pound per Square Foot equals 47.8803 Pascals. The psf pressure unit is mostly for lower pressure applications such as specifying building structures to withstand a certain wind force or rating a building floor for maximum weight load.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`47.8802631`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force per Foot" is an Imperial unit for  'Force Per Length' expressed as \\(lbf/ft\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.5939042`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf/ft\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[ft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`12410.56`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA702`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`composed unit for pressure (pound-force per square inch) divided by the unit degree Fahrenheit for temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/(in²⋅°F)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[sin_i]-1.[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Per Square Inch Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force per Square Inch Second" is a unit for  'Force Per Area Time' expressed as \\(lbf / in^{2}-s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894.75789`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf / in^{2}-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/in²⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[sin_i]-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Square Inch Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force per Square Inch" is an Imperial unit for  'Force Per Area' expressed as \\(psia\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894.75789`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pounds_per_square_inch`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}PSI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pounds_per_square_inch?oldid=485678341`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`psia`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[sin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}PSI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force per Inch" is an Imperial unit for  'Force Per Length' expressed as \\(lbf/in\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`175.12685`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf/in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[in_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force per Pound" is an Imperial unit for  'Thrust To Mass Ratio' expressed as \\(lbf/lb\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665085`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf/lb\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}symbol`),
      literal(`lbf/lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].[lb_av]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force per Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force Second per Square Foot" is an Imperial unit for  'Dynamic Viscosity' expressed as \\(lbf-s/ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`47.8802631`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf-s/ft^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`lbf⋅s/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].s.[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Second per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force Second per Square Inch" is an Imperial unit for  'Dynamic Viscosity' expressed as \\(lbf-s/in^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894.75789`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}expression`),
      literal(`\\(lbf-s/in^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`lbf⋅s/in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av].s.[sin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force Second per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${dcterms}description`),
      literal(`"Pound Force" is an Imperial unit for  'Force' expressed as \\(lbf\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.448222`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pound-force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pound-force?oldid=453191483`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}symbol`),
      literal(`lbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lbf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`lbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_F`),
      namedNode(`${rdfs}label`),
      literal(`Pound Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${dcterms}description`),
      literal(`An obsolete unit of mass; the Troy Pound has been defined as exactly 5760 grains, or 0.3732417216 kg. A Troy Ounce is 1/12th of a Troy Pound.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.3732417216`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}symbol`),
      literal(`lbt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_tr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LBT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LB_T`),
      namedNode(`${rdfs}label`),
      literal(`Pound Troy`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${dcterms}description`),
      literal(`A measurement of luminous efficacy, which is the light output in lumens using one watt of electricity.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}expression`),
      literal(`\\(lm-per-w\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA719`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}symbol`),
      literal(`lm/W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`lm.W-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Lumen per Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${dcterms}description`),
      literal(`In photometry, the lumen second is the SI derived unit of luminous energy. It is based on the lumen, the SI unit of luminous flux, and the second, the SI base unit of time.  The lumen second is sometimes called the talbot (symbol T).  An older name for the lumen second was the lumberg.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(lm s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA722`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`lm⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`lm.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`lumen second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${skos}altLabel`),
      literal(`lumberg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM-SEC`),
      namedNode(`${skos}altLabel`),
      literal(`talbot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit for measuring the flux of light being produced by a light source or received by a surface. The intensity of a light source is measured in candelas. One lumen represents the total flux of light emitted, equal to the intensity in candelas multiplied by the solid angle in steradians into which the light is emitted. A full sphere has a solid angle of \\(4\\cdot\\pi\\) steradians. A light source that uniformly radiates one candela in all directions has a total luminous flux of \\(1 cd\\cdot 4 \\pi sr = 4 \\pi cd \\cdot sr \\approx 12.57 \\; \\text{lumens}\\). "Lumen" is a Latin word for light.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lumen`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA718`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Lumen_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}lumen`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`cd.sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}symbol`),
      literal(`lm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}ucumCode`),
      literal(`lm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`LM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LUM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LM`),
      namedNode(`${rdfs}label`),
      literal(`lumen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit for measuring the illumination (illuminance) of a surface. One lux is defined as an illumination of one lumen per square meter or 0.0001 phot. In considering the various light units, it's useful to think about light originating at a point and shining upon a surface. The intensity of the light source is measured in candelas; the total light flux in transit is measured in lumens (1 lumen = 1 candelau00b7steradian); and the amount of light received per unit of surface area is measured in lux (1 lux = 1 lumen/square meter). One lux is equal to approximately 0.09290 foot candle.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lux`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(lx hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA724`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lux?oldid=494700274`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`lm-hr/m^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}symbol`),
      literal(`lx⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`lx.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX-HR`),
      namedNode(`${rdfs}label`),
      literal(`Lux Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit for measuring the illumination (illuminance) of a surface. One lux is defined as an illumination of one lumen per square meter or 0.0001 phot. In considering the various light units, it's useful to think about light originating at a point and shining upon a surface. The intensity of the light source is measured in candelas; the total light flux in transit is measured in lumens (1 lumen = 1 candelau00b7steradian); and the amount of light received per unit of surface area is measured in lux (1 lux = 1 lumen/square meter). One lux is equal to approximately 0.09290 foot candle.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lux`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA723`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lux?oldid=494700274`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}lux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`lm/m^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}symbol`),
      literal(`lx`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}ucumCode`),
      literal(`lx`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}udunitsCode`),
      literal(`lx`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LUX`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LUX`),
      namedNode(`${rdfs}label`),
      literal(`Lux`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${dcterms}description`),
      literal(`A unit of length defining the distance, in meters, that light travels in a vacuum in one year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9460730472580800.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Light-year`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB069`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Light-year?oldid=495083584`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}lightYear`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}symbol`),
      literal(`ly`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ly]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LY`),
      namedNode(`${rdfs}label`),
      literal(`Light Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${dcterms}description`),
      literal(`Laos`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}currencyCode`),
      literal(`LAK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}currencyNumber`),
      literal(`418`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${qudt}symbol`),
      literal(` ₭`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LaoKip`),
      namedNode(`${rdfs}label`),
      literal(`Lao kip`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${dcterms}description`),
      literal(`Georgia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}currencyCode`),
      literal(`GEL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}currencyNumber`),
      literal(`981`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lari`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}expression`),
      literal(`\\(GEL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lari?oldid=486808394`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lari`),
      namedNode(`${rdfs}label`),
      literal(`Lari`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${dcterms}description`),
      literal(`Latvia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}currencyCode`),
      literal(`LVL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}currencyNumber`),
      literal(`428`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Latvian_lats`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}expression`),
      literal(`\\(LVL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Latvian_lats?oldid=492800402`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LatvianLats`),
      namedNode(`${rdfs}label`),
      literal(`Latvian Lats`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${dcterms}description`),
      literal(`Lebanon`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}currencyCode`),
      literal(`LBP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`422`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lebanese_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}expression`),
      literal(`\\(LBP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lebanese_pound?oldid=495528740`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LebanesePound`),
      namedNode(`${rdfs}label`),
      literal(`Lebanese Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${dcterms}description`),
      literal(`Albania`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}currencyCode`),
      literal(`ALL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}currencyNumber`),
      literal(`008`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lek`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}expression`),
      literal(`\\(ALL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lek?oldid=495195665`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lek`),
      namedNode(`${rdfs}label`),
      literal(`Lek`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${dcterms}description`),
      literal(`Honduras`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}currencyCode`),
      literal(`HNL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}currencyNumber`),
      literal(`340`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lempira`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}expression`),
      literal(`\\(HNL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lempira?oldid=389955747`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lempira`),
      namedNode(`${rdfs}label`),
      literal(`Lempira`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${dcterms}description`),
      literal(`Sierra Leone`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}currencyCode`),
      literal(`SLE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}currencyNumber`),
      literal(`925`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sierra_Leonean_leone`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}expression`),
      literal(`\\(SLL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sierra_Leonean_leone?oldid=493517965`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Leone`),
      namedNode(`${rdfs}label`),
      literal(`Leone`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${dcterms}description`),
      literal(`Liberia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`LRD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`430`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Liberian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(LRD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Liberian_dollar?oldid=489549110`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LiberianDollar`),
      namedNode(`${rdfs}label`),
      literal(`Liberian Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${dcterms}description`),
      literal(`Libya`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`LYD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`434`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Libyan_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(LYD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Libyan_dinar?oldid=491421981`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LibyanDinar`),
      namedNode(`${rdfs}label`),
      literal(`Libyan Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${dcterms}description`),
      literal(`Swaziland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}currencyCode`),
      literal(`SZL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}currencyNumber`),
      literal(`748`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Swazi_lilangeni`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}expression`),
      literal(`\\(SZL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Swazi_lilangeni?oldid=490323340`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Lilangeni`),
      namedNode(`${rdfs}label`),
      literal(`Lilangeni`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${dcterms}description`),
      literal(`Lithuania`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}currencyCode`),
      literal(`LTL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}currencyNumber`),
      literal(`440`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Lithuanian_litas`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}expression`),
      literal(`\\(LTL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lithuanian_litas?oldid=493046592`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LithuanianLitas`),
      namedNode(`${rdfs}label`),
      literal(`Lithuanian Litas`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${dcterms}description`),
      literal(`Lesotho`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}currencyCode`),
      literal(`LSL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}currencyNumber`),
      literal(`426`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Loti`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}expression`),
      literal(`\\(LSL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Loti?oldid=384534708`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Loti`),
      namedNode(`${rdfs}label`),
      literal(`Loti`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`73460000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Moon`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Moon?oldid=494566371`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${qudt}symbol`),
      literal(`M☾`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}LunarMass`),
      namedNode(`${rdfs}label`),
      literal(`Lunar mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Meter Kelvin per Watt} is a unit for 'Thermal Resistivity' expressed as \\(K-m/W\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}expression`),
      literal(`\\(K-m/W\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}symbol`),
      literal(`K⋅m/W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.K.W-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Meter Kelvin per Watt`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Metre Kelvin per Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Meter Kelvin} is a unit for 'Length Temperature' expressed as \\(m K\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB170`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}symbol`),
      literal(`m⋅K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdfs}label`),
      literal(`Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-K`),
      namedNode(`${rdfs}label`),
      literal(`Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(m-kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`m⋅kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Meter Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Metre Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}expression`),
      literal(`\\(m-per-f\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}symbol`),
      literal(`m/f`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.F-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Farad`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Farad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`Metre per hour is a metric unit of both speed (scalar) and velocity (Vector (geometry)). Its symbol is m/h or mu00b7h-1 (not to be confused with the imperial unit symbol mph. By definition, an object travelling at a speed of 1 m/h for an hour would move 1 metre.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(m/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB328`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`m/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(m-per-k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA728`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`m/k`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m/K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`Meter Per Minute (m/min) is a unit in the category of Velocity. It is also known as meter/minute, meters per minute, metre per minute, metres per minute. Meter Per Minute (m/min) has a dimension of LT-1 where L is length, and T is time. It can be converted to the corresponding standard SI unit m/s by multiplying its value by a factor of 0.016666666666`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0166666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(m/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA732`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`m/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`m/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2X`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{meter per Square second}\\) is the unit of acceleration in the International System of Units (SI). As a derived unit it is composed from the SI base units of length, the metre, and the standard unit of time, the second. Its symbol is written in several forms as \\(m/s^2\\), or \\(m s^{-2}\\). As acceleration, the unit is interpreted physically as change in velocity or speed per time interval, that is, \\(\\textit{metre per second per second}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(m/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA736`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`m/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MSK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`Metre per second is an SI derived unit of both speed (scalar) and velocity (vector quantity which specifies both magnitude and a specific direction), defined by distance in metres divided by time in seconds.
The official SI symbolic abbreviation is mu00b7s-1, or equivalently either m/s.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA733`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`m/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MTS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Meter per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Metre per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of SI standard unit length over a period of an average calendar year (365.25 days).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000316880878140289`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`m/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Metres per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.859845`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA749`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the power of the SI base unit metre with the exponent 2, of the unit hour for time and the unit degree Celsius for temperature divided by the 1000-fold of the out of use unit for energy international calorie`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅hr⋅°C/kcal{IT}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.h.Cel/kcal_IT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter Hour Degree Celsius Per Kilocalorie (international Table)`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre Hour Degree Celsius Per Kilocalorie (international Table)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅Hz²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ2`),
      namedNode(`${rdfs}label`),
      literal(`Square Metres square Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅Hz³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ3`),
      namedNode(`${rdfs}label`),
      literal(`Square metres cubic Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅Hz⁴`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ4`),
      namedNode(`${rdfs}label`),
      literal(`Square metres Hertz^4`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅Hz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-HZ`),
      namedNode(`${rdfs}label`),
      literal(`Square metres Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Meter Kelvin per Watt} is a unit for 'Thermal Insulance' expressed as \\((K^{2})m/W\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}expression`),
      literal(`\\((K^{2})m/W\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA746`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/Pubs/SP811/appenB9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}symbol`),
      literal(`(K²)m/W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.K.W-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter Kelvin per Watt`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre Kelvin per Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Square Meter Kelvin} is a unit for 'Area Temperature' expressed as \\(m^{2}-K\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{2}-K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-K`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`m²/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`m²/g{dry sediment}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.g-1{dry}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per gram of dry sediment`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Square metres per hectare.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`m²/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`square meters per hectare`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`square metres per hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`57.2957795130823`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${qudt}symbol`),
      literal(`m²/(Hz⋅°)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz-1.deg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ-DEG`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per Hertz per degree`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${qudt}symbol`),
      literal(`m²/Hz²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ2`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per square Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${qudt}symbol`),
      literal(`m²/Hz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.Hz-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-HZ`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per Hertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/j\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA745`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}symbol`),
      literal(`m²/j`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.J-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Joule`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(m2-per-k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`m²/k`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Square Meter Per Kilogram (m2/kg) is a unit in the category of Specific Area. It is also known as square meters per kilogram, square metre per kilogram, square metres per kilogram, square meter/kilogram, square metre/kilogram. This unit is commonly used in the SI unit system. Square Meter Per Kilogram (m2/kg) has a dimension of M-1L2 where M is mass, and L is length. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA750`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`m²/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A square metre unit of area per square metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`m²/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`square meter per square meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`square metre per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`Square Meter Per Mole (m2/mol) is a unit in the category of Specific Area. It is also known as square meters per mole, square metre per per, square metres per per, square meter/per, square metre/per. This unit is commonly used in the SI unit system. Square Meter Per Mole (m2/mol) has a dimension of M-1L2 where M is mass, and L is length. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{2}/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA751`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`m²/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Compressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB492`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the SI base unit metre with the exponent 2 divided by the derived SI unit newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}symbol`),
      literal(`m²/N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.N-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter Per Newton`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-N`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre Per Newton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`m²/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Square metres per square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(Square Metres per second is the SI derived unit of angular momentum, defined by distance or displacement in metres multiplied by distance again in metres and divided by time in seconds. The unit is written in symbols as m2/s or m2u00b7s-1 or m2s-1. It may be better understood when phrased as "metres per second times metres", i.e. the momentum of an object with respect to a position.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{2} s^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA752`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`m²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`S4`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/sr-j\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA756`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}symbol`),
      literal(`m²/(sr⋅J)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.sr-1.J-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Steradian Joule`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Steradian Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/sr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA986`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Steradian?oldid=494317847`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}symbol`),
      literal(`m²/sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Steradian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-SR`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^2/v-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mobility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA748`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`m²/(V⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.V-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter per Volt Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre per Volt Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅s/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.s.rad-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Square metre seconds per radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${dcterms}description`),
      literal(`"Square Meter Steradian" is a unit for  'Area Angle' expressed as \\(m^{2}-sr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{2}-sr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}symbol`),
      literal(`m²⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2.sr`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter Steradian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${dcterms}description`),
      literal(`The S I unit of area is the square metre.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Square_metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(sq-m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA744`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Square_metre?oldid=490945508`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}symbol`),
      literal(`m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MTK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdfs}label`),
      literal(`Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M2`),
      namedNode(`${rdfs}label`),
      literal(`Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^3/c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB143`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}symbol`),
      literal(`m³/C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.C-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Coulomb`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-C`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Coulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA760`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the SI base unit metre with the exponent 3 divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`m³/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter Per Day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA757`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`m^3/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Hectare`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`Cubic Meter Per Hour (m3/h) is a unit in the category of Volume flow rate. It is also known as cubic meters per hour, cubic metre per hour, cubic metres per hour, cubic meter/hour, cubic metre/hour, cubic meter/hr, cubic metre/hr, flowrate. Cubic Meter Per Hour (m3/h) has a dimension of L3T-1 where L is length, and T is time. It can be converted to the corresponding standard SI unit m3/s by multiplying its value by a factor of 0.00027777777.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0002777777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3}/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA763`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`m³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MQH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(m3-per-k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA758`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`m³/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3} kg^{-1} s^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`m³/(kg⋅s²)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.(kg.s2)-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.kg-1.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/(kg.s2)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Kilogram Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Kilogram Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Cubic Meter Per Kilogram (m3/kg) is a unit in the category of Specific volume. It is also known as cubic meters per kilogram, cubic metre per kilogram, cubic metres per kilogram, cubic meter/kilogram, cubic metre/kilogram. This unit is commonly used in the SI unit system. Cubic Meter Per Kilogram (m3/kg) has a dimension of M-1L3 where M is mass, and L is length. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3}/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA766`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`m³/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA767`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the SI base unit metre with the exponent 3 divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`m³/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA768`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the SI base unit metre with the exponent 3 divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`m³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`<p>The molar volume, symbol \\(Vm\\), is the volume occupied by one mole of a substance (chemical element or chemical compound) at a given temperature and pressure. It is equal to the molar mass (M) divided by the mass density. It has the SI unit cubic metres per mole \\(m3/mol\\), although it is more practical to use the units cubic decimetres per mole \\(dm3/mol\\) for gases and cubic centimetres per mole \\(cm3/mol\\) for liquids and solids</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3} mol^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA771`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`m³/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`A40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Cubic Meter per Square Second}\\) is a C.G.S System unit for  \\(\\textit{Standard Gravitational Parameter}\\) expressed as \\(m^3/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^3/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`m³/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Square Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A cubic metre per second (\\(m^{3}s^{-1}, m^{3}/s\\)), cumecs or cubic meter per second in American English) is a derived SI unit of flow rate equal to that of a stere or cube with sides of one metre ( u0303 39.37 in) in length exchanged or moving each second. It is popularly used for water flow, especially in rivers and streams, and fractions for HVAC values measuring air flow.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3}/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA772`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MQS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of volume, equal to 1.0e6 cm3, 1000 liters, 35.3147 ft3, or 1.30795 yd3. A cubic meter holds about 264.17 U.S. liquid gallons or 219.99 British Imperial gallons.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Cubic_metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA757`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cubic_metre?oldid=490956678`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}symbol`),
      literal(`m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MTQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`m⁴/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m4.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Metres to the power four per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${dcterms}description`),
      literal(`A unit associated with area moments of inertia.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Quartic_metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{4}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}symbol`),
      literal(`m⁴`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}ucumCode`),
      literal(`m4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M4`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{5}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L5I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${qudt}symbol`),
      literal(`m⁵`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdfs}label`),
      literal(`Quintic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M5`),
      namedNode(`${rdfs}label`),
      literal(`Quintic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{6}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L6I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${qudt}symbol`),
      literal(`m⁶`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdfs}label`),
      literal(`Sextic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M6`),
      namedNode(`${rdfs}label`),
      literal(`Sextic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${dcterms}description`),
      literal(`The metric and SI base unit of distance.  The 17th General Conference on Weights and Measures in 1983 defined the meter as that distance that makes the speed of light in a vacuum equal to exactly 299 792 458 meters per second. The speed of light in a vacuum, \\(c\\), is one of the fundamental constants of nature. The meter is equal to approximately 1.093 613 3 yards, 3.280 840 feet, or 39.370 079 inches.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA726`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Metre?oldid=495145797`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The metric and SI base unit of distance.   The meter is equal to approximately 1.093 613 3 yards, 3.280 840 feet, or 39.370 079 inches.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}symbol`),
      literal(`m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}ucumCode`),
      literal(`m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}udunitsCode`),
      literal(`m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MTR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${rdfs}label`),
      literal(`Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}M`),
      namedNode(`${rdfs}label`),
      literal(`Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${dcterms}description`),
      literal(`"Mach" is a unit for  'Dimensionless Ratio' expressed as \\(mach\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mach`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MachNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB595`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mach?oldid=492058934`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${qudt}symbol`),
      literal(`Mach`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MACH`),
      namedNode(`${rdfs}label`),
      literal(`Mach`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${qudt}expression`),
      literal(`\\(\\(M\\$/Flight\\)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${qudt}symbol`),
      literal(`$M/flight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(`${rdfs}label`),
      literal(`Million US Dollars per Flight`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${dcterms}description`),
      literal(`"Mesh" is a measure of particle size or fineness of a woven product.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mesh_(scale)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mesh_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MESH`),
      namedNode(`${rdfs}label`),
      literal(`Mesh`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${dcterms}description`),
      literal(`"Mho" is a C.G.S System unit for  'Electric Conductivity' expressed as \\(mho\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Siemens_%28unit%29`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}S`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB200`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}mho`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}symbol`),
      literal(`℧`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}ucumCode`),
      literal(`mho`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${rdfs}label`),
      literal(`Mho`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}S`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${dcterms}description`),
      literal(`"StatMHO" is the unit of conductance, admittance, and susceptance in the C.G.S e.s.u system of units. One \\(statmho\\) is the conductance between two points in a conductor when a constant potential difference of \\(1 \\; statvolt\\) applied between the points produces in the conductor a current of \\(1 \\; statampere\\), the conductor not being the source of any electromotive force, approximately \\(1.1126 \\times 10^{-12} mho\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000011126`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}S_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.sizes.com/units/statmho.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statmho`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`stat℧`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statmho`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MHO_Stat`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}S_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`Miles per hour is an imperial unit of speed expressing the number of statute miles covered in one hour. It is currently the standard unit used for speed limits, and to express speeds generally, on roads in the United Kingdom and the United States. A common abbreviation is mph or MPH.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.44704`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Miles_per_hour`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(mi/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB111`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Miles_per_hour?oldid=482840548`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mi/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Mile per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`Miles per minute is an imperial unit of speed expressing the number of statute miles covered in one minute.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`26.8224`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(mi/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB229`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mi/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Mile per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`Miles per second is an imperial unit of speed expressing the number of statute miles covered in one second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1609.344`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(mi/sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mi/sec`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i].sec-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]/sec`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Mile per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${dcterms}description`),
      literal(`The square mile (abbreviated as sq mi and sometimes as mi) is an imperial and US unit of measure for an area equal to the area of a square of one statute mile. It should not be confused with miles square, which refers to the number of miles on each side squared. For instance, 20 miles square (20 × 20 miles) is equal to 400 square miles. One square mile is equivalent to: 4,014,489,600 square inches 27,878,400 square feet, 3,097,600 square yards, 640 acres, 258.9988110336 hectares, 2560 roods, 25,899,881,103.36 square centimetres, 2,589,988.110336 square metres, 2.589988110336 square kilometres When applied to a portion of the earth's surface, which is curved rather than flat, 'square mile' is an informal synonym for section.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2589988.11`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}expression`),
      literal(`\\(square-mile\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB050`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}symbol`),
      literal(`mi²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_us]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[smi_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MIK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI2`),
      namedNode(`${rdfs}label`),
      literal(`Square Mile`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${dcterms}description`),
      literal(`A cubic mile is an imperial / U.S. customary unit of volume, used in the United States, Canada, and the United Kingdom. It is defined as the volume of a cube with sides of 1 mile in length. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4168181830.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}expression`),
      literal(`\\(mi^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}symbol`),
      literal(`mi³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Mile`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${dcterms}description`),
      literal(`The exact length of the land mile varied slightly among English-speaking countries until the international yard and pound agreement in 1959 established the yard as exactly 0.9144 metres, giving a mile of exactly 1,609.344 metres. The United States adopted this international mile for most purposes, but retained the pre-1959 mile for some land-survey data, terming it the US survey mile. In the US, statute mile formally refers to the survey mile, about 3.219 mm (1/8 inch) longer than the international mile (the international mile is exactly 0.0002% less than the US survey mile).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1609.344`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mile`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}symbol`),
      literal(`mi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`SMI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI`),
      namedNode(`${rdfs}label`),
      literal(`International Mile`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${dcterms}description`),
      literal(`The Mil unit of plane angle, as defined by NATO to be 1/6400 of a circle.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000490873852`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${qudt}symbol`),
      literal(`mil{NATO}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL`),
      namedNode(`${rdfs}label`),
      literal(`Mil Angle (NATO)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${dcterms}description`),
      literal(`A circular mil is a unit of area, equal to the area of a circle with a diameter of one mil (one thousandth of an inch). It is a convenient unit for referring to the area of a wire with a circular cross section, because the area in circular mils can be calculated without reference to pi (\\(\\pi\\)). The area in circular mils, A, of a circle with a diameter of d mils, is given by the formula: Electricians in Canada and the United States are familiar with the circular mil because the National Electrical Code (NEC) uses the circular mil to define wire sizes larger than 0000 AWG. In many NEC publications and uses, large wires may be expressed in thousands of circular mils, which is abbreviated in two different ways: MCM or kcmil. For example, one common wire size used in the NEC has a cross-section of 250,000 circular mils, written as 250 kcmil or 250 MCM, which is the first size larger than 0000 AWG used within the NEC. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000005067075`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB207`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}circularMil`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}symbol`),
      literal(`cmil`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cml_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIL_Circ`),
      namedNode(`${rdfs}label`),
      literal(`Circular Mil`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${dcterms}description`),
      literal(`A minute is a unit of measurement of time. The minute is a unit of time equal to 1/60 (the first sexagesimal fraction of an hour or 60 seconds. In the UTC time scale, a minute on rare occasions has 59 or 61 seconds; see leap second. The minute is not an SI unit; however, it is accepted for use with SI units. The SI symbol for minute or minutes is min (for time measurement) or the prime symbol after a number, e.g. 5' (for angle measurement, even if it is informally used for time).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`60.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA842`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}minute-Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}symbol`),
      literal(`min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}udunitsCode`),
      literal(`min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN`),
      namedNode(`${rdfs}label`),
      literal(`Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0002908882`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}ARCMIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA097`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}symbol`),
      literal(`'`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}ucumCode`),
      literal(`'`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${rdfs}label`),
      literal(`Minute Angle`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Angle`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}ARCMIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${dcterms}description`),
      literal(`Sidereal time is a time-keeping system astronomers use to keep track of the direction to point their telescopes to view a given star in the night sky. A mean sidereal day is about \\(23 h 56 m 4.1 s\\) in length. However, due to variations in the rotation rate of the Earth, the rate of an ideal sidereal clock deviates from any simple multiple of a civil clock. In practice, the difference is kept track of by the difference UTC-UT1, which is measured by radio telescopes and kept on file and available to the public at the IERS and at the United States Naval Observatory. A Sidereal Minute is \\(1/60^{th}\\) of a Sidereal Hour, which is \\(1/24^{th}\\) of a Sidereal Day.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`59.83617`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sidereal_time`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}symbol`),
      literal(`min{sidereal}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${qudt}ucumCode`),
      literal(`min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(`${rdfs}label`),
      literal(`Sidereal Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`The knot is a unit of speed equal to one nautical mile (1.852 km) per hour, approximately 1.151 mph. The abbreviation kn is preferred by the International Hydrographic Organization (IHO), which includes every major seafaring nation; but the abbreviations kt (singular) and kts (plural) are also widely used conflicting with the SI symbol for kilotonne which is also "kt". The knot is a non-SI unit accepted for use with the International System of Units (SI). Worldwide, the knot is used in meteorology, and in maritime and air navigation-for example, a vessel travelling at 1 knot along a meridian travels one minute of geographic latitude in one hour. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.514444`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`nmi/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[nmi_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[nmi_i]/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Nautical Mile per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit for speed is the meter/second.
1 meter/second is equal to 0.0323974082073 nautical mile per minute. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(nmi/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`nmi/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[nmi_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[nmi_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Nautical Mile per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${dcterms}description`),
      literal(`A unit of distance used primarily at sea and in aviation. The nautical mile is defined to be the average distance on the Earth's surface represented by one minute of latitude.  In 1929 an international conference in Monaco redefined the nautical mile to be exactly 1852 meters or 6076.115 49 feet, a distance known as the international nautical mile. The international nautical mile equals about 1.1508 statute miles. There are usually 3 nautical miles in a league. The unit is designed to equal 1/60 degree, although actual degrees of latitude vary from about 59.7 to 60.3 nautical miles. (Note: using data from the Geodetic Reference System 1980, the "true" length of a nautical mile would be 1852.216 meters.)`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1852.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB065`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}symbol`),
      literal(`nmi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}ucumCode`),
      literal(`[nmi_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NMI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_N`),
      namedNode(`${rdfs}label`),
      literal(`Nautical Mile`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${dcterms}description`),
      literal(`The exact length of the land mile varied slightly among English-speaking countries until the international yard and pound agreement in 1959 established the yard as exactly 0.9144 metres, giving a mile of exactly 1,609.344 metres. The United States adopted this international mile for most purposes, but retained the pre-1959 mile for some land-survey data, terming it the US survey mile. In the US, statute mile formally refers to the survey mile, about 3.219 mm (1/8 inch) longer than the international mile (the international mile is exactly 0.0002\\% less than the US survey mile).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1609.347`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mile`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}symbol`),
      literal(`mi{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mi_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MI_US`),
      namedNode(`${rdfs}label`),
      literal(`Mile US Statute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${dcterms}description`),
      literal(`A unit of time corresponding approximately to one cycle of the moon's phases, or about 30 days or 4 weeks. Also known as the 'Synodic Month' and calculated as 29.53059 days.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2551442.976`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Month`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA880`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/Synodal+month`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Month`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}month`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}symbol`),
      literal(`mo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}ucumCode`),
      literal(`mo`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${rdfs}label`),
      literal(`Month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${dcterms}description`),
      literal(`A unit of mechanical mobility for sound waves, being the reciprocal of the mechanical ohm unit of impedance, i.e., for an acoustic medium, the ratio of the flux or volumic speed (area times particle speed) of the resulting waves through it to the effective sound pressure (i.e. force) causing them, the unit being qualified, according to the units used, as m.k.s. or c.g.s. The mechanical ohm is equivalent to \\(1\\,dyn\\cdot\\,s\\cdot cm^{-1}\\) or \\(10^{-3} N\\cdot s\\cdot m^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}expression`),
      literal(`\\(mohm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-914`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1\\:{mohm_{cgs}} = 1\\:\\frac {cm} {dyn.s}\\: (=\\:1\\:\\frac s g \\:in\\:base\\:c.g.s.\\:terms)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(1\\:{mohm_{mks}} = 10^{3}\\:\\frac m {N.s}\\:(=\\:10^{3}\\:   \\frac s {kg}\\:in\\:base\\:m.k.s.\\:terms)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOHM`),
      namedNode(`${rdfs}label`),
      literal(`Mohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Mole Degree Celsius} is a C.G.S System unit for 'Temperature Amount Of Substance' expressed as \\(mol-degC\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(mol-deg-c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}expression`),
      literal(`\\(mol-degC\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`mol⋅°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.Cel`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Mole Degree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${dcterms}description`),
      literal(`<p><strong>Mole Kelvin</strong> is a unit for \\textit{'Temperature Amount Of Substance'} expressed as \\(mol-K\\)</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}symbol`),
      literal(`mol⋅K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.K`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-K`),
      namedNode(`${rdfs}label`),
      literal(`Mole Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA883`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit mol divided by the 0.001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}symbol`),
      literal(`mol/dm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.dm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Cubic Decimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Cubic Decimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${dcterms}description`),
      literal(`SI unit of the quantity of matter per SI unit of mass per unit of time expressed in hour.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(g⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.g-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-GM-HR`),
      namedNode(`${rdfs}label`),
      literal(`Moles per gram per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA884`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit mole divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mol/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${dcterms}description`),
      literal(`Mole Per Kilogram Pascal (\\(mol/kg-pa\\)) is a unit of Molar Mass variation due to Pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}expression`),
      literal(`\\(mol/(kg.pa)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L1I0M-2H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB317`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(kg⋅Pa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.kg-1.Pa-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(`${rdfs}label`),
      literal(`Mole per Kilogram Pascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Mole Per Kilogram (\\(mol/kg\\)) is a unit of Molality`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(mol/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Mol per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA888`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit mol divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`mol/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${dcterms}description`),
      literal(`quantity of matter per unit area per unit of time.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre per day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m²⋅s⋅m⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2.s-1.m-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M-SR`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre per second per metre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m²⋅s⋅m)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2.s-1.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-M`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre per second per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m²⋅s⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2.s-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC-SR`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre per second per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`SI unit of quantity of matter per SI unit area per SI unit of time.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`SI unit of quantity of matter per SI unit area.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mol/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Moles per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${dcterms}description`),
      literal(`SI unit of quantity of matter per SI unit volume per SI unit of time.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mol/(m³⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Moles per cubic metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit for amount-of-substance concentration is the mole/cubic meter.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(mol/m^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA891`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mol/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Mole per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Mole per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.016666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA894`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit mole divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mol/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`mol/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Moles per mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA895`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI base unit mol divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mol/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Mole Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${dcterms}description`),
      literal(`The mole is a unit of measurement used in chemistry to express amounts of a chemical substance. The official definition, adopted as part of the SI system in 1971, is that one mole of a substance contains just as many elementary entities (atoms, molecules, ions, or other kinds of particles) as there are atoms in 12 grams of carbon-12 (carbon-12 is the most common atomic form of carbon, consisting of atoms having 6 protons and 6 neutrons).  This corresponds to a value of \\(6.02214179(30) \\times 10^{23}\\) elementary entities of the substance. It is one of the base units in the International System of Units, and has the unit symbol \\(mol\\). A Mole is the SI base unit of the amount of a substance (as distinct from its mass or weight). Moles measure the actual number of atoms or molecules in an object. An earlier name is gram molecular weight, because one mole of a chemical compound is the same number of grams as the molecular weight of a molecule of that compound measured in atomic mass units.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mole_%28unit%29`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA882`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD716`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mole_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}mole`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}symbol`),
      literal(`mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MOL`),
      namedNode(`${rdfs}label`),
      literal(`Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#iso1000`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mo_g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(`${rdfs}label`),
      literal(`Mean Gregorian Month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#iso1000`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${qudt}ucumCode`),
      literal(`mo_j`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(`${rdfs}label`),
      literal(`Mean Julian Month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${dcterms}description`),
      literal(`A unit of time corresponding approximately to one cycle of the moon's phases, or about 30 days or 4 weeks and calculated as 29.53059 days.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/Synodal+month`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${qudt}ucumCode`),
      literal(`mo_s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${rdfs}label`),
      literal(`Synodic month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MO_Synodic`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${dcterms}description`),
      literal(`"Maxwell" is a C.G.S System unit for  'Magnetic Flux' expressed as \\(Mx\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Maxwell`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB155`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Maxwell?oldid=478391976`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}maxwell`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}symbol`),
      literal(`Mx`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}ucumCode`),
      literal(`Mx`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MX`),
      namedNode(`${rdfs}label`),
      literal(`Maxwell`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${dcterms}description`),
      literal(`Madagascar`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}currencyCode`),
      literal(`MGA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}currencyNumber`),
      literal(`969`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Malagasy_ariary`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}expression`),
      literal(`\\(MGA\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Malagasy_ariary?oldid=489551279`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalagasyAriary`),
      namedNode(`${rdfs}label`),
      literal(`Malagasy Ariary`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${dcterms}description`),
      literal(`Malawi`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}currencyCode`),
      literal(`MWK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}currencyNumber`),
      literal(`454`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}expression`),
      literal(`\\(MWK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalawiKwacha`),
      namedNode(`${rdfs}label`),
      literal(`Malawi Kwacha`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${dcterms}description`),
      literal(`Malaysia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}currencyCode`),
      literal(`MYR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}currencyNumber`),
      literal(`458`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Malaysian_ringgit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}expression`),
      literal(`\\(MYR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Malaysian_ringgit?oldid=494417091`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(`${rdfs}label`),
      literal(`Malaysian Ringgit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${dcterms}description`),
      literal(`Malta`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}currencyCode`),
      literal(`MTL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}currencyNumber`),
      literal(`470`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Maltese_lira`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}expression`),
      literal(`\\(MTL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Maltese_lira?oldid=493810797`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MalteseLira`),
      namedNode(`${rdfs}label`),
      literal(`Maltese Lira`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${dcterms}description`),
      literal(`Turkmenistan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}currencyCode`),
      literal(`TMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}currencyNumber`),
      literal(`934`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Manat`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}expression`),
      literal(`\\(TMM\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Manat?oldid=486967490`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Manat`),
      namedNode(`${rdfs}label`),
      literal(`Manat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${dcterms}description`),
      literal(`Mauritius`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`MUR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`480`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mauritian_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(MUR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mauritian_rupee?oldid=487629200`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MauritiusRupee`),
      namedNode(`${rdfs}label`),
      literal(`Mauritius Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The mebibyte is a multiple of the unit byte for digital information equivalent to \\(1024^{2} bytes\\) or \\(2^{20} bytes\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5814539.984022601702139868711921`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mebi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`MiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MebiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`Mebibyte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA203`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the SI base unit ampere divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mol/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`MA.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megaampere Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megaampere Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA202`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}symbol`),
      literal(`MA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}ucumCode`),
      literal(`MA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaA`),
      namedNode(`${rdfs}label`),
      literal(`Megaampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to 100,000 Pa. It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000 Pa = 1 bar \\approx 750.0616827 Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}symbol`),
      literal(`Mbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Mbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBAR`),
      namedNode(`${rdfs}label`),
      literal(`Megabar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A megabit per second (Mbit/s or Mb/s; not to be confused with mbit/s which means millibit per second, or with Mbitps which means megabit picosecond) is a unit of data transfer rate equal to 1,000,000 bits per second or 1,000 kilobits per second or 125,000 bytes per second or 125 kilobytes per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`693147.18055994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DataRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA226`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Data_rate_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mbps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`MBd`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Mbit/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megabit per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA205`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the derived unit becquerel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}symbol`),
      literal(`MBq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}ucumCode`),
      literal(`MBq`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBQ`),
      namedNode(`${rdfs}label`),
      literal(`Megabecquerel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The megabyte is defined here as one million Bytes. Also, see unit:MebiBYTE.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545177.44447956`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Megabyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Megabyte?oldid=487094486`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`MB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`MBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaBYTE`),
      namedNode(`${rdfs}label`),
      literal(`Mega byte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA207`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`MC/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`MC.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megacoulomb Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megacoulomb Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA208`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`MC/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`MC.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megacoulomb Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megacoulomb Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${dcterms}description`),
      literal(`A MegaCoulomb is \\(10^{6} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA206`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}symbol`),
      literal(`MC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`MC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D77`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${rdfs}label`),
      literal(`MegaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Mega Electron Volt Femtometer} is a unit for  'Length Energy' expressed as \\(MeV fm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}symbol`),
      literal(`MeV⋅fm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`MeV.fm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt Femtometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt Femtometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`"Mega Electron Volt per Centimeter" is a unit for  'Linear Energy Transfer' expressed as \\(MeV/cm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(MeV/cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`MeV/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`MeV.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${dcterms}description`),
      literal(`"Mega Electron Volt per Speed of Light" is a unit for  'Linear Momentum' expressed as \\(MeV/c\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${qudt}expression`),
      literal(`\\(MeV/c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${qudt}symbol`),
      literal(`MeV/c`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${qudt}ucumCode`),
      literal(`MeV.[c]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt per Speed of Light`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Mega Electron Volt} is a unit for  'Energy And Work' expressed as \\(MeV\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000001602176634`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}symbol`),
      literal(`MeV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}ucumCode`),
      literal(`MeV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaEV`),
      namedNode(`${rdfs}label`),
      literal(`Mega Electron Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA229`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`Mg/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`Mg.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megagram Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megagram Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA228`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}symbol`),
      literal(`Mg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Mg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2U`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaGM`),
      namedNode(`${rdfs}label`),
      literal(`Megagram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Speed`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA210`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1 000 000-fold of the SI derived unit hertz and the 1 000-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}symbol`),
      literal(`MHz⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`MHz.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Megahertz Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-M`),
      namedNode(`${rdfs}label`),
      literal(`Megahertz Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Mega Hertz per Kelvin} is a unit for 'Inverse Time Temperature' expressed as \\(MHz K^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(MHz K^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`MHz/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`MHz.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Mega Hertz per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${dcterms}description`),
      literal(`"Mega Hertz per Tesla" is a unit for  'Electric Charge Per Mass' expressed as \\(MHz T^{-1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}expression`),
      literal(`\\(MHz T^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}symbol`),
      literal(`MHz/T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${qudt}ucumCode`),
      literal(`MHz.T-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(`${rdfs}label`),
      literal(`Mega Hertz per Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${dcterms}description`),
      literal(`"Megahertz" is a C.G.S System unit for  'Frequency' expressed as \\(MHz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA209`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}symbol`),
      literal(`MHz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`MHz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MHZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaHZ`),
      namedNode(`${rdfs}label`),
      literal(`Megahertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`MegaJoule Per Kelvin (MegaJ/K) is a unit in the category of Entropy.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(MegaJ/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`MJ/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`MegaJoule per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB093`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived SI unit joule divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`MJ/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`JK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`MegaJoule Per Square Meter (\\(MegaJ/m^2\\)) is a unit in the category of Energy density.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit joule divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`MJ/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA212`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit joule divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`MJ/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`JM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB177`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`quotient of the 1,000,000-fold of the derived SI unit joule divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`MJ/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA211`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}symbol`),
      literal(`MJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`MJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`3B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaJ`),
      namedNode(`${rdfs}label`),
      literal(`Megajoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB112`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}symbol`),
      literal(`ML`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}ucumCode`),
      literal(`ML`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${rdfs}label`),
      literal(`Megalitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaL`),
      namedNode(`${rdfs}label`),
      literal(`Megalitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4448.222`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pound-force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pound-force?oldid=453191483`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}symbol`),
      literal(`Mlbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`M[lbf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaLB_F`),
      namedNode(`${rdfs}label`),
      literal(`Mega Pound Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA214`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the product of the SI derived unit newton and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}symbol`),
      literal(`MN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`MN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${rdfs}label`),
      literal(`Meganewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN-M`),
      namedNode(`${rdfs}label`),
      literal(`Meganewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA213`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}symbol`),
      literal(`MN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}ucumCode`),
      literal(`MN`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B73`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaN`),
      namedNode(`${rdfs}label`),
      literal(`Meganewton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA198`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}symbol`),
      literal(`MΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`MOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaOHM`),
      namedNode(`${rdfs}label`),
      literal(`Megaohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA218`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 1,000,000-fold of the SI derived unit pascal and the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`MPa⋅L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`MPa.L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA219`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 1,000,000-fold of the SI derived unit pascal and the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`MPa⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`MPa.m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA217`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit pascal divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`MPa/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`MPa.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F05`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA216`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit pascal divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`MPa/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`MPa.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA215`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived unit pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}symbol`),
      literal(`MPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`MPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MPA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaPA`),
      namedNode(`${rdfs}label`),
      literal(`Megapascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA220`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`MS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`MS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B77`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Megasiemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Megasiemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${dcterms}description`),
      literal(`The tonne of oil equivalent (toe) is a unit of energy: the amount of energy released by burning one tonne of crude oil, approximately 42 GJ (as different crude oils have different calorific values, the exact value of the toe is defined by convention; unfortunately there are several slightly different definitions as discussed below). The toe is sometimes used for large amounts of energy, as it can be more intuitive to visualise, say, the energy released by burning 1000 tonnes of oil than 42,000 billion joules (the SI unit of energy).</p>
<p>Multiples of the toe are used, in particular the megatoe (Mtoe, one million toe) and the gigatoe (Gtoe, one billion toe).</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`41868000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tonne_of_oil_equivalent`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${qudt}symbol`),
      literal(`megatoe`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaTOE`),
      namedNode(`${rdfs}label`),
      literal(`Megaton of Oil Equivalent`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1,000,000-fold of the unit for apparent by ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}symbol`),
      literal(`MV⋅A⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV.A.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Ampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA222`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the product of the SI derived unit volt and the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}symbol`),
      literal(`MV⋅A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV.A`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MVA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB198`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 1,000,000-fold of the unit volt ampere reactive and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}symbol`),
      literal(`MV⋅A{Reactive}⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV.A{reactive}.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MAH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Ampere Reactive Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB199`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the unit volt ampere reactive`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}symbol`),
      literal(`MV⋅A{Reactive}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV.A{reactive}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Ampere Reactive`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA223`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the SI derived unit volt divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`MV/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B79`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA221`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived unit volt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}symbol`),
      literal(`mV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}ucumCode`),
      literal(`MV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaV`),
      namedNode(`${rdfs}label`),
      literal(`Megavolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA225`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000-fold of the product of the SI derived unit watt and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}symbol`),
      literal(`MW⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`MW.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MWH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW-HR`),
      namedNode(`${rdfs}label`),
      literal(`Megawatt Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}symbol`),
      literal(`MW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}ucumCode`),
      literal(`MW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MAW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaW`),
      namedNode(`${rdfs}label`),
      literal(`MegaW`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`31557600000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wiktionary.org/wiki/megayear`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000-fold of the derived unit year.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Mega`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}symbol`),
      literal(`Myr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ma`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${rdfs}label`),
      literal(`Million Years`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${skos}altLabel`),
      literal(`Ma`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${skos}altLabel`),
      literal(`Mega Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MegaYR`),
      namedNode(`${skos}altLabel`),
      literal(`megannum`, 'la'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${dcterms}description`),
      literal(`Mozambique`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}currencyCode`),
      literal(`MZN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}currencyNumber`),
      literal(`943`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mozambican_metical`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}expression`),
      literal(`\\(MZN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mozambican_metical?oldid=488225670`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Metical`),
      namedNode(`${rdfs}label`),
      literal(`Metical`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${dcterms}description`),
      literal(`Mexico`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`MXN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`484`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mexican_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(MXN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mexican_peso?oldid=494829813`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}MexicanPeso`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanPeso`),
      namedNode(`${rdfs}label`),
      literal(`Mexican Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${dcterms}description`),
      literal(`Mexico`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}currencyCode`),
      literal(`MXV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}currencyNumber`),
      literal(`979`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}expression`),
      literal(`\\(MXV\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(`${rdfs}label`),
      literal(`Mexican Unidad de Inversion (UDI) (Funds code)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA057`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu A\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}symbol`),
      literal(`µA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}ucumCode`),
      literal(`uA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroA`),
      namedNode(`${rdfs}label`),
      literal(`microampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.101325`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}symbol`),
      literal(`µatm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uatm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroATM`),
      namedNode(`${rdfs}label`),
      literal(`Microatmospheres`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB089`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}symbol`),
      literal(`μbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`ubar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBAR`),
      namedNode(`${rdfs}label`),
      literal(`Microbar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per hundred thousand seconds from an SI standard unit of mass of sample.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`µBq/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uBq.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Microbecquerels per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`µBq/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`uBq.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Microbecquerels per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA058`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit becquerel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}symbol`),
      literal(`μBq`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}ucumCode`),
      literal(`uBq`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H08`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroBQ`),
      namedNode(`${rdfs}label`),
      literal(`Microbecquerel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA060`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`μC/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`uC.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B88`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Microcoulomb Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Microcoulomb Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA061`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`μC/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`uC.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Microcoulomb Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Microcoulomb Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${dcterms}description`),
      literal(`A MicroCoulomb is \\(10^{-6} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA059`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}symbol`),
      literal(`µC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}ucumCode`),
      literal(`uC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${rdfs}label`),
      literal(`MicroCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${dcterms}description`),
      literal(`Another commonly used measure of radioactivity, the microcurie: \\(1 \\micro Ci = 3.7 \\times 10 disintegrations per second = 2.22 \\times 10 disintegrations per minute\\). A radiotherapy machine may have roughly 1000 Ci of a radioisotope such as caesium-137 or cobalt-60. This quantity of radioactivity can produce serious health effects with only a few minutes of close-range, un-shielded exposure. The typical human body contains roughly \\(0.1\\micro Ci\\) of naturally occurring potassium-40. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Curie`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA062`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Curie?oldid=495080313`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}symbol`),
      literal(`μCi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}ucumCode`),
      literal(`uCi`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M5`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroCi`),
      namedNode(`${rdfs}label`),
      literal(`MicroCurie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA064`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit farad divided by the 1,000-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`μF/km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uF.km-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Microfarad Per Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Microfarad Per Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA065`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit farad divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`μF/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uF.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microfarad Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microfarad Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${dcterms}description`),
      literal(`The "microfarad" (symbolized \\(\\mu F\\)) is a unit of capacitance, equivalent to 0.000001 (10 to the -6th power) farad. The microfarad is a moderate unit of capacitance. In utility alternating-current (AC) and audio-frequency (AF) circuits, capacitors with values on the order of \\(1 \\mu F\\) or more are common. At radio frequencies (RF), a smaller unit, the picofarad (pF), is often used.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA063`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}symbol`),
      literal(`µF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`uF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4O`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroFARAD`),
      namedNode(`${rdfs}label`),
      literal(`microfarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A unit of mass per area, equivalent to 0.01 grammes per square metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`µg/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Microgram per square centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${dcterms}description`),
      literal(`"Microgravity" is a unit for  'Linear Acceleration' expressed as \\(microG\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000980665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu G\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}symbol`),
      literal(`µG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${qudt}ucumCode`),
      literal(`u[g]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroG`),
      namedNode(`${rdfs}label`),
      literal(`Microgravity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of one millionth part of a unit of gravitational acceleration equal to one centimetre per second per second over a distance of one metre.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`µGal/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uGal.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGAL-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`MicroGals per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**6 (million) by mass of the measurand in the matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`µg/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Micrograms per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA083`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`mass ratio as 0.000000001-fold of the SI base unit kilogram divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`μg/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Microgram Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of mass of a measurand equivalent to 10^-9 kilogram (the SI unit of mass) per litre volume of matrix over a period of 1 hour.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µg/(L⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.L-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L-HR`),
      namedNode(`${rdfs}label`),
      literal(`Micrograms per litre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA084`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI base unit kilogram divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`μg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Microgram Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Microgram Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`µg/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Micrograms per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µg/(m³⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.m-3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3-HR`),
      namedNode(`${rdfs}label`),
      literal(`Micrograms per cubic metre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA085`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`μg/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Microgram Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Microgram Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${dcterms}description`),
      literal(`One 10**6 part of the SI standard unit of mass of the measurand per millilitre volume of matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`µg/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Micrograms per millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA082`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}symbol`),
      literal(`μg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ug`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGM`),
      namedNode(`${rdfs}label`),
      literal(`Microgram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${dcterms}description`),
      literal(`0.000001 fold of the SI unit of radiation dose. Radiation carries energy, and when it is absorbed by matter the matter receives this energy. The dose is the amount of energy deposited per unit of mass. One gray is defined to be the dose of one joule of energy absorbed per kilogram of matter, or 100 rad. The unit is named for the British physician L. Harold Gray (1905-1965), an authority on the use of radiation in the treatment of cancer.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Grey`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Grey?oldid=494774160`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}gray`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}symbol`),
      literal(`µGy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`uGy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroGRAY`),
      namedNode(`${rdfs}label`),
      literal(`MicroGray`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA068`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit henry divided by the 1,000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}symbol`),
      literal(`µH/kΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uH.kOhm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(`${rdfs}label`),
      literal(`Microhenry Per Kiloohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA069`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit henry divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`μH/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uH.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microhenry Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microhenry Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA067`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit henry divided by the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}symbol`),
      literal(`µH/Ω`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uH.Ohm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(`${rdfs}label`),
      literal(`Microhenry Per Ohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit for inductance is the henry. 1 henry is equal to 1000000 microhenry. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA066`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}symbol`),
      literal(`µH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}ucumCode`),
      literal(`uH`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroH`),
      namedNode(`${rdfs}label`),
      literal(`Microhenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${dcterms}description`),
      literal(`"Microinch" is an Imperial unit for  'Length' expressed as \\(in^{-6}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu in\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}symbol`),
      literal(`µin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`u[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M7`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroIN`),
      namedNode(`${rdfs}label`),
      literal(`Microinch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${qudt}symbol`),
      literal(`µJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdfs}label`),
      literal(`Micro Joule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdfs}label`),
      literal(`Micro Joule`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroJ`),
      namedNode(`${rdfs}label`),
      literal(`Mikrojoule `, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA089`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio as 0.000001-fold of the unit litre divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`μL/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`uL.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`uL/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ppmv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Microlitre Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Microlitre Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA088`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}symbol`),
      literal(`μL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}ucumCode`),
      literal(`uL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4G`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${rdfs}label`),
      literal(`Microlitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroL`),
      namedNode(`${rdfs}label`),
      literal(`Microlitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA091`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit metre divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`μm/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`um.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Micrometer Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Micrometre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`µm/(L⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`um.L-1.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-L-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per litre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`µm/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`um2.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Square microns per millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Micro metres measured per Newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${qudt}symbol`),
      literal(`µJ/N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdfs}label`),
      literal(`Micro meter per Newton`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdfs}label`),
      literal(`Micro metre per Newton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(`${rdfs}label`),
      literal(`Mikrometer pro Newton`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA092`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}symbol`),
      literal(`μm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`um2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Micrometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Micrometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`µm³/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`um3.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic microns per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`µm³/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`um3.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Cubic microns per millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}symbol`),
      literal(`µm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`um3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic micrometres (microns)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${dcterms}description`),
      literal(`"Micrometer" is a unit for  'Length' expressed as \\(microm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Micrometer`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA090`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Micrometer?oldid=491270437`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}symbol`),
      literal(`µm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}ucumCode`),
      literal(`um`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Micrometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Micrometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB201`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the obsolete unit mho of the electric conductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}symbol`),
      literal(`μmho`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}ucumCode`),
      literal(`umho`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMHO`),
      namedNode(`${rdfs}label`),
      literal(`Micromho`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(g⋅h)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.g-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/g/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-HR`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per gram per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.g-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/g/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per gram per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`Micromole Per Gram (\\(umol/g\\)) is a unit of Molality`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit mol divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(L⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.L-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/L/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L-HR`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per litre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/m2/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(m²⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.m-2.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/m2/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-HR`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per square metre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**6 (million) of the SI unit of quantity of matter (the mole) per SI unit area per SI unit of time.  This term is based on the number of photons in a certain waveband incident per unit time (s) on a unit area (m2) divided by the Avogadro constant (6.022 x 1023 mol-1). It is used commonly to describe PAR in the 400-700 nm waveband. Definition Source: Thimijan, Richard W., and Royal D. Heins. 1982. Photometric, Radiometric, and Quantum Light Units of Measure: A Review of Procedures for Interconversion. HortScience 18:818-822.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/m2/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**6 (million) of the SI unit of quantity of matter (the mole) per SI unit area.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/mol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/(µmol⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.umol-1.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/umol/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Micromole per micromole of biomass per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(` This unit is used commonly to describe Photosynthetic Photon Flux (PPF) - the total number of photons emitted by a light source each second within the PAR wavelength range. `, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`µmol/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Micromoles per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA093`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}symbol`),
      literal(`μmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroMOL`),
      namedNode(`${rdfs}label`),
      literal(`Micromole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA071`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the product out of the derived SI newton and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}symbol`),
      literal(`μN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${rdfs}label`),
      literal(`Micronewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN-M`),
      namedNode(`${rdfs}label`),
      literal(`Micronewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA070`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}symbol`),
      literal(`μN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}ucumCode`),
      literal(`uN`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroN`),
      namedNode(`${rdfs}label`),
      literal(`Micronewton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA055`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}symbol`),
      literal(`μΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroOHM`),
      namedNode(`${rdfs}label`),
      literal(`Microohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA073`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}symbol`),
      literal(`μPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`uPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPA`),
      namedNode(`${rdfs}label`),
      literal(`Micropascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA072`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the CGS unit of the dynamic viscosity poise`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}symbol`),
      literal(`μP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}ucumCode`),
      literal(`uP`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroPOISE`),
      namedNode(`${rdfs}label`),
      literal(`Micropoise`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec07.html#7.10">SP811 section7.10</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA094`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}symbol`),
      literal(`µrad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`urad`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroRAD`),
      namedNode(`${rdfs}label`),
      literal(`microradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA075`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit Siemens divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`μS/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`uS.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Microsiemens Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Microsiemens Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA076`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit Siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`μS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microsiemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microsiemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA074`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit siemens`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}symbol`),
      literal(`μS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}ucumCode`),
      literal(`uS`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroS`),
      namedNode(`${rdfs}label`),
      literal(`Microsiemens`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${dcterms}description`),
      literal(`"Microsecond" is a unit for  'Time' expressed as \\(microsec\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA095`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}symbol`),
      literal(`µs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`us`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSEC`),
      namedNode(`${rdfs}label`),
      literal(`microsecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`0.000001-fold of the derived SI unit sievert divided by the unit hour`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sievert`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB466`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sievert?oldid=495474333`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1284`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}sievert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µSv/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`uSv.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`MicroSievert per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${dcterms}description`),
      literal(`Although the sievert has the same dimensions as the gray (i.e. joules per kilogram), it measures a different quantity. To avoid any risk of confusion between the absorbed dose and the equivalent dose, the corresponding special units, namely the gray instead of the joule per kilogram for absorbed dose and the sievert instead of the joule per kilogram for the dose equivalent, should be used. 0.000001-fold of the SI derived unit sievert.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sievert`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sievert?oldid=495474333`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1284`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}sievert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}symbol`),
      literal(`µSv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${qudt}ucumCode`),
      literal(`uSv`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroSV`),
      namedNode(`${rdfs}label`),
      literal(`MicroSievert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA077`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit tesla`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}symbol`),
      literal(`µT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}ucumCode`),
      literal(`uT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroT`),
      namedNode(`${rdfs}label`),
      literal(`Microtesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${dcterms}description`),
      literal(`"MicroTorr" is a unit for  'Force Per Area' expressed as \\(microtorr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000133322`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${qudt}symbol`),
      literal(`µTorr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroTORR`),
      namedNode(`${rdfs}label`),
      literal(`MicroTorr`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA079`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit volt divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`µV/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`uV.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microvolt Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Microvolt Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA078`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit volt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}symbol`),
      literal(`µV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}ucumCode`),
      literal(`uV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D82`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroV`),
      namedNode(`${rdfs}label`),
      literal(`Microvolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA081`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit watt divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`µW/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`uW.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Microwatt Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Microwatt Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA080`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}symbol`),
      literal(`mW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}ucumCode`),
      literal(`uW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D80`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MicroW`),
      namedNode(`${rdfs}label`),
      literal(`Microwatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${dcterms}description`),
      literal(`"Mil Length" is a C.G.S System unit for  'Length' expressed as \\(mil\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${qudt}symbol`),
      literal(`mil`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mil_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilLength`),
      namedNode(`${rdfs}label`),
      literal(`Mil Length`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3.6`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA777`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the 0.001-fold of the SI base unit ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}symbol`),
      literal(`µA⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mA.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E09`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-HR`),
      namedNode(`${rdfs}label`),
      literal(`Milliampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.03937008`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA778`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit ampere divided by the unit inch according to the Anglo-American and the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}symbol`),
      literal(`µA/in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mA.[in_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F08`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(`${rdfs}label`),
      literal(`Milliampere Per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA781`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit ampere  divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`mA/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mA.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Milliampere Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Milliampere Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA775`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Micro`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}symbol`),
      literal(`mA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}ucumCode`),
      literal(`mA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliA`),
      namedNode(`${rdfs}label`),
      literal(`MilliAmpere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${dcterms}description`),
      literal(`A minute of arc, arcminute, or minute arc (MOA), is a unit of angular measurement equal to one sixtieth (1/60) of one degree (circle/21,600), or \\(\\pi /10,800 radians\\). In turn, a second of arc or arcsecond is one sixtieth (1/60) of one minute of arc. Since one degree is defined as one three hundred and sixtieth (1/360) of a rotation, one minute of arc is 1/21,600 of a rotation.  the milliarcsecond, abbreviated mas, is used in astronomy.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000484813681`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}RAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Minute_of_arc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}symbol`),
      literal(`mas`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m''`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${rdfs}label`),
      literal(`Milli ArcSecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliARCSEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}RAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA813`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the 0.001-fold of the unit bar and the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mbar⋅L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mbar.L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA327`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit bar and the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mbar⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mbar.m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA812`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.01-fold of the unit bar divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`mbar/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mbar.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F04`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA811`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit bar divided by the unit temperature kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`mbar/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`mbar.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Millibar Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${dcterms}description`),
      literal(`The bar is a non-SI unit of pressure, defined by the IUPAC as exactly equal to 100,000 Pa. It is about equal to the atmospheric pressure on Earth at sea level, and since 1982 the IUPAC has recommended that the standard for atmospheric pressure should be harmonized to \\(100,000 Pa = 1 bar \\approx 750.0616827 Torr\\). Units derived from the bar are the megabar (symbol: Mbar), kilobar (symbol: kbar), decibar (symbol: dbar), centibar (symbol: cbar), and millibar (symbol: mbar or mb). They are not SI or cgs units, but they are accepted for use with the SI.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}HectoPA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA810`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bar_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}symbol`),
      literal(`mbar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mbar`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MBR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${rdfs}label`),
      literal(`Millibar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBAR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}HectoPA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per thousand seconds per 1000th SI unit of sample mass.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`mBq/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mBq.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Millibecquerels per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per thousand seconds from an SI standard unit of mass of sample.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mBq/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mBq.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Millibecquerels per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per second from the SI unit of volume (cubic metre). Equivalent to Becquerels per cubic metre.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`mBq/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mBq.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Millibecquerels per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${dcterms}description`),
      literal(`One radioactive disintegration per thousand seconds in material passing through an area of one square metre during a period of one day (86400 seconds).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mBq/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mBq.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliBQ-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millibecquerels per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA783`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit coulomb divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mC/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mC.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C8`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Millicoulomb Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA784`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mC/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mC.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Millicoulomb Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Millicoulomb Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA785`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit coulomb divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mC/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mC.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D88`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Millicoulomb Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Millicoulomb Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${dcterms}description`),
      literal(`A MilliCoulomb is \\(10^{-3} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA782`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}symbol`),
      literal(`mC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${rdfs}label`),
      literal(`MilliCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`37000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Activity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA786`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit curie`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}symbol`),
      literal(`mCi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}ucumCode`),
      literal(`mCi`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MCU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliCi`),
      namedNode(`${rdfs}label`),
      literal(`Millicurie`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${dcterms}description`),
      literal(`\\(Millidegree Celsius is a scaled unit of measurement for temperature.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}conversionOffset`),
      literal(`273.15`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Celsius`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec04.html#4.2.1.1">SP811 section 4.2.1.1</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec06.html#6.2.8">SP811 section 6.2.8</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Celsius?oldid=494152178`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}latexDefinition`),
      literal(`millieDegree Celsius`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}symbol`),
      literal(`m°C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${qudt}ucumCode`),
      literal(`mCel`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliDEG_C`),
      namedNode(`${rdfs}label`),
      literal(`Millidegree Celsius`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA787`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit farad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}symbol`),
      literal(`mF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`mF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliFARAD`),
      namedNode(`${rdfs}label`),
      literal(`Millifarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${dcterms}description`),
      literal(`"Milligravity" is a unit for  'Linear Acceleration' expressed as \\(mG\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00980665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${qudt}symbol`),
      literal(`mG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${qudt}ucumCode`),
      literal(`m[g]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliG`),
      namedNode(`${rdfs}label`),
      literal(`Milligravity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of one millionth part of a unit of gravitational acceleration equal to one centimetre per second per second over a time duration of 30.4375 days or 2629800 seconds.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000380257053768347`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${qudt}symbol`),
      literal(`mgal/mo`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${qudt}ucumCode`),
      literal(`mGal.mo-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL-PER-MO`),
      namedNode(`${rdfs}label`),
      literal(`MilliGals per month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB043`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit of acceleration called gal according to the CGS system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}symbol`),
      literal(`mgal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mGal`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGAL`),
      namedNode(`${rdfs}label`),
      literal(`Milligal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA818`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the 0.0001-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`mg/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA819`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mg/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${dcterms}description`),
      literal(`A derived unit for amount-of-substance concentration measured in mg/dL.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}expression`),
      literal(`\\(mg/L\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}symbol`),
      literal(`mg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.dL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdfs}label`),
      literal(`milligrams per decilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(`${rdfs}label`),
      literal(`milligrams per decilitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA822`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`mg/gm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/g`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H64`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA818`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the 10,0000-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA823`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mg/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA826`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mg/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA827`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`mg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m²⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-2.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per square metre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA829`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mg/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m³⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-3.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per cubic metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m³⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-HR`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per cubic metre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mg/(m³⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Milligrams per cubic metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA830`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mg/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`GP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA828`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`mg/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA833`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mg/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${dcterms}description`),
      literal(`A scaled unit of mass concentration.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the unit millilitre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/mL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Milliliter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA836`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mg/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Milligram Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA815`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}symbol`),
      literal(`mg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MGM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGM`),
      namedNode(`${rdfs}label`),
      literal(`Milligram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA788`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit gray`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}symbol`),
      literal(`mGy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mGy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliGRAY`),
      namedNode(`${rdfs}label`),
      literal(`Milligray`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA791`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit henry divided by the 1 000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}symbol`),
      literal(`mH/kΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mH.kOhm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H05`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(`${rdfs}label`),
      literal(`Millihenry Per Kiloohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA790`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit henry divided by the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}symbol`),
      literal(`mH/Ω`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mH.Ohm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H06`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(`${rdfs}label`),
      literal(`Millihenry Per Ohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${dcterms}description`),
      literal(`A unit of inductance equal to one thousandth of a henry. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA789`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}symbol`),
      literal(`mH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}ucumCode`),
      literal(`mH`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliH`),
      namedNode(`${rdfs}label`),
      literal(`Millihenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA841`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit inch according to the Anglo-American and Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}symbol`),
      literal(`mil`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`m[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`77`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${rdfs}label`),
      literal(`Milli-inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${skos}altLabel`),
      literal(`mil`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliIN`),
      namedNode(`${skos}altLabel`),
      literal(`thou`, 'en-gb'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA792`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}symbol`),
      literal(`mJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`mJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliJ`),
      namedNode(`${rdfs}label`),
      literal(`Millijoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00016666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA858`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`quotient of the 0.001-fold of the unit litre and the unit minute divided by the 0.0001-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mL/(cm²⋅min)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Square Centimeter Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Square Centimetre Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB085`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume flow rate millilitre divided by second related to the transfer area as 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mL/(cm²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.cm-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Square Centimeter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Square Centimetre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA847`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mL/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA850`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mL/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA845`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`mL/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB095`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit of the volume litre divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mL/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`KX`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA853`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the 0.001-fold of the unit litre divided by the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`mL/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mL/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millilitres per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA854`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mL/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA855`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mL/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA859`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mL/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA844`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MLT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Millilitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.wmo.int/pages/prog/www/IMOP/CIMO-Guide.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of change in depth over time for a specific area, typically used to express precipitation intensity or evaporation (the amount of liquid water evaporated per unit of time from the area)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mm/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`millimeters per day`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`millimetres per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000002777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA866`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0001-fold of the SI base unit metre divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mm/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H67`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter Per Hour`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA864`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit metre divided by the SI base unit kelvin`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`mm/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter Per Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre Per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB378`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit metre divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mm/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter Per Minute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA867`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit metre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mm/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000171`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA868`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit metre divided by the unit year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`mm/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm/a`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter Per Year`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre Per Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA872`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the power of the SI base unit metre with the exponent 2 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mm²/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Millimeter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Millimetre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA871`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MMK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA874`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`volume ratio consisting of the 0.000000001-fold of the power of the SI base unit metre with the exponent 3 divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mm³/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm3.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Millimeter Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Millimetre Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${dcterms}description`),
      literal(`A metric measure of volume or capacity equal to a cube 1 millimeter on each edge`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}expression`),
      literal(`\\(mm^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA873`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}symbol`),
      literal(`mm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MMQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA869`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the power of the SI base unit metre with the exponent 4`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}symbol`),
      literal(`mm⁴`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G77`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM4`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${dcterms}description`),
      literal(`The millimetre (International spelling as used by the International Bureau of Weights and Measures) or millimeter (American spelling) (SI unit symbol mm) is a unit of length in the metric system, equal to one thousandth of a metre, which is the SI base unit of length. It is equal to 1000 micrometres or 1000000 nanometres. A millimetre is equal to exactly 5/127 (approximately 0.039370) of an inch.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Millimetre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}expression`),
      literal(`\\(mm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA862`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Millimetre?oldid=493032457`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`MMT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM`),
      namedNode(`${skos}altLabel`),
      literal(`mil`, 'en-gb'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA878`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit mol divided by the 0.001-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Millimole Per Gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA879`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit mol divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Millimole Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit for amount-of-substance concentration is the mmo/L.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}expression`),
      literal(`\\(mmo/L\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`mmo/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`millimoles per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`millimoles per litre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`µg/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol/m2/s1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${qudt}udunitsCode`),
      literal(`DU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/(m³⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.m-3.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per cubic metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`mmol/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Millimoles per mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA877`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI base unit mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}symbol`),
      literal(`mmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mmol`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliMOL`),
      namedNode(`${rdfs}label`),
      literal(`Millimole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`9.80665`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA875`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of pressure - 1 mmH2O is the static pressure exerted by a water column with a height of 1 mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}symbol`),
      literal(`mmH₂0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm[H2O]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Conventional Millimeter Of Water`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_H2O`),
      namedNode(`${rdfs}label`),
      literal(`Conventional Millimetre Of Water`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${dcterms}description`),
      literal(`The millimeter of mercury is defined as the pressure exerted at the base of a column of fluid exactly 1 mm high, when the density of the fluid is exactly \\(13.5951 g/cm^{3}\\), at a place where the acceleration of gravity is exactly \\(9.80665 m/s^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`133.322387415`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Torr`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Torr?oldid=495199381`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}symbol`),
      literal(`mmHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm[Hg]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mmHg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mm_Hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mm_hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}udunitsCode`),
      literal(`mmhg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`HN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter of Mercury`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HG`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre of Mercury`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${dcterms}description`),
      literal(`Millimeters of Mercury inclusive of atmospheric pressure`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}symbol`),
      literal(`mmHgA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm[Hg]{absolute}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${rdfs}label`),
      literal(`Millimeter of Mercury - Absolute`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliM_HGA`),
      namedNode(`${rdfs}label`),
      literal(`Millimetre of Mercury - Absolute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA794`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the product of the SI derived unit newton and the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}symbol`),
      literal(`mN⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mN.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${rdfs}label`),
      literal(`Millinewton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-M`),
      namedNode(`${rdfs}label`),
      literal(`Millinewton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA795`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit newton divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`mN/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mN.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Millinewton Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Millinewton Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA793`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}symbol`),
      literal(`mN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mN`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliN`),
      namedNode(`${rdfs}label`),
      literal(`Millinewton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA741`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}symbol`),
      literal(`mΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliOHM`),
      namedNode(`${rdfs}label`),
      literal(`Milliohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA799`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the product of the SI derived unit pascal and the SI base unit second divided by the unit of the pressure bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`mPa⋅s/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mPa.s.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Millipascal Second Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA797`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the product of the SI derived unit pascal and the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`mPa⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`mPa.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Millipascal Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA796`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}symbol`),
      literal(`mPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`mPa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliPA`),
      namedNode(`${rdfs}label`),
      literal(`Millipascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000258`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA898`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB056`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Roentgen_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the unit roentgen.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}symbol`),
      literal(`mR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mR`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2Y`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR`),
      namedNode(`${rdfs}label`),
      literal(`Milliroentgen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}guidance`),
      literal(`<http://physics.nist.gov/Pubs/SP811/sec07.html#7.10>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA897`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}symbol`),
      literal(`mrad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`mrad`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD`),
      namedNode(`${rdfs}label`),
      literal(`milliradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`One thousandth part of an absorbed ionizing radiation dose equal to 100 ergs per gram of irradiated material received per hour.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`mrad/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mRAD.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliRAD_R-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Millirads per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000258`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA898`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB056`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Roentgen_equivalent_man`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The roentgen equivalent man (or rem) is a CGS unit of equivalent dose, effective dose, and committed dose, which are measures of the health effect of low levels of ionizing radiation on the human body.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}symbol`),
      literal(`mrem`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}ucumCode`),
      literal(`mREM`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliR_man`),
      namedNode(`${rdfs}label`),
      literal(`Milliroentgen Equivalent Man`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA801`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit Siemens divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`mS/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mS.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mS/cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Millisiemens Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Millisiemens Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`mS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`MilliSiemens per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA800`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit siemens`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}symbol`),
      literal(`mS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}ucumCode`),
      literal(`mS`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliS`),
      namedNode(`${rdfs}label`),
      literal(`Millisiemens`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${dcterms}description`),
      literal(`"Millisecond" is an Imperial unit for 'Time' expressed as \\(ms\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Millisecond`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA899`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Millisecond?oldid=495102042`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}symbol`),
      literal(`ms`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ms`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSEC`),
      namedNode(`${rdfs}label`),
      literal(`millisecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA802`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit sievert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}symbol`),
      literal(`mSv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}ucumCode`),
      literal(`mSv`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C28`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliSV`),
      namedNode(`${rdfs}label`),
      literal(`Millisievert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA803`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit tesla`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}symbol`),
      literal(`mT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}ucumCode`),
      literal(`mT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliT`),
      namedNode(`${rdfs}label`),
      literal(`Millitesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${dcterms}description`),
      literal(`"MilliTorr" is a unit for  'Force Per Area' expressed as \\(utorr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.133322`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${qudt}symbol`),
      literal(`mTorr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliTORR`),
      namedNode(`${rdfs}label`),
      literal(`MilliTorr`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA805`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000001-fold of the SI derived unit volt divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`mV/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`mV.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Millivolt Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Millivolt Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA806`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit volt divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`mV/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`mV.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Millivolt Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA804`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0,001-fold of the SI derived unit volt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}symbol`),
      literal(`mV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}ucumCode`),
      literal(`mV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2Z`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliV`),
      namedNode(`${rdfs}label`),
      literal(`Millivolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${qudt}symbol`),
      literal(`mW/(cm⋅µm⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mW.cm-2.um-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-CentiM2-MicroM-SR`),
      namedNode(`${rdfs}label`),
      literal(`Milliwatts per square centimetre per micrometre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${qudt}symbol`),
      literal(`mW/(cm⋅nm⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`mW.m-2.nm-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}label`),
      literal(`Milliwatts per square metre per nanometre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${qudt}symbol`),
      literal(`mW/(cm⋅nm)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mW.m-2.nm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2-NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Milliwatts per square metre per nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA808`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit weber divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`mW/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`mW.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Milliwatt Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Milliwatt Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}symbol`),
      literal(`mW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}ucumCode`),
      literal(`mW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliW`),
      namedNode(`${rdfs}label`),
      literal(`MilliW`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA809`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.001-fold of the SI derived unit weber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Milli`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}symbol`),
      literal(`mWb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}ucumCode`),
      literal(`mWb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MilliWB`),
      namedNode(`${rdfs}label`),
      literal(`Milliweber`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${qudt}expression`),
      literal(`\\(\\(M\\$/yr\\)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Million US Dollars per Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MillionUSD`),
      namedNode(`${rdfs}label`),
      literal(`Million US Dollars`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${dcterms}description`),
      literal(`Moldova`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}currencyCode`),
      literal(`MDL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}currencyNumber`),
      literal(`498`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Moldovan_leu`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}expression`),
      literal(`\\(MDL\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Moldovan_leu?oldid=490027766`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoldovanLeu`),
      namedNode(`${rdfs}label`),
      literal(`Moldovan Leu`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${dcterms}description`),
      literal(`Morocco, Western Sahara`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}currencyCode`),
      literal(`MAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}currencyNumber`),
      literal(`504`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Moroccan_dirham`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}expression`),
      literal(`\\(MAD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Moroccan_dirham?oldid=490560557`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}MoroccanDirham`),
      namedNode(`${rdfs}label`),
      literal(`Moroccan Dirham`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA237`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit newton and the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F88`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA241`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit newton and the SI base unit metre divided by the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m.A-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter Per Ampere`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre Per Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB490`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the derived SI unit newton and the SI base unit metre divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`gp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter Per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}N-PER-RAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre per Metre per Radians`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}N-PER-RAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA244`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit newton and the SI base unit metre divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`This is the SI unit for the rolling resistance, which is equivalent to drag force in newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton meter per meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton metre per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newtonmeter pro Meter`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Newton Meter per Radian is the SI unit for Torsion Constant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton meter per radian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton metre per radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newtonmeter pro Radian`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Newton metre seconds measured per metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m⋅s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton meter seconds per meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton metre seconds per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newtonmetersekunden pro Meter`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Newton metre seconds measured per radian`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m⋅s/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton meter seconds per radian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton metre seconds per radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newtonmetersekunden pro Radian`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The SI derived unit of angular momentum. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Newton_metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA245`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/SI_derived_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`N.m.sec`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}WB-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m²/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m2.A-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m2/A`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter Squared per Ampere`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre Squared per Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}WB-M`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB491`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of gravitational constant as product of the derived SI unit newton, the power of the SI base unit metre with the exponent 2 divided by the power of the SI base unit kilogram with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m²/kg²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m.kg-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Square Meter Per Square Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2-PER-KiloGM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Square Metre Per Square Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${dcterms}description`),
      literal(`"Torque" is the tendency of a force to cause a rotation, is the product of the force and the distance from the center of rotation to the point where the force is applied. Torque has the same units as work or energy, but it is a different physical concept. To stress the difference, scientists measure torque in newton meters rather than in joules, the SI unit of work. One newton meter is approximately 0.737562 pound foot.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Newton_metre`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA239`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Newton_metre?oldid=493923333`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`N.m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-M`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}J`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA236`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit newton divided by the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}symbol`),
      literal(`N/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.A-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-A`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${dcterms}description`),
      literal(`Newton Per Coulomb ( N/C) is a unit in the category of Electric field strength. It is also known as newtons/coulomb. Newton Per Coulomb ( N/C) has a dimension of MLT-3I-1 where M is mass, L is length, T is time, and I is electric current. It essentially the same as the corresponding standard SI unit V/m.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}expression`),
      literal(`\\(N/C\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}symbol`),
      literal(`N/C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.C-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-C`),
      namedNode(`${rdfs}label`),
      literal(`Newton per Coulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB183`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit newton divided by the 0.0001-fold of the power of the SI base unit metre by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`N/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E01`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA238`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit newton divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`N/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`Gravitational field strength at a point is the gravitational force per unit mass at that point. It is a vector and its S.I. unit is N kg-1.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(N/kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`N/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Newton per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of pressure. The pascal is the standard pressure unit in the MKS metric system, equal to one newton per square meter or one "kilogram per meter per second per second." The unit is named for Blaise Pascal (1623-1662), French philosopher and mathematician, who was the first person to use a barometer to measure differences in altitude.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pascal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}PA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pascal?oldid=492989202`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`N/m^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`N/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newtons Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Newtons Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M2`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}PA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`N/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Newtons per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Newton Per Meter (N/m) is a unit in the category of Surface tension. It is also known as newtons per meter, newton per metre, newtons per metre, newton/meter, newton/metre. This unit is commonly used in the SI unit system. Newton Per Meter (N/m) has a dimension of MT-2 where M is mass, and T is time. This unit is the standard SI unit in this category.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(N/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA246`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`N/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`N/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4P`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA250`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit newton divided by the 0.000001-fold of the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}symbol`),
      literal(`N/mm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.mm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Square Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Square Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA249`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit newton divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`N/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Newton Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A one-newton force applied for one angle/torsional torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`N/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton per radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton per radian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton pro Radian`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of specific acoustic impedance. When sound waves pass through any physical substance the pressure of the waves causes the particles of the substance to move. The sound specific impedance is the ratio between the sound pressure and the particle velocity it produces. The specific impedance is \\(1 N \\cdot s \\cdot m^{-3} \\) if unit pressure produces unit velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(N \\cdot s \\cdot m^{-3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(N \\cdot s \\cdot m^{-3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅s/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.s.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Newton second per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Newton second per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(N-s/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA252`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Newton second measured per metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.s.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton Second per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newton Second per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Newtonsekunden pro Meter`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}conversionOffset`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Newton seconds measured per radian`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅s/rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton seconds per radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newton seconds per radian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(`${rdfs}label`),
      literal(`Newtonsekunden pro Radian`, 'de'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA251`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit newton and the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`N⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`N.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Newton Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${dcterms}description`),
      literal(`The "Newton" is the SI unit of force. A force of one newton will accelerate a mass of one kilogram at the rate of one meter per second per second. The newton is named for Isaac Newton (1642-1727), the British mathematician, physicist, and natural philosopher. He was the first person to understand clearly the relationship between force (F), mass (m), and acceleration (a) expressed by the formula \\(F = m \\cdot a\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Newton`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA235`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Newton?oldid=488427661`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}newton`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}symbol`),
      literal(`N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}ucumCode`),
      literal(`N`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}udunitsCode`),
      literal(`N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NEW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}N`),
      namedNode(`${rdfs}label`),
      literal(`Newton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Nat per Second" is information rate in natural units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(nat-per-sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nat?oldid=474010287`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`nat/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q19`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Nat per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${dcterms}description`),
      literal(`A nat is a logarithmic unit of information or entropy, based on natural logarithms and powers of e, rather than the powers of 2 and base 2 logarithms which define the bit. The nat is the natural unit for information entropy. Physical systems of natural units which normalize Boltzmann's constant to 1 are effectively measuring thermodynamic entropy in nats.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nat`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nat?oldid=474010287`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}symbol`),
      literal(`nat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NAT`),
      namedNode(`${rdfs}label`),
      literal(`Nat`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${dcterms}description`),
      literal(`The neper is a logarithmic unit for ratios of measurements of physical field and power quantities, such as gain and loss of electronic signals. It has the unit symbol Np. The unit's name is derived from the name of John Napier, the inventor of logarithms. As is the case for the decibel and bel, the neper is not a unit in the International System of Units (SI), but it is accepted for use alongside the SI. Like the decibel, the neper is a unit in a logarithmic scale. While the bel uses the decadic (base-10) logarithm to compute ratios, the neper uses the natural logarithm, based on Euler's number`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Neper`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA253`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Neper`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}symbol`),
      literal(`Np`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}ucumCode`),
      literal(`Np`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}LogarithmicUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NP`),
      namedNode(`${rdfs}label`),
      literal(`Neper`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${dcterms}description`),
      literal(`"Nephelometry Turbidity Unit" is a C.G.S System unit for  'Turbidity' expressed as \\(NTU\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Turbidity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${qudt}symbol`),
      literal(`NTU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NTU`),
      namedNode(`${rdfs}label`),
      literal(`Nephelometry Turbidity Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000316880878140289`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${qudt}symbol`),
      literal(`/(cm⋅1000 yr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.cm-2.ka-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-CentiM-KiloYR`),
      namedNode(`${rdfs}label`),
      literal(`Number per square centimetre per thousand years`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Number per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${dcterms}description`),
      literal(`Count of an entity or phenomenon's occurrence in 10,000 times the SI unit area (square metre).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`Number per hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Number per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Number per individual per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${dcterms}description`),
      literal(`Count of an entity or phenomenon occurrence in one 10th of the SI unit of mass (kilogram).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${qudt}symbol`),
      literal(`/hg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.hg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-HectoGM`),
      namedNode(`${rdfs}label`),
      literal(`Number per 100 grams`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${qudt}symbol`),
      literal(`/km²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.km-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(`${rdfs}label`),
      literal(`Number per square kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Number per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Flux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Number per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Number per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Number per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Number per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${qudt}symbol`),
      literal(`/µL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.uL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(`${rdfs}label`),
      literal(`Number per microlitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${dcterms}description`),
      literal(`Count of an entity or phenomenon occurrence in one millionth of the SI unit of mass (kilogram).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${qudt}symbol`),
      literal(`/mg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.mg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-MilliGM`),
      namedNode(`${rdfs}label`),
      literal(`Number per milligram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2147483647.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${qudt}symbol`),
      literal(`/nL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.nL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(`${rdfs}label`),
      literal(`Number per nanolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Counts per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${dcterms}description`),
      literal(`"Number per Year" is a unit for  'Frequency' expressed as \\(\\#/yr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000003168808781402895023702689684893655`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}expression`),
      literal(`\\(\\#/yr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`#/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Number per Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${dcterms}description`),
      literal(`"Number" is a unit for  'Dimensionless' expressed as (\\#\\).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Population`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}symbol`),
      literal(`#`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}ucumCode`),
      literal(`1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NUM`),
      namedNode(`${rdfs}label`),
      literal(`Number`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${dcterms}description`),
      literal(`Nigeria`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}currencyCode`),
      literal(`NGN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}currencyNumber`),
      literal(`566`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nigerian_naira`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}expression`),
      literal(`\\(NGN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nigerian_naira?oldid=493462003`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Naira`),
      namedNode(`${rdfs}label`),
      literal(`Naira`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${dcterms}description`),
      literal(`Eritrea`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}currencyCode`),
      literal(`ERN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}currencyNumber`),
      literal(`232`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nakfa`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}expression`),
      literal(`\\(ERN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nakfa?oldid=415286274`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Nakfa`),
      namedNode(`${rdfs}label`),
      literal(`Nakfa`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${dcterms}description`),
      literal(`Namibia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`NAD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`516`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Namibian_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(NAD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Namibian_dollar?oldid=495250023`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NamibianDollar`),
      namedNode(`${rdfs}label`),
      literal(`Namibian Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA901`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}symbol`),
      literal(`nA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}ucumCode`),
      literal(`nA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoA`),
      namedNode(`${rdfs}label`),
      literal(`nanoampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`nBq/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`nBq.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Nanobecquerels per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${dcterms}description`),
      literal(`A NanoCoulomb is \\(10^{-9} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA902`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}symbol`),
      literal(`nC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`nC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${rdfs}label`),
      literal(`NanoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA904`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit farad divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`nF/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`nF.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanofarad Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanofarad Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${dcterms}description`),
      literal(`A common metric unit of electric capacitance equal to \\(10^{-9} farad\\). This unit was previously called the \\(millimicrofarad\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Farad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA903`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Farad?oldid=493070876`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}symbol`),
      literal(`nF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`nF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoFARAD`),
      namedNode(`${rdfs}label`),
      literal(`Nanofarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`ng/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA911`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`mass ratio consisting of the 0.000000000001-fold of the SI base unit kilogram divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`ng/Kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Nanogram Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`ng/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Perm_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`kg/(m²⋅s⋅Pa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms per square metre per Pascal per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`"0.000000000001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3"`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI base unit kilogram divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`ng/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdfs}comment`),
      literal(`"Derived from GM-PER-M3 which exists in QUDT"`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Nanogram Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Nanogram Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${qudt}symbol`),
      literal(`ng/µL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.uL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms per microlitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${dcterms}description`),
      literal(`One 10**12 part of the SI standard unit of mass of the measurand per millilitre volume of matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`ng/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms per millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${dcterms}description`),
      literal(`10**-9 grams or one 10**-12 of the SI standard unit of mass (kilogram).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}symbol`),
      literal(`ng`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`ng`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoGM`),
      namedNode(`${rdfs}label`),
      literal(`Nanograms`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA906`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit henry divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`nH/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`nH.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanohenry Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanohenry Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permeance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA905`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit henry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}symbol`),
      literal(`nH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}ucumCode`),
      literal(`nH`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoH`),
      namedNode(`${rdfs}label`),
      literal(`Nanohenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}symbol`),
      literal(`nL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}ucumCode`),
      literal(`nL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${rdfs}label`),
      literal(`Nanolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoL`),
      namedNode(`${rdfs}label`),
      literal(`Nanolitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000145037738`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`nm/cm/PSI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}symbol`),
      literal(`nm/(cm⋅PSI)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${qudt}ucumCode`),
      literal(`nm.cm-1.PSI-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(`${rdfs}label`),
      literal(`Nanometer Per Centimeter PSI`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`nm/mm/MPa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}symbol`),
      literal(`nm/(mm⋅MPa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${qudt}ucumCode`),
      literal(`nm.mm-1.MPa-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(`${rdfs}label`),
      literal(`Nanometer Per Millimeter Megapascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(sqnm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A unit of area equal to that of a square, of sides 1nm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}symbol`),
      literal(`nm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`nm2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Nanometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM2`),
      namedNode(`${rdfs}label`),
      literal(`Square Nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA912`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}symbol`),
      literal(`nM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`nm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Nanometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(cm³⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.cm-3.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-CentiM3-HR`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per cubic centimetre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.g-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-GM-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per gram per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(L⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.L-1.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per litre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(L⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.L-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L-HR`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per litre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`A scaled unit of amount-of-substance concentration.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol/L`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(µg⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.ug-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroGM-HR`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per microgram per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/(µmol⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.umol-1.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per micromole per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${dcterms}description`),
      literal(`Unavailable.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}symbol`),
      literal(`nmol/µmol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`nmol.umol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoMOL-PER-MicroMOL`),
      namedNode(`${rdfs}label`),
      literal(`Nanomoles per micromole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA907`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit Siemens by the 0.01 fol of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`nS/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`nS.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Nanosiemens Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Nanosiemens Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA908`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit Siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`nS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`nS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanosiemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Nanosiemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${dcterms}description`),
      literal(`A nanosecond is a SI unit of time equal to one billionth of a second (10-9 or 1/1,000,000,000 s). One nanosecond is to one second as one second is to 31.69 years. The word nanosecond is formed by the prefix nano and the unit second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nanosecond`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA913`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nanosecond?oldid=919778950`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}symbol`),
      literal(`ns`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ns`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoSEC`),
      namedNode(`${rdfs}label`),
      literal(`nanosecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA909`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit tesla`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}symbol`),
      literal(`nT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}ucumCode`),
      literal(`nT`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoT`),
      namedNode(`${rdfs}label`),
      literal(`Nanotesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA910`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000001-fold of the SI derived unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Nano`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}symbol`),
      literal(`nW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}ucumCode`),
      literal(`nW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NanoW`),
      namedNode(`${rdfs}label`),
      literal(`Nanowatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${dcterms}description`),
      literal(`Nepal`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`NPR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`524`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Nepalese_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(NPR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nepalese_rupee?oldid=476894226`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NepaleseRupee`),
      namedNode(`${rdfs}label`),
      literal(`Nepalese Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${dcterms}description`),
      literal(`Netherlands Antilles`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}currencyCode`),
      literal(`ANG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}currencyNumber`),
      literal(`532`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Netherlands_Antillean_guilder`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}expression`),
      literal(`\\(ANG\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Netherlands_Antillean_guilder?oldid=490030382`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(`${rdfs}label`),
      literal(`Netherlands Antillian Guilder`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${dcterms}description`),
      literal(`Israel`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}currencyCode`),
      literal(`ILS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}currencyNumber`),
      literal(`376`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Israeli_new_sheqel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}expression`),
      literal(`\\(ILS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Israeli_new_sheqel?oldid=316213924`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(`${rdfs}label`),
      literal(`New Israeli Shekel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${dcterms}description`),
      literal(`Taiwan and other islands that are under the effective control of the Republic of China (ROC)`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`TWD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`901`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/New_Taiwan_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(TWD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/New_Taiwan_dollar?oldid=493996933`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(`${rdfs}label`),
      literal(`New Taiwan Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${dcterms}description`),
      literal(`Turkey`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}currencyCode`),
      literal(`TRY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}currencyNumber`),
      literal(`949`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Turkish_lira`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}expression`),
      literal(`\\(TRY\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Turkish_lira?oldid=494097764`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewTurkishLira`),
      namedNode(`${rdfs}label`),
      literal(`New Turkish Lira`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${dcterms}description`),
      literal(`Cook Islands, New Zealand, Niue, Pitcairn, Tokelau`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`NZD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`554`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/New_Zealand_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(NZD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/New_Zealand_dollar?oldid=495487722`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}NewZealandDollar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NewZealandDollar`),
      namedNode(`${rdfs}label`),
      literal(`New Zealand Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${dcterms}description`),
      literal(`Bhutan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}currencyCode`),
      literal(`BTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}currencyNumber`),
      literal(`064`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Bhutanese_ngultrum`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}expression`),
      literal(`\\(BTN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bhutanese_ngultrum?oldid=491579260`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ngultrum`),
      namedNode(`${rdfs}label`),
      literal(`Ngultrum`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${dcterms}description`),
      literal(`North Korea`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}currencyCode`),
      literal(`KPW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}currencyNumber`),
      literal(`408`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/North_Korean_won`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}expression`),
      literal(`\\(KPW\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/North_Korean_won?oldid=495081686`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(`${rdfs}label`),
      literal(`North Korean Won`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${dcterms}description`),
      literal(`Norway`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}currencyCode`),
      literal(`NOK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}currencyNumber`),
      literal(`578`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Norwegian_krone`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}expression`),
      literal(`\\(NOK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Norwegian_krone?oldid=495283934`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}NorwegianKrone`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NorwegianKrone`),
      namedNode(`${rdfs}label`),
      literal(`Norwegian Krone`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${dcterms}description`),
      literal(`Peru`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}currencyCode`),
      literal(`PEN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}currencyNumber`),
      literal(`604`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Peruvian_nuevo_sol`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}expression`),
      literal(`\\(PEN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Peruvian_nuevo_sol?oldid=494237249`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}NuevoSol`),
      namedNode(`${rdfs}label`),
      literal(`Nuevo Sol`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${dcterms}description`),
      literal(`An octave is a doubling or halving of a frequency.  One oct is the logarithmic frequency interval between \\(f1\\) and \\(f2\\) when \\(f2/f1 = 2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Octave`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Octave_(electronics)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${qudt}symbol`),
      literal(`oct`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}LogarithmicUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OCT`),
      namedNode(`${rdfs}label`),
      literal(`Oct`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`"Oersted Centimeter" is a C.G.S System unit for  'Magnetomotive Force' expressed as \\(Oe-cm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.795774715`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(Oe-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`Oe⋅cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Oe.cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Oersted Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Oersted Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${dcterms}description`),
      literal(`Oersted (abbreviated as Oe) is the unit of magnetizing field (also known as H-field, magnetic field strength or intensity) in the CGS system of units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`79.5774715`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Oersted`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB134`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Oersted?oldid=491396460`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}oersted`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}symbol`),
      literal(`Oe`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}ucumCode`),
      literal(`Oe`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Oe`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${rdfs}label`),
      literal(`Oersted`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OERSTED`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`Ω⋅m²/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ohm2.m.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ohm Square Meter per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Ohm Square Metre per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA020`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}symbol`),
      literal(`Ω⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ohm.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${rdfs}label`),
      literal(`Ohm Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM-M`),
      namedNode(`${rdfs}label`),
      literal(`Ohm Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${dcterms}description`),
      literal(`The \\textit{ohm} is the SI derived unit of electrical resistance, named after German physicist Georg Simon Ohm. \\(\\Omega \\equiv\\ \\frac{\\text{V}}{\\text{A}}\\ \\equiv\\ \\frac{\\text{volt}}{\\text{amp}}\\ \\equiv\\ \\frac{\\text{W}}{\\text {A}^{2}}\\ \\equiv\\ \\frac{\\text{watt}}{\\text{amp}^{2}}\\ \\equiv\\ \\frac{\\text{H}}{\\text {s}}\\ \\equiv\\ \\frac{\\text{henry}}{\\text{second}}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ohm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Reactance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA017`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ohm?oldid=494685555`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`V/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}symbol`),
      literal(`Ω`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ohm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Ω`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`OHM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM`),
      namedNode(`${rdfs}label`),
      literal(`Ohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{abohm}\\) is the basic unit of electrical resistance in the emu-cgs system of units. One abohm is equal to \\(10^{-9} ohms\\) in the SI system of units; one abohm is a nano ohm.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abohm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abohm?oldid=480725336`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`nOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${dcterms}description`),
      literal(`"StatOHM" is the unit of resistance, reactance, and impedance in the electrostatic C.G.S system of units, equal to the resistance between two points of a conductor when a constant potential difference of 1 statvolt between these points produces a current of 1 statampere; it is equal to approximately \\(8.9876 \\times 10^{11} ohms\\). The statohm is an extremely large unit of resistance. In fact, an object with a resistance of 1 stat W would make an excellent insulator or dielectric . In practical applications, the ohm, the kilohm (k W ) and the megohm (M W or M) are most often used to quantify resistance.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`898760000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://whatis.techtarget.com/definition/statohm-stat-W`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(stat\\Omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OHM_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0086409`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB133`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the unbalance as a product of avoirdupois ounce according to  the avoirdupois system of units and foot according to the Anglo-American and Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}symbol`),
      literal(`oz⋅ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[ft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-FT`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000694563`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB132`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the unbalance as a product of avoirdupois ounce according to  the avoirdupois system of units and inch according to the Anglo-American and Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}symbol`),
      literal(`oz⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4Q`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-IN`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000032812`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA919`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit of the mass avoirdupois ounce according to the avoirdupois system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`oz/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce per Square Foot" is an Imperial unit for  'Mass Per Area' expressed as \\(oz/ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.305151727`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`oz/ft^{2}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`oz/ft²{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Mass Ounce per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce per Gallon" is an Imperial unit for  'Density' expressed as \\(oz/gal\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.23602329`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}expression`),
      literal(`oz/gal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}symbol`),
      literal(`oz/gal{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[gal_br]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Mass Ounce per Gallon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.2360`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA923`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}symbol`),
      literal(`oz/gal{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[gal_br]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L37`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Gallon (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`7.8125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA924`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://cdd.iec.ch/cdd/iec61360/iec61360.nsf/Units/0112-2---62720%23UAA924`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}symbol`),
      literal(`oz/gal{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[gal_us]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L38`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Gallon (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000787487`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA920`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit of the mass avoirdupois ounce according to the avoirdupois system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`oz/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce per Cubic Inch" is an Imperial unit for  'Density' expressed as \\(oz/in^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1729.99404`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}expression`),
      literal(`oz/in^{3}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}symbol`),
      literal(`oz/in³{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[cin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L39`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Mass Ounce per Cubic Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000472492`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA921`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit of the mass avoirdupois ounce according to the avoirdupois system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`oz/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.02834952`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA922`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit of the mass avoirdupois ounce according to the avoirdupois system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`oz/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce per Square Yard" is an Imperial unit for  'Mass Per Area' expressed as \\(oz/yd^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0339057474748823`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}expression`),
      literal(`oz/yd^{2}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}symbol`),
      literal(`oz/yd³{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[syd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Mass Ounce per Square Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0370798`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA918`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit ounce  according to the avoirdupois system of units divided by the power of the unit yard according to the Anglo-American and the Imperial system of units with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`oz/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av].[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (avoirdupois) Per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${dcterms}description`),
      literal(`An ounce of mass is 1/16th of a pound of mass, based on the international standard definition of the pound as exactly 0.45359237 kg.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.028349523125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}symbol`),
      literal(`oz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ONZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ`),
      namedNode(`${rdfs}label`),
      literal(`Ounce Mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce Force Inch" is an Imperial unit for  'Torque' expressed as \\(ozf-in\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0706155243`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Torque`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}symbol`),
      literal(`ozf⋅in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ozf_av].[in_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F-IN`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Ounce Force Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${dcterms}description`),
      literal(`"Ounce Force" is an Imperial unit for  'Force' expressed as \\(ozf\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.278013875`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}symbol`),
      literal(`ozf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ozf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ozf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L40`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_F`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Ounce Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${dcterms}description`),
      literal(`An obsolete unit of mass; the Troy Ounce is 1/12th of a Troy Pound. Based on the international definition of a Troy Pound as 5760 grains, the Troy Ounce is exactly 480 grains, or 0.0311034768 kg.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0311034768`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}symbol`),
      literal(`oz{Troy}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_tr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`APZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_TROY`),
      namedNode(`${rdfs}label`),
      literal(`Ounce Troy`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000787487`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA432`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (UK) for fluids according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`oz{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (UK Fluid) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000787487`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA433`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (UK) for fluids according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`oz{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (UK Fluid) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00472492`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA434`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (UK) for fluids according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`oz{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (UK Fluid) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000284`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA435`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (UK) for fluids according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`oz{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (UK Fluid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Imperial Ounce}\\) is an Imperial unit for 'Liquid Volume' expressed as \\(oz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000284130625`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA431`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for fluids according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}symbol`),
      literal(`oz{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`OZI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(`${rdfs}label`),
      literal(`Fluid Ounce (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000342286`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA436`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (US) for fluids according to the Anglo-American system of units divided by unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`oz{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (US Fluid) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000008214869`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA437`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (US) for fluids according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`oz{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (US Fluid) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000492892`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA438`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (US) for fluids according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`oz{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (US Fluid) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000295735296`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA439`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume fluid ounce (US) for fluids according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`oz{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Ounce (US Fluid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${dcterms}description`),
      literal(`"US Liquid Ounce" is a unit for  'Liquid Volume' expressed as \\(oz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000295735296`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}symbol`),
      literal(`fl oz{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[foz_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`fl oz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`OZA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(`${rdfs}label`),
      literal(`US Liquid Ounce`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${dcterms}description`),
      literal(`Oman`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}currencyCode`),
      literal(`OMR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}currencyNumber`),
      literal(`512`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Omani_rial`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}expression`),
      literal(`\\(OMR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Omani_rial?oldid=491748879`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}OmaniRial`),
      namedNode(`${rdfs}label`),
      literal(`Rial Omani`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${dcterms}description`),
      literal(`Mauritania`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}currencyCode`),
      literal(`MRU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}currencyNumber`),
      literal(`929`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mauritanian_ouguiya`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}expression`),
      literal(`\\(MRO\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mauritanian_ouguiya?oldid=490027072`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Ouguiya`),
      namedNode(`${rdfs}label`),
      literal(`Ouguiya`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA261`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the SI derived unit pascal and the unit litre divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅L/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅m/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.m.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Pascal metres per square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅m/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.m.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal metres per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA264`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the SI derived unit pascal and the power of the SI base unit metre with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G01`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-M`),
      namedNode(`${rdfs}label`),
      literal(`Pascal metres`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA260`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit pascal divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`Pa/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F07`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of pressure measured as the number of Pascals in a period of one hour.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(P / hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`P/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Pascal per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(pascal-per-kelvin\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA259`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`P/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C64`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Pascal per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA262`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit pascal divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`Pa/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of pressure measured as the number of Pascals in a period of one minute.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0166666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(P / min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`P/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Pascal per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change of pressure measured as the number of Pascals in a period of one second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(P / s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`P/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA267`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product out of the SI derived unit pascal and the SI base unit second divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅s/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.s.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H07`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Pascal Second Per Cubic Meter}\\) (\\(Pa-s/m^3\\)) is a unit in the category of Acoustic impedance. It is also known as \\(\\textit{pascal-second/cubic meter}\\). It has a dimension of \\(ML^{-4}T^{-1}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(Pa-s/m3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-4I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA263`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--acoustic_impedance--pascal_second_per_cubic_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Pa.s/m3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅s/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.s.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Pascal Second Per Meter (\\(Pa-s/m\\)) is a unit in the category of Specific acoustic impedance. It is also known as pascal-second/meter. Pascal Second Per Meter has a dimension of \\(ML^2T^{-1}\\) where M is mass, L is length, and T is time. It essentially the same as the corresponding standard SI unit \\(kg/m2\\cdot s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(Pa-s/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA268`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--specific_acoustic_impedance--pascal_second_per_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Pa.s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`P.s.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C67`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of dynamic viscosity, equal to 10 poises or 1000 centipoises. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Pa-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA265`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Pa.s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Pa⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pascal Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M2H0T-6D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`Pa²⋅m/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa2.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Square pascal per square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${dcterms}description`),
      literal(`Square Pascal Second (\\(Pa^2\\cdot s\\)) is a unit in the category of sound exposure.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Pa2-s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M2H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB339`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--specific_acoustic_impedance--pascal_second_per_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Pa2.s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Pa²⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa2.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Square Pascal Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of pressure. The pascal is the standard pressure unit in the MKS metric system, equal to one newton per square meter or one "kilogram per meter per second per second." The unit is named for Blaise Pascal (1623-1662), French philosopher and mathematician, who was the first person to use a barometer to measure differences in altitude.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pascal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Fugacity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA258`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pascal?oldid=492989202`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}pascal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`N/m^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}symbol`),
      literal(`Pa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Pa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${rdfs}label`),
      literal(`Pascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PA`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${dcterms}description`),
      literal(`Panama`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}currencyCode`),
      literal(`PAB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}currencyNumber`),
      literal(`590`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Balboa`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Balboa?oldid=482550791`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PAB`),
      namedNode(`${rdfs}label`),
      literal(`Balboa`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${dcterms}description`),
      literal(`The parsec (parallax of one arcsecond; symbol: pc) is a unit of length, equal to just under 31 trillion (\\(31 \\times 10^{12}\\)) kilometres (about 19 trillion miles), 206265 AU, or about 3.26 light-years. The parsec measurement unit is used in astronomy. It is defined as the length of the adjacent side of an imaginary right triangle in space. The two dimensions that specify this triangle are the parallax angle (defined as 1 arcsecond) and the opposite side (defined as 1 astronomical unit (AU), the distance from the Earth to the Sun). Given these two measurements, along with the rules of trigonometry, the length of the adjacent side (the parsec) can be found.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`30856780000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB067`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}parsec`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}symbol`),
      literal(`pc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`pc`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PARSEC`),
      namedNode(`${rdfs}label`),
      literal(`Parsec`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${dcterms}description`),
      literal(`A pica is a typographic unit of measure corresponding to 1/72 of its respective foot, and therefore to 1/6 of an inch. The pica contains 12 point units of measure. Notably, Adobe PostScript promoted the pica unit of measure that is the standard in contemporary printing, as in home computers and printers. Usually, pica measurements are represented with an upper-case 'P' with an upper-right-to-lower-left virgule (slash) starting in the upper right portion of the 'P' and ending at the lower left of the upright portion of the 'P'; essentially drawing a virgule (/) through a 'P'.  Note that these definitions are different from a typewriter's pica setting, which denotes a type size of ten characters per horizontal inch.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0042333`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pica`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB606`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pica?oldid=458102937`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}symbol`),
      literal(`pc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pca]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`R1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PCA`),
      namedNode(`${rdfs}label`),
      literal(`Pica`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`Poundal Per Square Foot (\\(pdl/ft^2\\)) is a unit in the category of Pressure. It is also known as poundals per square foot, poundal/square foot. This unit is commonly used in the UK, US unit systems. Poundal Per Square Foot has a dimension of \\(ML^{-1}T^{-2}\\), where M is mass, L is length, and T is time. It can be converted to the corresponding standard SI unit \\si{Pa} by multiplying its value by a factor of 1.488163944.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.48816443`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(pdl/ft^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB243`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--pressure--poundal_per_square_foot.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`pdl/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i].s-2.[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Poundal per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${dcterms}description`),
      literal(`The poundal is a unit of force that is part of the foot-pound-second system of units, in Imperial units introduced in 1877, and is from the specialized subsystem of English absolute (a coherent system). The poundal is defined as the force necessary to accelerate 1 pound-mass to 1 foot per second per second. \\(1 pdl = 0.138254954376 N\\) exactly.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.138254954376`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Poundal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB233`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Poundal?oldid=494626458`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}poundal`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}symbol`),
      literal(`pdl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lb_av].[ft_i].s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PDL`),
      namedNode(`${rdfs}label`),
      literal(`Poundal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB058`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the unit angstrom`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}symbol`),
      literal(`/Å`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Ao-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Ã¥ngstrÃ¶m`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Compressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA328`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the metrical unit with the name bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA383`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the 0.000001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}symbol`),
      literal(`/cm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA382`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/cm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001157407`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA408`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`/d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`35.31466`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA453`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the power of the unit foot according to the Anglo-American and the Imperial system of units with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}symbol`),
      literal(`/ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-FT3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${dcterms}description`),
      literal(`Per Square Giga Electron Volt Unit is a denominator unit with dimensions \\(/GeV^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`38956440500000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}expression`),
      literal(`\\(/GeV^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-4I0M-2H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}symbol`),
      literal(`/GeV²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}ucumCode`),
      literal(`GeV-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Square Giga Electron Volt Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${qudt}symbol`),
      literal(`/H`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${qudt}ucumCode`),
      literal(`H-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-H`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Henry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`A reciprocal unit of time for \\(\\textit{reciprocal hour}\\) or "inverse hour".`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`360.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`61023.76`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA546`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the power of the unit inch according to the Anglo-American and the Imperial system of units with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}symbol`),
      literal(`/in³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-IN3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(j^{-1}-m^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}symbol`),
      literal(`/(J⋅m³)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`J-1.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Joule Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-J-M3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Joule Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${dcterms}description`),
      literal(`Per Kelvin Unit is a denominator unit with dimensions \\(/k\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${dcterms}description`),
      literal(`Per Kilometer Unit is a denominator unit with dimensions \\(/km\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-kilometer\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`/km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/km`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`km-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA098`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the 1,000-fold of the product of the SI derived unit volt and the SI base unit ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${qudt}symbol`),
      literal(`/(kV⋅A⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Kilovolt Ampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA667`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Liter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${dcterms}description`),
      literal(`Per Meter Kelvin Unit is a denominator unit with dimensions \\(/m.k\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(/m.k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}symbol`),
      literal(`/(m⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-K`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${qudt}symbol`),
      literal(`/(m⋅nm⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1.nm-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal metre per nanometre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${qudt}symbol`),
      literal(`/(m⋅nm)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1.nm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal metre per nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/(m⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${qudt}symbol`),
      literal(`/(m⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal metre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{-2}-s^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Flux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/(m²⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-2.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`B81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Square Meter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Square Metre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal square metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`"Per Square Meter" is a denominator unit with dimensions \\(/m^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{-3}-s^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/(m³⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Meter Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Metre Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal cubic metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`"Per Cubic Meter" is a denominator unit with dimensions \\(/m^3\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(/m^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`/m3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Per Meter Unit is a denominator unit with dimensions \\(/m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-meter\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001450377`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Compressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA016`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`thousandth divided by the composed unit for pressure (pound-force per square inch)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}symbol`),
      literal(`/ksi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Mille Per Psi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`A reciprocal unit of time for \\(\\textit{reciprocal minute}\\) or \\(\\textit{inverse minute}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`60.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(m^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000391935077`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA881`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the unit month`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}symbol`),
      literal(`/month`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}ucumCode`),
      literal(`mo-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MO`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Month`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${dcterms}description`),
      literal(`<p><strong>Per Mole Unit</strong> is a denominator unit with dimensions \\(mol^{-1}\\)</p>.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(/mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${dcterms}description`),
      literal(`Per Micrometer Unit is a denominator unit with dimensions \\(/microm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-micrometer\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}symbol`),
      literal(`/µm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/um`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${qudt}ucumCode`),
      literal(`um-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Micrometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Micrometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${dcterms}description`),
      literal(`Units used to describe the sensitivity of detection of a spectrophotometer.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${qudt}symbol`),
      literal(`/(mmol⋅L)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`umol-1.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MicroMOL-L`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal micromole per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA870`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the 0.000000001-fold of the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}symbol`),
      literal(`/mm³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L20`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${dcterms}description`),
      literal(`Per Millimeter Unit is a denominator unit with dimensions \\(/mm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-millimeter\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/mm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${qudt}symbol`),
      literal(`/ms`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ms-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal millisecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${dcterms}description`),
      literal(`Per Nanometer Unit is a denominator unit with dimensions \\(/nm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-nanometer\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}symbol`),
      literal(`/nm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/nm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`nm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Nanometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/(Pa⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Pascal per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pascal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}expression`),
      literal(`\\(/Pa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Compressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pascal?oldid=492989202`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`m^2/N`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}symbol`),
      literal(`/Pa`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}ucumCode`),
      literal(`Pa-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PA`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Pascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001450377`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA709`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the composed unit for pressure (pound-force per square inch)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}symbol`),
      literal(`/psi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PSI`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Psi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${dcterms}description`),
      literal(`Per Picoometer Unit is a denominator unit with dimensions \\(/pm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-picoometer\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}symbol`),
      literal(`/pm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`/pm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Picometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PicoM`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Picometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the Planck mass, denoted by \\(m_P\\), is the unit of mass in the system of natural units known as Planck units. It is defined so that \\(\\approx  1.2209 \\times 10 GeV/c_0 = 2.17651(13) \\times 10 kg\\), (or \\(21.7651 \\mu g\\)), where \\(c_0\\) is the speed of light in a vacuum, \\(G\\) is the gravitational constant, and \\(\\hbar\\) is the reduced Planck constant. Particle physicists and cosmologists often use the reduced Planck mass, which is \\(\\approx  4.341 \\times 10 kg = 2.435  \\times 10 GeV/c\\). The added factor of \\(1/{\\sqrt{8\\pi}}\\) simplifies a number of equations in general relativity. Quantum effects are typified by the magnitude of Planck's constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2111089000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-2H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_mass?oldid=493648632`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(m_P = \\sqrt{\\frac{ \\hbar c^3}{G}} \\approx 1.2209 \\times 10^{19} GeV/c^2 = 2.17651(13) \\times 10^{-8}\\), where \\(c\\) is the speed of light in a vacuum, \\(\\hbar\\) is the reduced Planck's constant, and \\(G\\) is the gravitational constant. The two digits enclosed by parentheses are the estimated standard error associated with the reported numerical value.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}symbol`),
      literal(`/mₚ²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Planck Mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${dcterms}description`),
      literal(`Per Second Square Meter Steradian is a denominator unit with dimensions \\(/sec-m^2-sr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(/sec-m^2-sr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}symbol`),
      literal(`/s⋅m²⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`/(s.m2.sr)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1.m-2.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdfs}comment`),
      literal(`It is not clear this unit is ever used. [Editor]`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second Square Meter Steradian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second Square Metre Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Per Second Square Meter}\\) is a measure of flux with dimensions \\(/sec-m^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(per-sec-m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Flux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}symbol`),
      literal(`/s⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`/(s1.m2)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${dcterms}description`),
      literal(`Per Second Steradian Unit is a denominator unit with dimensions \\(/sec-sr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(/sec-sr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}symbol`),
      literal(`/s⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`/(s.sr)`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal square second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`A reciprical unit of time for \\(\\textit{reciprocal second}\\) or \\(\\textit{inverse second}\\). The \\(\\textit{Per Second}\\) is a unit of rate.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}HZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}HZ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${qudt}symbol`),
      literal(`/sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-SR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${dcterms}description`),
      literal(`Per Tesla Meter Unit is a denominator unit with dimensions \\(/m .\\cdot T\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(m^{-1} \\cdot T^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}symbol`),
      literal(`/t⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`T-1.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Tesla Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-M`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Tesla Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${dcterms}description`),
      literal(`Per Tesla Second Unit is a denominator unit with dimensions \\(/s . T\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(/s . T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`/T⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`T-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-T-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Tesla Second Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}expression`),
      literal(`\\(Wb^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}symbol`),
      literal(`/Wb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${qudt}ucumCode`),
      literal(`Wb-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WB`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Weber`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001653439`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA099`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the unit week`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}symbol`),
      literal(`/week`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}ucumCode`),
      literal(`wk-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-WK`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Week`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.307951`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB033`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal value of the unit yard according to the Anglo-American and the Imperial system of units with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000031709792`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB027`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`reciprocal of the unit year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}symbol`),
      literal(`/yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`/a`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`a-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H09`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PER-YR`),
      namedNode(`${rdfs}label`),
      literal(`Reciprocal Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`%/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`%.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Percent per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`%/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`%.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Percent per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`%/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`%.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Percent per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${dcterms}description`),
      literal(`A rate of change in percent over a period of 7 days`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000165343915343915`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${qudt}symbol`),
      literal(`%/wk`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${qudt}ucumCode`),
      literal(`%.wk-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(`${rdfs}label`),
      literal(`Percent per week`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${dcterms}description`),
      literal(`"Percent" is a unit for  'Dimensionless Ratio' expressed as \\(\\%\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Percentage`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Prevalence`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA000`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Percentage?oldid=495284540`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}percent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}symbol`),
      literal(`%`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}ucumCode`),
      literal(`%`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}udunitsCode`),
      literal(`%`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT`),
      namedNode(`${rdfs}label`),
      literal(`Percent`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Percent relative humidity is the ratio of the partial pressure of water vapor to the equilibrium vapor pressure of water at a given temperature, expressed as a percentage.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${qudt}symbol`),
      literal(`%RH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERCENT_RH`),
      namedNode(`${rdfs}label`),
      literal(`Percent Relative Humidity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${dcterms}description`),
      literal(`Relative permeability, denoted by the symbol \\(\\mu _T\\), is the ratio of the permeability of a specific medium to the permeability of free space \\(\\mu _0\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Relative_permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\,T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}symbol`),
      literal(`μₜ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[mu_0]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(`${rdfs}label`),
      literal(`Relative Electromagnetic Permeability`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${dcterms}description`),
      literal(`In multiphase flow in porous media, the relative permeability of a phase is a dimensionless measure of the effective permeability of that phase. It is the ratio of the effective permeability of that phase to the absolute permeability. It can be viewed as an adaptation of Darcy's law to multiphase flow. For two-phase flow in porous media given steady-state conditions, we can write where is the flux, is the pressure drop, is the viscosity.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000125663706`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Relative_permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${qudt}symbol`),
      literal(`kᵣ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(`${rdfs}label`),
      literal(`Relative Permeability`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{relative permittivity}\\) of a material under given conditions reflects the extent to which it concentrates electrostatic lines of flux. In technical terms, it is the ratio of the amount of electrical energy stored in a material by an applied voltage, relative to that stored in a vacuum. Likewise, it is also the ratio of the capacitance of a capacitor using that material as a dielectric, compared to a similar capacitor that has a vacuum as its dielectric. Relative permittivity is a dimensionless number that is in general complex. The imaginary portion of the permittivity corresponds to a phase shift of the polarization P relative to E and leads to the attenuation of electromagnetic waves passing through the medium.</p>
<p>\\(\\epsilon_r(w) = \\frac{\\epsilon(w)}{\\epsilon_O}\\)\\ where \\(\\epsilon_r(w)\\) is the complex frequency-dependent absolute permittivity of the material, and \\(\\epsilon_O\\) is the vacuum permittivity.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000008854187817`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Relative_static_permittivity`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_permittivity?oldid=489664437`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_static_permittivity?oldid=334224492`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.ncert.nic.in/html/learning_basket/electricity/electricity/charges%20&%20fields/absolute_permittivity.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}symbol`),
      literal(`εᵣ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[eps_0]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(`${rdfs}label`),
      literal(`Relative Permittivity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${dcterms}description`),
      literal(`A perm is a unit of permeance or "water vapor transmission" given a certain differential in partial pressures on either side of a material or membrane. The metric perm (not an SI unit) is defined as 1 gram of water vapor per day, per square meter, per millimeter of mercury.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000868127`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Perm_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_Metric`),
      namedNode(`${rdfs}label`),
      literal(`U.S. Perm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${dcterms}description`),
      literal(`A perm is a unit of permeance or "water vapor transmission" given a certain differential in partial pressures on either side of a material or membrane. The U.S. perm is defined as 1 grain of water vapor per hour, per square foot, per inch of mercury.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000572135`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Perm_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PERM_US`),
      namedNode(`${rdfs}label`),
      literal(`U.S. Perm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${dcterms}description`),
      literal(`the negative decadic logarithmus of the concentration of free protons (or hydronium ions) expressed in 1 mol/l.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Acidity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Basicity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}symbol`),
      literal(`pH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pH]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${rdfs}comment`),
      literal(`Unsure about dimensionality of pH; conversion requires a log function not just a multiplier`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PH`),
      namedNode(`${rdfs}label`),
      literal(`Acidity`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${dcterms}description`),
      literal(`A phot (ph) is a photometric unit of illuminance, or luminous flux through an area. It is not an SI unit, but rather is associated with the older centimetre gram second system of units.  Metric dimensions: \\(illuminance = luminous intensity \\times solid angle / length\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Phot`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB255`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Phot?oldid=477198725`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}phot`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}symbol`),
      literal(`ph`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}ucumCode`),
      literal(`ph`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}udunitsCode`),
      literal(`ph`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PHOT`),
      namedNode(`${rdfs}label`),
      literal(`Phot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${dcterms}description`),
      literal(`"Imperial Pint" is an Imperial unit for  'Volume' expressed as \\(pint\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00056826125`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}symbol`),
      literal(`pt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PTI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT`),
      namedNode(`${rdfs}label`),
      literal(`Imperial Pint`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000006577098`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA953`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (UK) (both for fluids and for dry measures) according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`pt{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br].d`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Pint (UK) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001578504`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA954`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (UK) (both for fluids and for dry measures) according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`pt{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Pint (UK) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000009471022`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA955`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (UK) (both for fluids and for dry measures) according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`pt{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Pint (UK) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0005682613`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA956`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (UK) (both for fluids and for dry measures) according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`pt{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pint (UK) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0005682613`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA952`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume (both for fluids and for dry measures) according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}symbol`),
      literal(`pt{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PTI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_UK`),
      namedNode(`${rdfs}label`),
      literal(`Pint (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000547658`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA958`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (US liquid) according to the Anglo-American system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}udunitsCode`),
      literal(`kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Pint (US Liquid) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001314379`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA959`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (US liquid) according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Pint (US Liquid) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000007886275`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA960`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (US liquid) according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Pint (US Liquid) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0004731765`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA961`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume pint (US liquid) according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Pint (US Liquid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${dcterms}description`),
      literal(`"US Liquid Pint" is a unit for  'Liquid Volume' expressed as \\(pt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0004731765`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pt_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}udunitsCode`),
      literal(`pt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PTL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US`),
      namedNode(`${rdfs}label`),
      literal(`US Liquid Pint`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${dcterms}description`),
      literal(`"US Dry Pint" is a C.G.S System unit for  'Dry Volume' expressed as \\(dry_pt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000550610471`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`pt{US Dry}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[dpt_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PTD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(`${rdfs}label`),
      literal(`US Dry Pint`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000105233576`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA940`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (UK) according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`peck{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Peck (UK) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000002525605833`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA941`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (UK) according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`peck{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Peck (UK) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00015153635`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA942`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (UK) according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`peck{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Peck (UK) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.009092181`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA943`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (UK) according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`peck{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_br].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Peck (UK) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.009092181`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA939`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}symbol`),
      literal(`peck{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_UK`),
      namedNode(`${rdfs}label`),
      literal(`Peck (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000101964902`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA944`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (US dry) as dry measure according to the Anglo-American system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`peck{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Peck (US Dry) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000002447157651`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA945`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (US dry) as dry measure according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`peck{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Peck (US Dry) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000146829459067`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA946`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (US dry) as dry measure according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`peck{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Peck (US Dry) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00880976754`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA947`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume peck (US dry) as dry measure according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`peck{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Peck (US Dry) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${dcterms}description`),
      literal(`A peck is an imperial and U.S. customary unit of dry volume, equivalent to 2 gallons or 8 dry quarts or 16 dry pints. Two pecks make a kenning (obsolete), and four pecks make a bushel. In Scotland, the peck was used as a dry measure until the introduction of imperial units as a result of the Weights and Measures Act of 1824. The peck was equal to about 9 litres (in the case of certain crops, such as wheat, peas, beans and meal) and about 13 litres (in the case of barley, oats and malt). A firlot was equal to 4 pecks and the peck was equal to 4 lippies or forpets. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00880976754`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`peck{US Dry}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pk_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}udunitsCode`),
      literal(`pk`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PK_US_DRY`),
      namedNode(`${rdfs}label`),
      literal(`US Peck`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA257`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`CGS unit poise divided by the unit bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}symbol`),
      literal(`P/bar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}ucumCode`),
      literal(`P.bar-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F06`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(`${rdfs}label`),
      literal(`Poise Per Bar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${dcterms}description`),
      literal(`The poise is the unit of dynamic viscosity in the centimetre gram second system of units. It is named after Jean Louis Marie Poiseuille.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Poise`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA255`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Poise?oldid=487835641`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}poise`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}ucumCode`),
      literal(`P`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}POISE`),
      namedNode(`${rdfs}label`),
      literal(`Poise`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${dcterms}description`),
      literal(`Dimensionless unit for concentration. Recommended practice is to use specific units such as \\(ug/l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#section-Derived-Unit-Atoms`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}symbol`),
      literal(`PPB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ppb]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPB`),
      namedNode(`${rdfs}label`),
      literal(`Parts per billion`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`Unit for expansion ratios expressed as parts per million per Kelvin.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(PPM/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`PPM/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`ppm.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Parts Per Million per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${dcterms}description`),
      literal(`Dimensionless unit for concentration. Recommended practice is to use specific units such as \\(ug/l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#section-Derived-Unit-Atoms`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}partsPerMillion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}symbol`),
      literal(`PPM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ppm]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPM`),
      namedNode(`${rdfs}label`),
      literal(`Parts per million`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`‰/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ppth].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Parts per thousand per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${dcterms}description`),
      literal(`Dimensionless unit for concentration. Recommended practice is to use specific units such as \\(ug/l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}abbreviation`),
      literal(`‰`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#section-Derived-Unit-Atoms`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}literal`),
      literal(`‰`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}symbol`),
      literal(`‰`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ppth]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`NX`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${rdfs}label`),
      literal(`Parts per thousand`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTH`),
      namedNode(`${skos}altLabel`),
      literal(`per mil`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`Unit for expansion ratios expressed as parts per ten million per Kelvin.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(PPM/K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`PPM/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Parts Per Ten Million per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${dcterms}description`),
      literal(`Dimensionless unit for concentration. Recommended practice is to use specific units such as \\(ug/l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${qudt}symbol`),
      literal(`PPTM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTM`),
      namedNode(`${rdfs}label`),
      literal(`Parts per Ten Million`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${dcterms}description`),
      literal(`Dimensionless unit for concentration. Recommended practice is to use specific units such as \\(ug/l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://aurora.regenstrief.org/~ucum/ucum.html#section-Derived-Unit-Atoms`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}symbol`),
      literal(`PPTR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pptr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR`),
      namedNode(`${rdfs}label`),
      literal(`Parts per trillion`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${qudt}symbol`),
      literal(`pptr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pptr]{vol}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PPTR_VOL`),
      namedNode(`${rdfs}label`),
      literal(`Parts per trillion by volume`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1129848`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA703`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the composed unit for pressure (pound-force per square inch) and the composed unit for volume flow (cubic inch per second)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`psi⋅in³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi].[cin_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K87`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Psi Cubic Inch Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.894757`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA704`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the composed unit for pressure (pound-force per square inch) and the composed unit for volume flow (litre per second)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`psi⋅L³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi].L.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K88`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Psi Liter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Psi Litre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894.757`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA705`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the composed unit for pressure (pound-force per square inch) and the composed unit for volume flow (cubic metre per second)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`psi⋅m³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi].m3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K89`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`PSI Cubic Meter Per Second`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`PSI Cubic Metre Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA951`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`composed unit for pressure (pound-force per square inch) divided by the composed unit for pressure (pound-force per square inch)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}symbol`),
      literal(`psi/psi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi].[psi]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(`${rdfs}label`),
      literal(`Psi Per Psi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5271.42`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA706`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the composed unit for pressure (pound-force per square inch) and the square inch) and the composed unit for volume flow (cubic yard per second)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`psi⋅yd³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi].[cyd_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K90`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Psi Cubic Yard Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6894.75789`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Pounds of force per square inch, the unit for pressure as a compounded unit pound-force according to the Anglo-American system of units divided by the power of the unit Inch according to the Anglo-American and Imperial system of units by exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}symbol`),
      literal(`psi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}ucumCode`),
      literal(`[psi]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}udunitsCode`),
      literal(`psi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`PS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${rdfs}label`),
      literal(`PSI`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSI`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${dcterms}description`),
      literal(`Practical salinity scale 1978 (PSS-78) is used for ionic content of seawater determined by electrical conductivity. Salinities measured using PSS-78 do not have units, but are approximately scaled to parts-per-thousand for the valid range. The suffix psu or PSU (denoting practical salinity unit) is sometimes added to PSS-78 measurement values. The addition of PSU as a unit after the value is "formally incorrect and strongly discouraged".`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns18}pf0000047932`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${qudt}symbol`),
      literal(`PSU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdfs}label`),
      literal(`Practical salinity unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${unit}PPTH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PSU`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns19}PSU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${dcterms}description`),
      literal(`In typography, a point is the smallest unit of measure, being a subdivision of the larger pica. It is commonly abbreviated as pt. The point has long been the usual unit for measuring font size and leading and other minute items on a printed page.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000254`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB605`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}symbol`),
      literal(`pt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pnt]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PT`),
      namedNode(`${rdfs}label`),
      literal(`Point`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${dcterms}description`),
      literal(`Tonga`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}currencyCode`),
      literal(`TOP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}currencyNumber`),
      literal(`776`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tongan_pa%CA%BBanga`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}expression`),
      literal(`\\(TOP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tongan_paʻanga?oldid=482738012`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Paanga`),
      namedNode(`${rdfs}label`),
      literal(`Pa'anga`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${dcterms}description`),
      literal(`Pakistan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`PKR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`586`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pakistani_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(PKR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pakistani_rupee?oldid=494937873`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PakistanRupee`),
      namedNode(`${rdfs}label`),
      literal(`Pakistan Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}currencyCode`),
      literal(`XPD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}currencyNumber`),
      literal(`964`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}expression`),
      literal(`\\(XPD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_tr]{Pd}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(`${rdfs}label`),
      literal(`Palladium (one Troy ounce)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${dcterms}description`),
      literal(`Macau Special Administrative Region`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}currencyCode`),
      literal(`MOP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}currencyExponent`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}currencyNumber`),
      literal(`446`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pataca`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}expression`),
      literal(`\\(MOP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pataca?oldid=482490442`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pataca`),
      namedNode(`${rdfs}label`),
      literal(`Pataca`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The pebibyte is a standards-based binary multiple (prefix pebi, symbol Pi) of the byte, a unit of digital information storage. The pebibyte unit symbol is PiB. 1 pebibyte =  1125899906842624bytes = 1024 tebibytes The pebibyte is closely related to the petabyte, which is defined as \\(10^{15} bytes = 1,000,000,000,000,000 bytes\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6243314768165359.2088811673338586`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pebibyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA274`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pebibyte?oldid=492685015`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pebi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`PiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PebiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`PebiByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001555174`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB182`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI-conforming unit of mass which comes from the Anglo-American Troy or Apothecaries' Weight System of units according to NIST of 1 pwt = 1.555174 10^3 kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}symbol`),
      literal(`dwt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}ucumCode`),
      literal(`[pwt_tr]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`DWT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pennyweight`),
      namedNode(`${rdfs}label`),
      literal(`Pennyweight`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${dcterms}description`),
      literal(`A petabyte is a unit of information equal to one quadrillion bytes, or 1024 terabytes. The unit symbol for the petabyte is PB. The prefix peta (P) indicates the fifth power to 1000: 1 PB = 1000000000000000B, 1 million gigabytes = 1 thousand terabytes The pebibyte (PiB), using a binary prefix, is the corresponding power of 1024, which is more than \\(12\\% \\)greater (\\(2^{50} bytes = 1,125,899,906,842,624 bytes\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545177444479562.4753378569716654`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Petabyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB187`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Petabyte?oldid=494735969`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Peta`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`PB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`PBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E36`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaBYTE`),
      namedNode(`${rdfs}label`),
      literal(`PetaByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${dcterms}description`),
      literal(`A PetaCoulomb is \\(10^{15} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Peta`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}symbol`),
      literal(`PC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`PC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${rdfs}label`),
      literal(`PetaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB123`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000,000,000,000-fold of the derived SI unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Peta`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}symbol`),
      literal(`PJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`PJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PetaJ`),
      namedNode(`${rdfs}label`),
      literal(`Petajoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${dcterms}description`),
      literal(`Philippines`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`PHP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`608`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Philippine_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(PHP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Philippine_peso?oldid=495411811`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PhilippinePeso`),
      namedNode(`${rdfs}label`),
      literal(`Philippine Peso`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E1L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${qudt}symbol`),
      literal(`pA/(mmol⋅L)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`pA.umol-1.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA-PER-MicroMOL-L`),
      namedNode(`${rdfs}label`),
      literal(`Picoamps per micromole per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA928`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}symbol`),
      literal(`pA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}ucumCode`),
      literal(`pA`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoA`),
      namedNode(`${rdfs}label`),
      literal(`picoampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${dcterms}description`),
      literal(`A PicoCoulomb is \\(10^{-12} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA929`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}symbol`),
      literal(`pC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`pC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${rdfs}label`),
      literal(`PicoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA931`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit farad divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`pF/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`pF.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Picofarad Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Picofarad Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${dcterms}description`),
      literal(`"PicoF" is a common unit of electric capacitance equal to \\(10^{-12} farad\\). This unit was formerly called the micromicrofarad.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Farad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Capacitance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA930`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Farad?oldid=493070876`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}symbol`),
      literal(`pF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`pF`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoFARAD`),
      namedNode(`${rdfs}label`),
      literal(`Picofarad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**12 (trillion) by mass of the measurand in the matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}symbol`),
      literal(`pg/g`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pg.g-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(`${rdfs}label`),
      literal(`Picograms per gram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${dcterms}description`),
      literal(`One part per 10**15 by mass of the measurand in the matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`pg/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pg.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Picograms per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${dcterms}description`),
      literal(`One 10**15 part of the SI standard unit of mass of the measurand per litre volume of matrix..`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`pg/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`pg.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Picofarad Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Picofarad Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Picograms per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${dcterms}description`),
      literal(`One 10**15 part of the SI standard unit of mass of the measurand per millilitre volume of matrix.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}symbol`),
      literal(`pg/mL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${qudt}ucumCode`),
      literal(`pg.mL-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(`${rdfs}label`),
      literal(`Picograms per millilitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${dcterms}description`),
      literal(`10**-12 grams or one 10**-15 of the SI standard unit of mass (kilogram).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}symbol`),
      literal(`pg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoGM`),
      namedNode(`${rdfs}label`),
      literal(`Picograms`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA932`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit henry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}symbol`),
      literal(`pH`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}ucumCode`),
      literal(`pH`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C73`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoH`),
      namedNode(`${rdfs}label`),
      literal(`Picohenry`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the unit litre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}symbol`),
      literal(`pL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}ucumCode`),
      literal(`pL`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${rdfs}label`),
      literal(`Picolitre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoL`),
      namedNode(`${rdfs}label`),
      literal(`Picolitre`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA949`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}symbol`),
      literal(`pM`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${rdfs}label`),
      literal(`Picometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoM`),
      namedNode(`${rdfs}label`),
      literal(`Picometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${dcterms}description`),
      literal(`A change in the quantity of matter of 10^-12 moles in the SI unit of volume scaled by 10^-3 over a period of 86400 seconds.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.L-1.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per litre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${dcterms}description`),
      literal(`A change in the quantity of matter of 10^-12 moles in the SI unit of volume scaled by 10^-3 over a period of 3600 seconds.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/(L⋅hr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.L-1.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L-HR`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per litre per hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/L`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M-1H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/(m⋅W⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.m-1.W-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M-W-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per metre per watt per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000115740740740741`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/(m²⋅day)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.m-2.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M2-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per square metre per day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/(m³⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.m-3.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per cubic metre per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`pmol/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`pmol.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Picomoles per cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA933`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit pascal divided by the 1 000-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}symbol`),
      literal(`pPa/km`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}ucumCode`),
      literal(`pPa.km-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H69`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Picopascal Per Kilometer`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(`${rdfs}label`),
      literal(`Picopascal Per Kilometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA934`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit Siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`pS/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`pS.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Picosiemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Picosiemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA950`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}symbol`),
      literal(`ps`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ps`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoSEC`),
      namedNode(`${rdfs}label`),
      literal(`Picosecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${dcterms}description`),
      literal(`The power (scaled by 10^-12) per SI unit of area (scaled by 10^-4) produced per SI unit of volume (scaled by 10^-3).`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${qudt}symbol`),
      literal(`pW/(cm²⋅L)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${qudt}ucumCode`),
      literal(`pW.cm-2.L-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-CentiM2-L`),
      namedNode(`${rdfs}label`),
      literal(`Picowatts per square centimetre per litre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA936`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit watt divided by the power of the SI base unit metre with the exponent 2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`pW/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`pW.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C76`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Picowatt Per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Picowatt Per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA935`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`0.000000000001-fold of the SI derived unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Pico`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}symbol`),
      literal(`pW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}ucumCode`),
      literal(`pW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C75`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PicoW`),
      namedNode(`${rdfs}label`),
      literal(`Picowatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000000000000000000000000000000000000000000000000000000000261223`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${qudt}symbol`),
      literal(`planckarea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckArea`),
      namedNode(`${rdfs}label`),
      literal(`Planck Area`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the Planck charge, denoted by, is one of the base units in the system of natural units called Planck units. It is a quantity of electric charge defined in terms of fundamental physical constants. The Planck charge is defined as: coulombs, where: is the speed of light in the vacuum, is Planck's constant, is the reduced Planck constant, is the permittivity of free space is the elementary charge = (137.03599911) is the fine structure constant. The Planck charge is times greater than the elementary charge \\(e\\) carried by an electron.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000187554587`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(Q_P\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}symbol`),
      literal(`planckcharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCharge`),
      namedNode(`${rdfs}label`),
      literal(`Planck Charge`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${dcterms}description`),
      literal(`The Planck current is the unit of electric current, denoted by IP, in the system of natural units known as Planck units. \\(\\approx 3.479 \\times 10 A\\), where:  the Planck time is the permittivity in vacuum and the reduced Planck constant G is the gravitational constant c is the speed of light in vacuum. The Planck current is that current which, in a conductor, carries a Planck charge in Planck time. Alternatively, the Planck current is that constant current which, if maintained in two straight parallel conductors of infinite length and negligible circular cross-section, and placed a Planck length apart in vacuum, would produce between these conductors a force equal to a Planck force per Planck length.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`34789000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_current`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_current?oldid=493640689`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`planckcurrent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Planck Current`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`133177400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${qudt}symbol`),
      literal(`planckcurrentdensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(`${rdfs}label`),
      literal(`Planck Current Density`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${dcterms}description`),
      literal(`The Planck density is the unit of density, denoted by \\(\\rho_P\\), in the system of natural units known as Planck units. \\(1\\  \\rho_P \\ is \\approx 5.155 \\times 10^{96} kg/m^3\\). This is a unit which is very large, about equivalent to \\(10^{23}\\) solar masses squeezed into the space of a single atomic nucleus. At one unit of Planck time after the Big Bang, the mass density of the universe is thought to have been approximately one unit of Planck density.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5155000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_density`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_density?oldid=493642128`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${qudt}symbol`),
      literal(`planckdensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckDensity`),
      namedNode(`${rdfs}label`),
      literal(`Planck Density`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the unit of energy in the system of natural units known as Planck units is called the Planck energy, denoted by \\(E_P\\). \\(E_P\\) is a derived, as opposed to basic, Planck unit. An equivalent definition is:\\(E_P = \\hbar / T_P\\) where \\(T_P\\) is the Planck time. Also: \\(E_P = m_P c^2\\) where \\(m_P\\) is the Planck mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1956100000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_energy?oldid=493639955`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_\\rho = \\sqrt{\\frac{ \\hbar c^5}{G}} \\approx 1.936 \\times 10^9 J \\approx 1.22 \\times 10^{28} eV \\approx 0.5433 MWh\\), where  \\(c\\) is the speed of light in a vacuum, \\(\\hbar\\) is the reduced Planck's constant, and \\(G\\) is the gravitational constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Eᵨ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Planck Energy`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${dcterms}description`),
      literal(`Planck force is the derived unit of force resulting from the definition of the base Planck units for time, length, and mass. It is equal to the natural unit of momentum divided by the natural unit of time.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`121027000000000000000000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_force`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_force?oldid=493643031`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${qudt}symbol`),
      literal(`planckforce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckForce`),
      namedNode(`${rdfs}label`),
      literal(`Planck Force`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`18548700000000000000000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_angular_frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_angular_frequency?oldid=493641308`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${qudt}symbol`),
      literal(`planckfrequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency`),
      namedNode(`${rdfs}label`),
      literal(`Planck Frequency`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`18548700000000000000000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_angular_frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${qudt}symbol`),
      literal(`planckangularfrequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(`${rdfs}label`),
      literal(`Planck Angular Frequency`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${dcterms}description`),
      literal(`The Planck impedance is the unit of electrical resistance, denoted by ZP, in the system of natural units known as Planck units. The Planck impedance is directly coupled to the impedance of free space, Z0, and differs in value from Z0 only by a factor of \\(4\\pi\\). If the Planck charge were instead defined to normalize the permittivity of free space, \\(\\epsilon_0\\), rather than the Coulomb constant, \\(1/(4\\pi\\epsilon_0)\\), then the Planck impedance would be identical to the characteristic impedance of free space.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`29.9792458`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z_P = \\frac{V_P}{I_P}= \\frac{1}{4\\pi\\epsilon_0c}=\\frac{\\mu_oc}{4\\pi}=\\frac{Z_0}{4\\pi}=29.9792458\\Omega\\)\\where \\(V_P\\) is the Planck voltage, \\(I_P\\) is the Planck current, \\(c\\) is the speed of light in a vacuum, \\(\\epsilon_0\\) is the permittivity of free space, \\(\\mu_0\\) is the permeability of free space, and \\(Z_0\\) is the impedance of free space.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${qudt}symbol`),
      literal(`Zₚ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Planck Impedance`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the Planck length, denoted \\(\\ell_P\\), is a unit of length, equal to \\(1.616199(97)×10^{-35}\\) metres. It is a base unit in the system of Planck units. The Planck length can be defined from three fundamental physical constants: the speed of light in a vacuum, Planck's constant, and the gravitational constant. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000000000001616252`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_length`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_length?oldid=495093067`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\ell_P = \\sqrt{\\frac{ \\hbar G}{c^3}} \\approx 1.616199(97)) \\times 10^{-35} m\\), where \\(c\\) is the speed of light in a vacuum, \\(\\hbar\\) is the reduced Planck's constant, and \\(G\\) is the gravitational constant. The two digits enclosed by parentheses are the estimated standard error associated with the reported numerical value.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\ell_P\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}symbol`),
      literal(`plancklength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckLength`),
      namedNode(`${rdfs}label`),
      literal(`Planck Length`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the Planck mass, denoted by \\(m_P\\), is the unit of mass in the system of natural units known as Planck units. It is defined so that \\(\\approx  1.2209 \\times 10 GeV/c_0 = 2.17651(13) \\times 10 kg\\), (or \\(21.7651 \\mu g\\)), where \\(c_0\\) is the speed of light in a vacuum, \\(G\\) is the gravitational constant, and \\(\\hbar\\) is the reduced Planck constant. Particle physicists and cosmologists often use the reduced Planck mass, which is \\(\\approx  4.341 \\times 10 kg = 2.435  \\times 10 GeV/c\\). The added factor of \\(1/{\\sqrt{8\\pi}}\\) simplifies a number of equations in general relativity. Quantum effects are typified by the magnitude of Planck's constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000217644`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_mass?oldid=493648632`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(m_P = \\sqrt{\\frac{ \\hbar c^3}{G}} \\approx 1.2209 \\times 10^{19} GeV/c^2 = 2.17651(13) \\times 10^{-8}\\), where \\(c\\) is the speed of light in a vacuum, \\(\\hbar\\) is the reduced Planck's constant, and \\(G\\) is the gravitational constant. The two digits enclosed by parentheses are the estimated standard error associated with the reported numerical value.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(m_P\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}symbol`),
      literal(`planckmass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMass`),
      namedNode(`${rdfs}label`),
      literal(`Planck Mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${dcterms}description`),
      literal(`Planck momentum is the unit of momentum in the system of natural units known as Planck units. It has no commonly used symbol of its own, but can be denoted by, where is the Planck mass and is the speed of light in a vacuum. Then where is the reduced Planck's constant, is the Planck length, is the gravitational constant. In SI units Planck momentum is \\(\\approx 6.5 kg m/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.52485`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_momentum?oldid=493644981`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${qudt}symbol`),
      literal(`planckmomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Planck Momentum`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${dcterms}description`),
      literal(`The Planck energy divided by the Planck time is the Planck power \\(P_p \\), equal to about \\(3.62831 \\times 10^{52} W\\). This is an extremely large unit; even gamma-ray bursts, the most luminous phenomena known, have output on the order of \\(1 \\times 10^{45} W\\), less than one ten-millionth of the Planck power.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`36283100000000000000000000000000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_power`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_power?oldid=493642483`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(P_p = {\\frac{ c^5}{G}}\\), where \\(c\\) is the speed of light in a vacuum, and \\(G\\) is the gravitational constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${qudt}symbol`),
      literal(`planckpower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPower`),
      namedNode(`${rdfs}label`),
      literal(`Planck Power`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`463309000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_pressure?oldid=493640883`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${qudt}symbol`),
      literal(`planckpressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckPressure`),
      namedNode(`${rdfs}label`),
      literal(`Planck Pressure`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`141678400000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`plancktemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTemperature`),
      namedNode(`${rdfs}label`),
      literal(`PlanckTemperature`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${dcterms}description`),
      literal(`In physics, the Planck time, denoted by \(t_P\), is the unit of time in the system of natural units known as Planck units. It is the time required for light to travel, in a vacuum, a distance of 1 Planck length. The unit is named after Max Planck, who was the first to propose it. \( \\ t_P \equiv  \sqrt{\frac{\hbar G}{c^5}} \approx 5.39106(32) \times 10^{-44} s\) where, \(c\) is the speed of light in a vacuum, \(\hbar\) is the reduced Planck's constant (defined as \(\hbar = \frac{h}{2 \pi}\) and \(G\) is the gravitational constant. The two digits between parentheses denote the standard error of the estimated value.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000000000000000000000000000000000000539124`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Planck_time`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Planck_time?oldid=495362103`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Planck_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(t_P\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}symbol`),
      literal(`tₚ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckTime`),
      namedNode(`${rdfs}label`),
      literal(`Planck Time`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1042950000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${qudt}symbol`),
      literal(`Vₚ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolt`),
      namedNode(`${rdfs}label`),
      literal(`Planck Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000422419`, namedNode(`${xsd}double`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${qudt}symbol`),
      literal(`l³ₚ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PlanckVolume`),
      namedNode(`${rdfs}label`),
      literal(`Planck Volume`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}currencyCode`),
      literal(`XPT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}currencyNumber`),
      literal(`962`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}expression`),
      literal(`\\(XPT\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_tr]{Pt}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(`${rdfs}label`),
      literal(`Platinum (one Troy ounce)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${dcterms}description`),
      literal(`United Kingdom`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}currencyCode`),
      literal(`GBP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}currencyNumber`),
      literal(`826`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pound_sterling`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}expression`),
      literal(`\\(GBP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pound_sterling?oldid=495524329`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}poundSterling`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}PoundSterling`),
      namedNode(`${rdfs}label`),
      literal(`Pound Sterling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${dcterms}description`),
      literal(`Botswana`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}currencyCode`),
      literal(`BWP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}currencyNumber`),
      literal(`072`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pula`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}expression`),
      literal(`\\(BWP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pula?oldid=495207177`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Pula`),
      namedNode(`${rdfs}label`),
      literal(`Pula`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000131542`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA710`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume quart (UK liquid) for fluids according to the Imperial system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`qt{UK}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_br].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Quart (UK Liquid) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000003157007`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA711`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume quart (UK liquid) for fluids according to the Imperial system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`qt{UK}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_br].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Quart (UK Liquid) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001894205`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA712`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume quart (UK liquid) for fluids according to the Imperial system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`qt{UK}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_br].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Quart (UK Liquid) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0011365225`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA713`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume quart (UK liquid) for fluids according to the Imperial system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`qt{UK}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_br].h-1.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K97`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Quart (UK Liquid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0011365225`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA963`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the volume for fluids according to the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}symbol`),
      literal(`qt{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`QTI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_UK`),
      namedNode(`${rdfs}label`),
      literal(`Quart (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001095316`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA714`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit fo the volume quart (US liquid) for fluids according to the Anglo-American system of units divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`qt{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_us].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Quart (US Liquid) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000262875833`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA715`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit fo the volume quart (US liquid) for fluids according to the Anglo-American system of units divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`qt{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_us].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`K99`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Quart (US Liquid) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00001577255`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA716`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit fo the volume quart (US liquid) for fluids according to the Anglo-American system of units divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`qt{US}/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_us].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Quart (US Liquid) Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000946353`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA717`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit fo the volume quart (US liquid) for fluids according to the Anglo-American system of units divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`qt{US}/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_us].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Quart (US Liquid) Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${dcterms}description`),
      literal(`"US Liquid Quart" is a unit for  'Liquid Volume' expressed as \\(qt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000946353`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}symbol`),
      literal(`qt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[qt_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`QTL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US`),
      namedNode(`${rdfs}label`),
      literal(`US Liquid Quart`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${dcterms}description`),
      literal(`"US Dry Quart" is a unit for  'Dry Volume' expressed as \\(dry_qt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.001101220942715`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DryVolume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}symbol`),
      literal(`qt{US Dry}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[dqt_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`QTD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QT_US_DRY`),
      namedNode(`${rdfs}label`),
      literal(`US Dry Quart`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${dcterms}description`),
      literal(`A quad is a unit of energy equal to \\(10 BTU\\), or \\(1.055 \\times \\SI{10}{\\joule}\\), which is \\(1.055 exajoule\\) or \\(EJ\\) in SI units. The unit is used by the U.S. Department of Energy in discussing world and national energy budgets. Some common types of an energy carrier approximately equal 1 quad are: 8,007,000,000 Gallons (US) of gasoline 293,083,000,000 Kilowatt-hours (kWh) 36,000,000 Tonnes of coal 970,434,000,000 Cubic feet of natural gas 5,996,000,000 UK gallons of diesel oil 25,200,000 Tonnes of oil 252,000,000 tonnes of TNT or five times the energy of the Tsar Bomba nuclear test.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1055000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Quad`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quad?oldid=492086827`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}quad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}symbol`),
      literal(`quad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QUAD`),
      namedNode(`${rdfs}label`),
      literal(`Quad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${dcterms}description`),
      literal(`Qatar`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}currencyCode`),
      literal(`QAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}currencyNumber`),
      literal(`634`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Qatari_riyal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}expression`),
      literal(`\\(QAR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Qatari_riyal?oldid=491747452`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}QatariRial`),
      namedNode(`${rdfs}label`),
      literal(`Qatari Rial`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`12.70058636`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB202`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass according to the avoirdupois system of units: 1 qr. l. = 28 lb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}symbol`),
      literal(`quarter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`28.[lb_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`QTR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quarter_UK`),
      namedNode(`${rdfs}label`),
      literal(`Quarter (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${dcterms}description`),
      literal(`Guatemala`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}currencyCode`),
      literal(`GTQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}currencyNumber`),
      literal(`320`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Quetzal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}expression`),
      literal(`\\(GTQ\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quetzal?oldid=489813522`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Quetzal`),
      namedNode(`${rdfs}label`),
      literal(`Quetzal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${dcterms}description`),
      literal(`Not to be confused with roentgen equivalent man or roentgen equivalent physical. The roentgen (symbol R) is an obsolete unit of measurement for the kerma of X-rays and gamma rays up to 3 MeV.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000258`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Roentgen`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA275`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Roentgen?oldid=491213233`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}ucumCode`),
      literal(`R`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}udunitsCode`),
      literal(`R`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}R`),
      namedNode(`${rdfs}label`),
      literal(`Roentgen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad m^2 / kg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB162`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`rad⋅m²/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.m2.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C83`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Radian Square Meter per Kilogram`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Radian Square Metre per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad m^2 / mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB161`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`rad⋅m²/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.m-2.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C82`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Radian Square Meter per Mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Radian Square Metre per Mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Radian per Hour" is a unit for  'Angular Velocity' expressed as \\(rad/h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`rad/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Radian per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA967`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`rad/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Radian per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Radian per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`Radian Per Minute (rad/min) is a unit in the category of Angular velocity. It is also known as radians per minute, radian/minute. Radian Per Minute (rad/min) has a dimension of aT-1 where T is time. It can be converted to the corresponding standard SI unit rad/s by multiplying its value by a factor of 0.0166666666667. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`60.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`rad/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Radian per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`Angular acceleration is the rate of change of angular velocity. In SI units, it is measured in radians per Square second (\\(rad/s^2\\)), and is usually denoted by the Greek letter \\(\\alpha\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad/s2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA969`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`rad/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad/s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2B`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Radian per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Radian per Second" is the SI unit of rotational speed (angular velocity), and, also the unit of angular frequency. The radian per second is defined as the change in the orientation of an object, in radians, every second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(rad/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA968`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`rad/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad/s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`2A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`radian per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${dcterms}description`),
      literal(`The radian is the standard unit of angular measure, used in many areas of mathematics. It describes the plane angle subtended by a circular arc as the length of the arc divided by the radius of the arc. In the absence of any symbol radians are assumed, and when degrees are meant the symbol \\(^{\\ circ}\\) is used. `, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Radian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}guidance`),
      literal(`<p>See NIST section <a href="http://physics.nist.gov/Pubs/SP811/sec07.html#7.10">SP811 section7.10</a></p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA966`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radian?oldid=492309312`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}radian`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The radian is the standard unit of angular measure, used in many areas of mathematics. It describes the plane angle subtended by a circular arc as the length of the arc divided by the radius of the arc. The unit was formerly a SI supplementary unit, but this category was abolished in 1995 and the radian is now considered a SI derived unit. The SI unit of solid angle measurement is the steradian.  The radian is represented by the symbol "rad" or, more rarely, by the superscript c (for "circular measure"). For example, an angle of 1.2 radians would be written as "1.2 rad" or "1.2c" (the second symbol is often mistaken for a degree: "1.2u00b0"). As the ratio of two lengths, the radian is a "pure number" that needs no unit symbol, and in mathematical writing the symbol "rad" is almost always omitted. In the absence of any symbol radians are assumed, and when degrees are meant the symbol u00b0 is used. [Wikipedia]`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}symbol`),
      literal(`rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}ucumCode`),
      literal(`rad`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}udunitsCode`),
      literal(`rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdfs}comment`),
      literal(`The radian and steradian are special names for the number one that may be used to convey information about the quantity concerned. In practice the symbols rad and sr are used where appropriate, but the symbol for the derived unit one is generally omitted in specifying the values of dimensionless quantities.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${rdfs}label`),
      literal(`Radian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${dcterms}description`),
      literal(`The \\(rad\\) is a deprecated unit of absorbed radiation dose, defined as \\(1 rad = 0.01\\,Gy = 0.01 J/kg\\). It was originally defined in CGS units in 1953 as the dose causing 100 ergs of energy to be absorbed by one gram of matter. It has been replaced by the gray in most of the world. A related unit, the \\(roentgen\\), was formerly used to quantify the number of rad deposited into a target when it was exposed to radiation. The F-factor can used to convert between rad and roentgens. The material absorbing the radiation can be human tissue or silicon microchips or any other medium (for example, air, water, lead shielding, etc.).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/RAD`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/RAD?oldid=493716376`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}symbol`),
      literal(`rad`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}ucumCode`),
      literal(`RAD`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C80`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAD_R`),
      namedNode(`${rdfs}label`),
      literal(`Rad`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${dcterms}description`),
      literal(`dcterms:description "\\(\\textbf{Rayl}\\) is one of two units of specific acoustic impedance. When sound waves pass through any physical substance the pressure of the waves causes the particles of the substance to move. The sound specific impedance is the ratio between the sound pressure and the particle velocity it produces. The specific impedance is one rayl if unit pressure produces unit velocity. It is defined as follows: \\(1\\; rayl = 1 dyn\\cdot s\\cdot cm^{-3}\\) Or in SI as: \\(1 \\; rayl = 10^{-1}Pa\\cdot s\\cdot m^{-1}\\), which equals \\(10\\,N \\cdot s\\cdot m^{-3}\\)."""^^qudt:LatexString ;`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Rayl`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rayl?oldid=433570842`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}symbol`),
      literal(`rayl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RAYL`),
      namedNode(`${rdfs}label`),
      literal(`Rayl`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${dcterms}description`),
      literal(`A Rem is a deprecated unit used to measure the biological effects of ionizing radiation. The rem is defined as equal to 0.01 sievert, which is the more commonly used unit outside of the United States. Equivalent dose, effective dose, and committed dose can all be measured in units of rem. These quantities are products of the absorbed dose in rads and weighting factors. These factors must be selected for each exposure situation; there is no universally applicable conversion constant from rad to rem. A rem is a large dose of radiation, so the millirem (mrem), which is one thousandth of a rem, is often used for the dosages commonly encountered, such as the amount of radiation received from medical x-rays and background sources.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.01`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Roentgen_equivalent_man`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}rem`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}symbol`),
      literal(`rem`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}ucumCode`),
      literal(`REM`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REM`),
      namedNode(`${rdfs}label`),
      literal(`Rem`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`"Revolution per Hour" is a unit for  'Angular Velocity' expressed as \\(rev/h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00174532925`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(rev/h\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`rev/h`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Revolution per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Revolution per Minute" is a unit for  'Angular Velocity' expressed as \\(rev/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.104719755`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(rev/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB231`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`rev/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Revolution per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${dcterms}description`),
      literal(`"Revolution per Square Second" is a C.G.S System unit for  'Angular Acceleration' expressed as \\(rev-per-s^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.28318531`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(rev/s2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`rev/s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.s-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Revolution per Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Revolution per Second" is a unit for  'Angular Velocity' expressed as \\(rev/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.28318531`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(rev/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`rev/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`RPS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Revolution per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${dcterms}description`),
      literal(`"Revolution" is a unit for  'Plane Angle' expressed as \\(rev\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.28318531`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Revolution`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Angle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB206`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Revolution?oldid=494110330`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}revolution`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}symbol`),
      literal(`rev`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}ucumCode`),
      literal(`{#}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}REV`),
      namedNode(`${rdfs}label`),
      literal(`Revolution`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${dcterms}description`),
      literal(`A unit of distance equal to 5.5 yards (16 feet 6 inches).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5.02921`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Rod`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}expression`),
      literal(`\\(rd\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA970`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rod?oldid=492590086`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}symbol`),
      literal(`rod`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}ucumCode`),
      literal(`[rd_br]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ROD`),
      namedNode(`${rdfs}label`),
      literal(`Rod`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://learn.gencore.bio.nyu.edu/metgenomics/shotgun-metagenomics/functional-analysis/`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`RPK (Reads Per Kilobases) are obtained by dividing read counts by gene lengths (expressed in kilo-nucleotides).`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${qudt}symbol`),
      literal(`RPK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${rdfs}label`),
      literal(`Reads Per Kilobase`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RPK`),
      namedNode(`${skos}altLabel`),
      literal(`RPK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${dcterms}description`),
      literal(`The register ton is a unit of volume used for the cargo capacity of a ship, defined as 100 cubic feet (roughly 2.83 cubic metres).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`2.8316846592`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Tonnage#Tonnage_measurements`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}symbol`),
      literal(`RT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}ucumCode`),
      literal(`100.[cft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M70`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${rdfs}label`),
      literal(`Register Ton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RT`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${unit}GT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${dcterms}description`),
      literal(`Cambodia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}currencyCode`),
      literal(`KHR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}currencyNumber`),
      literal(`116`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Riel`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}expression`),
      literal(`\\(KHR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Riel?oldid=473309240`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Riel`),
      namedNode(`${rdfs}label`),
      literal(`Riel`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${dcterms}description`),
      literal(`Romania`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}currencyCode`),
      literal(`RON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}currencyNumber`),
      literal(`946`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}expression`),
      literal(`\\(RON\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(`${rdfs}label`),
      literal(`Romanian New Leu`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${dcterms}description`),
      literal(`Maldives`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}currencyCode`),
      literal(`MVR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}currencyNumber`),
      literal(`462`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Maldivian_rufiyaa`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}expression`),
      literal(`\\(MVR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Maldivian_rufiyaa?oldid=491578728`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rufiyaa`),
      namedNode(`${rdfs}label`),
      literal(`Rufiyaa`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${dcterms}description`),
      literal(`Indonesia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}currencyCode`),
      literal(`IDR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}currencyNumber`),
      literal(`360`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Indonesian_rupiah`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}expression`),
      literal(`\\(IDR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Indonesian_rupiah?oldid=489729458`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Rupiah`),
      namedNode(`${rdfs}label`),
      literal(`Rupiah`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${dcterms}description`),
      literal(`Russia, Abkhazia, South Ossetia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}currencyCode`),
      literal(`RUB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}currencyNumber`),
      literal(`643`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Russian_ruble`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}expression`),
      literal(`\\(RUB\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Russian_ruble?oldid=494336467`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RussianRuble`),
      namedNode(`${rdfs}label`),
      literal(`Russian Ruble`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${dcterms}description`),
      literal(`Rwanda`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`RWF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`646`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Rwandan_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(RWF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rwandan_franc?oldid=489727903`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}RwandaFranc`),
      namedNode(`${rdfs}label`),
      literal(`Rwanda Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}expression`),
      literal(`\\(s-m2-per-mol\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA280`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}symbol`),
      literal(`S⋅m²/mol`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}ucumCode`),
      literal(`S.m2.mol-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Square meter per mole`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Square metre per mole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA278`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit Siemens divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`S/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`S.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(s-per-m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA279`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit siemens divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`S/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`S.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`S/m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D10`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Siemens Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Siemens}\\) is the SI unit of electric conductance, susceptance, and admittance. The most important property of a conductor is the amount of current it will carry when a voltage is applied. Current flow is opposed by resistance in all circuits, and by also by reactance and impedance in alternating current circuits. Conductance, susceptance, and admittance are the inverses of resistance, reactance, and impedance, respectively. To measure these properties, the siemens is the reciprocal of the ohm. In other words, the conductance, susceptance, or admittance, in siemens, is simply 1 divided by the resistance, reactance or impedance, respectively, in ohms. The unit is named for the German electrical engineer Werner von Siemens (1816-1892). \\(\\  \\text{Siemens}\\equiv\\frac{\\text{A}}{\\text{V}}\\equiv\\frac{\\text{amp}}{\\text{volt}}\\equiv\\frac{\\text{F}}{\\text {s}}\\equiv\\frac{\\text{farad}}{\\text{second}}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MHO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Conductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA277`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Siemens_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}siemens`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`A/V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}ucumCode`),
      literal(`S`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}udunitsCode`),
      literal(`S`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`SIE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${rdfs}label`),
      literal(`Siemens`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MHO`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The number of discrete samples of some thing per second.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(sample-per-sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`sample/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Sample per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Second Square Foot" is an Imperial unit for  'Area Time' expressed as \\(s-ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.09290304`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(s-ft^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`s⋅ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`s.[ft_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`s.[sft_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Second Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`s.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Seconds per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}expression`),
      literal(`\\(sec/rad-m^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB352`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}symbol`),
      literal(`s/rad⋅m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`s.rad-1.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q22`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${rdfs}label`),
      literal(`Second per Radian Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(`${rdfs}label`),
      literal(`Second per Radian Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${dcterms}description`),
      literal(`"Square Second" is a unit for  'Square Time' expressed as \\(s^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}expression`),
      literal(`\\(s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}symbol`),
      literal(`s²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${qudt}ucumCode`),
      literal(`s2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC2`),
      namedNode(`${rdfs}label`),
      literal(`Square Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${dcterms}description`),
      literal(`The \\(Second\\) (symbol: \\(s\\)) is the base unit of time in the International System of Units (SI) and is also a unit of time in other systems of measurement. Between the years1000 (when al-Biruni used seconds) and 1960 the second was defined as \\(1/86400\\) of a mean solar day (that definition still applies in some astronomical and legal contexts). Between 1960 and 1967, it was defined in terms of the period of the Earth's orbit around the Sun in 1900, but it is now defined more precisely in atomic terms.
Under the International System of Units (via the International Committee for Weights and Measures, or CIPM), since 1967 the second has been defined as the duration of \\({9192631770}\\) periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the caesium 133 atom.In 1997 CIPM added that the periods would be defined for a caesium atom at rest, and approaching the theoretical temperature of absolute zero, and in 1999, it included corrections from ambient radiation.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Second`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Period`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA972`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAD722`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Second?oldid=495241006`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}second-Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}udunitsCode`),
      literal(`s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SEC`),
      namedNode(`${rdfs}label`),
      literal(`Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${dcterms}description`),
      literal(`A shake is an informal unit of time equal to 10 nanoseconds. It has applications in nuclear physics, helping to conveniently express the timing of various events in a nuclear explosion. The typical time required for one step in the chain reaction (i.e. the typical time for each neutron to cause a fission event which releases more neutrons) is of order 1 shake, and the chain reaction is typically complete by 50 to 100 shakes.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Shake`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB226`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Shake?oldid=494796779`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}shake`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}symbol`),
      literal(`shake`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.ns`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SH`),
      namedNode(`${rdfs}label`),
      literal(`Shake`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The "Shannon per Second" is a unit of information rate.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(Sh/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB346`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ban_(information)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`Sh/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q17`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Shannon per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${dcterms}description`),
      literal(`The "Shannon" is a unit of information.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.69314718055994530941723212145818`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}expression`),
      literal(`\\(Sh\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB343`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ban_(information)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31898`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}shannon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}symbol`),
      literal(`Sh`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q14`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SHANNON`),
      namedNode(`${rdfs}label`),
      literal(`Shannon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00016891087963`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA979`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit slug for mass according to an English engineering system divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`slug/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L63`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Slug Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Slug per Foot Second} is a unit for  'Dynamic Viscosity' expressed as \\(slug/(ft-s)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`47.8802591863517`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(slug/(ft-s)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA980`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`slug/(ft⋅s)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L64`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Slug per Foot Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`"Slug per Square Foot" is an Imperial unit for  'Mass Per Area' expressed as \\(slug/ft^{2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`157.08746452215124`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(slug/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`slug/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Slug per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${dcterms}description`),
      literal(`"Slug per Cubic Foot" is an Imperial unit for  'Density' expressed as \\(slug/ft^{3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`515.3788206107324`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}expression`),
      literal(`\\(slug/ft^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA981`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}symbol`),
      literal(`slug/ft³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L65`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(`${rdfs}label`),
      literal(`Slug per Cubic Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${dcterms}description`),
      literal(`"Slug per Foot" is an Imperial unit for  'Mass Per Length' expressed as \\(slug/ft\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`47.8802591863517`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}expression`),
      literal(`\\(slug/ft\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}symbol`),
      literal(`slug/ft`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(`${rdfs}label`),
      literal(`Slug per Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.004053861111111`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA982`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit slug for mass slug according to the English engineering system divided by the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`slug/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L66`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Slug Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.243231666666667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA983`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit slug for the mass according to the English engineering system divided by the unit minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`slug/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L67`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Slug Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`"Slug per Second" is an Imperial unit for  'Mass Per Time' expressed as \\(slug/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.593903`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(slug/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA984`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`slug/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L68`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Slug per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${dcterms}description`),
      literal(`The slug is a unit of mass associated with Imperial units. It is a mass that accelerates by \\(1 ft/s\\) when a force of one pound-force (\\(lbF\\)) is exerted on it. With standard gravity \\(gc = 9.80665 m/s\\), the international foot of \\(0.3048 m\\) and the avoirdupois pound of \\(0.45359237 kg\\), one slug therefore has a mass of approximately \\(32.17405 lbm\\) or \\(14.593903 kg\\). At the surface of the Earth, an object with a mass of 1 slug exerts a force of about \\(32.17 lbF\\) or \\(143 N\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`14.593903`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Slug`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA978`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Slug?oldid=495010998`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}slug`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}symbol`),
      literal(`slug`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`F13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SLUG`),
      namedNode(`${rdfs}label`),
      literal(`Slug`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${dcterms}description`),
      literal(`The steradian (symbol: sr) is the SI unit of solid angle. It is used to describe two-dimensional angular spans in three-dimensional space, analogous to the way in which the radian describes angles in a plane. The radian and steradian are special names for the number one that may be used to convey information about the quantity concerned. In practice the symbols rad and sr are used where appropriate, but the symbol for the derived unit one is generally omitted in specifying the values of dimensionless quantities.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Steradian`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA986`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Steradian?oldid=494317847`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}steradian`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}symbol`),
      literal(`sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`sr`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}udunitsCode`),
      literal(`sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D27`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SR`),
      namedNode(`${rdfs}label`),
      literal(`Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Stokes (St)}\\) is a unit in the category of Kinematic viscosity. This unit is commonly used in the cgs unit system. Stokes (St) has a dimension of \\(L^2T^{-1}\\) where \\(L\\) is length, and \\(T\\) is time. It can be converted to the corresponding standard SI unit \\(m^2/s\\) by multiplying its value by a factor of 0.0001.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Stokes`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA281`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stokes?oldid=426159512`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--kinematic_viscosity--stokes.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\((cm^2/s\\))`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}stokes`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}symbol`),
      literal(`St`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}ucumCode`),
      literal(`St`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}udunitsCode`),
      literal(`St`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`91`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ST`),
      namedNode(`${rdfs}label`),
      literal(`Stokes`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${dcterms}description`),
      literal(`\\(The \\textit{stilb (sb)} is the CGS unit of luminance for objects that are not self-luminous. It is equal to one candela per square centimeter or 10 nits (candelas per square meter). The name was coined by the French physicist A. Blondel around 1920. It comes from the Greek word stilbein meaning 'to glitter'. It was in common use in Europe up to World War I. In North America self-explanatory terms such as candle per square inch and candle per square meter were more common. The unit has since largely been replaced by the SI unit: candela per square meter.\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Stilb`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Luminance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB260`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stilb?oldid=375748497`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}stilb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}symbol`),
      literal(`sb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}ucumCode`),
      literal(`sb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}udunitsCode`),
      literal(`sb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STILB`),
      namedNode(`${rdfs}label`),
      literal(`Stilb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${dcterms}description`),
      literal(`The stere is a unit of volume in the original metric system equal to one cubic metre.  The stere is typically used for measuring large quantities of firewood or other cut wood, while the cubic meter is used for uncut wood. It is not part of the modern metric system (SI). In Dutch there's also a kuub, short for kubieke meter which is similar but different.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/St%C3%A8re`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA987`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stère?oldid=393570287`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}stere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}symbol`),
      literal(`st`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}ucumCode`),
      literal(`st`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G26`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}STR`),
      namedNode(`${rdfs}label`),
      literal(`Stere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\chi_{\\text{e}} = \\frac{{\\mathbf P}}{\\varepsilon_0{\\mathbf E}}`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Electric susceptibility is a dimensionless proportionality constant that indicates the degree of polarization of a dielectric material in response to an applied electric field. Here P = epsilon_0 * chi_e * E. Where epsilon_0 is the electric permittivity of free space (electric constant), P is the polarization density of the material chi_e is the electric susceptibility and E is the electric field.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${qudt}symbol`),
      literal(`χ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(`${rdfs}label`),
      literal(`Electric Susceptibility Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\chi_\\text{v} = \\frac{\\mathbf{M}}{\\mathbf{H}}`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Magnetic susceptibility is a dimensionless proportionality constant that indicates the degree of magnetization of a material in response to an applied magnetic field. Here M = chi * H. Where M is the magnetization of the material (the magnetic dipole moment per unit volume), measured in amperes per meter, and H is the magnetic field strength, also measured in amperes per meter. Chi is therefore a dimensionless quantity.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${qudt}symbol`),
      literal(`χ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Susceptibility Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${dcterms}description`),
      literal(`Although the sievert has the same dimensions as the gray (i.e. joules per kilogram), it measures a different quantity. To avoid any risk of confusion between the absorbed dose and the equivalent dose, the corresponding special units, namely the gray instead of the joule per kilogram for absorbed dose and the sievert instead of the joule per kilogram for the dose equivalent, should be used.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sievert`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA284`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sievert?oldid=495474333`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1284`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}sievert`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`J/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}symbol`),
      literal(`Sv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}ucumCode`),
      literal(`Sv`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Sv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SV`),
      namedNode(`${rdfs}label`),
      literal(`Sievert`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${dcterms}description`),
      literal(`The CGS electromagnetic unit of conductance; one absiemen is the conductance at which a potential of one abvolt forces a current of one abampere; equal to \\(10^{9}\\) siemens. One siemen is the conductance at which a potential of one volt forces a current of one ampere and named for Karl Wilhem Siemens.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://wordinfo.info/unit/4266`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`aS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`GS`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Absiemen`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${dcterms}description`),
      literal(`The unit of conductance, admittance, and susceptance in the centimeter-gram-second electrostatic system of units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000000000011126500561`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}MHO_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.knowledgedoor.com/2/units_and_constants_handbook/statsiemens.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.sizes.com/units/statmho.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www3.wolframalpha.com/input/?i=statsiemens`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statsiemens`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}MHO_Stat`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}S_Stat`),
      namedNode(`${skos}altLabel`),
      literal(`statmho`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${dcterms}description`),
      literal(`Saint Helena`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`SHP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`654`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Saint_Helena_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(SHP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Saint_Helena_pound?oldid=490152057`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(`${rdfs}label`),
      literal(`Saint Helena Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${dcterms}description`),
      literal(`Samoa`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}currencyCode`),
      literal(`WST`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}currencyNumber`),
      literal(`882`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Samoan_tala`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}expression`),
      literal(`\\(WST\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Samoan_tala?oldid=423898531`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SamoanTala`),
      namedNode(`${rdfs}label`),
      literal(`Samoan Tala`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${dcterms}description`),
      literal(`Saudi Arabia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}currencyCode`),
      literal(`SAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}currencyNumber`),
      literal(`682`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Saudi_riyal`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}expression`),
      literal(`\\(SAR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Saudi_riyal?oldid=491092981`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SaudiRiyal`),
      namedNode(`${rdfs}label`),
      literal(`Saudi Riyal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${dcterms}description`),
      literal(`Serbia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`RSD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`941`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Serbian_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(RSD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Serbian_dinar?oldid=495146650`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SerbianDinar`),
      namedNode(`${rdfs}label`),
      literal(`Serbian Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${dcterms}description`),
      literal(`Seychelles`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`SCR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`690`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Seychellois_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(SCR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Seychellois_rupee?oldid=492242185`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SeychellesRupee`),
      namedNode(`${rdfs}label`),
      literal(`Seychelles Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}currencyCode`),
      literal(`XAG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}currencyNumber`),
      literal(`961`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}expression`),
      literal(`\\(XAG\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${qudt}ucumCode`),
      literal(`[oz_tr]{Ag}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(`${rdfs}label`),
      literal(`Silver (one Troy ounce)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${dcterms}description`),
      literal(`Singapore`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`SGD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`702`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Singapore_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(SGD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Singapore_dollar?oldid=492228311`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}SingaporeDollar`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SingaporeDollar`),
      namedNode(`${rdfs}label`),
      literal(`Singapore Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${dcterms}description`),
      literal(`Slovakia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}currencyCode`),
      literal(`SKK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}currencyNumber`),
      literal(`703`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Slovak_koruna`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}expression`),
      literal(`\\(SKK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Slovak_koruna?oldid=492625951`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SlovakKoruna`),
      namedNode(`${rdfs}label`),
      literal(`Slovak Koruna`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${dcterms}description`),
      literal(`The astronomical unit of mass is the solar mass.The symbol \\(S\\) is often used in astronomy to refer to this unit, although \\(M_{\\odot}\\) is also common. The solar mass, \\(1.98844 \\times 10^{30} kg\\), is a standard way to express mass in astronomy, used to describe the masses of other stars and galaxies. It is equal to the mass of the Sun, about 333,000 times the mass of the Earth or 1,048 times the mass of Jupiter. In practice, the masses of celestial bodies appear in the dynamics of the solar system only through the products GM, where G is the constant of gravitation.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1988435000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Solar_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Solar_mass?oldid=494074016`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}solarMass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolarMass`),
      namedNode(`${rdfs}label`),
      literal(`Solar mass`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${dcterms}description`),
      literal(`Solomon Islands`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`SBD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`090`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Solomon_Islands_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(SBD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Solomon_Islands_dollar?oldid=490313285`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(`${rdfs}label`),
      literal(`Solomon Islands Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${dcterms}description`),
      literal(`Kyrgyzstan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}currencyCode`),
      literal(`KGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}currencyNumber`),
      literal(`417`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Som`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}expression`),
      literal(`\\(KGS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Som?oldid=495411674`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Som`),
      namedNode(`${rdfs}label`),
      literal(`Som`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${dcterms}description`),
      literal(`Somalia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}currencyCode`),
      literal(`SOS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}currencyNumber`),
      literal(`706`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Somali_shilling`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}expression`),
      literal(`\\(SOS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Somali_shilling?oldid=494434126`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SomaliShilling`),
      namedNode(`${rdfs}label`),
      literal(`Somali Shilling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${dcterms}description`),
      literal(`Tajikistan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}currencyCode`),
      literal(`TJS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}currencyNumber`),
      literal(`972`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tajikistani_somoni`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}expression`),
      literal(`\\(TJS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tajikistani_somoni?oldid=492500781`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Somoni`),
      namedNode(`${rdfs}label`),
      literal(`Somoni`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${dcterms}description`),
      literal(`South Africa`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}currencyCode`),
      literal(`ZAR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}currencyNumber`),
      literal(`710`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/South_African_rand`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}expression`),
      literal(`\\(ZAR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/South_African_rand?oldid=493780395`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}SouthAfricanRand`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(`${rdfs}label`),
      literal(`South African Rand`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${dcterms}description`),
      literal(`South Korea`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}currencyCode`),
      literal(`KRW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}currencyNumber`),
      literal(`410`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/South_Korean_won`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}expression`),
      literal(`\\(KRW\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/South_Korean_won?oldid=494404062`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}SouthKoreanWon`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(`${rdfs}label`),
      literal(`South Korean Won`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${dcterms}description`),
      literal(`International Monetary Fund`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}currencyCode`),
      literal(`XDR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}currencyNumber`),
      literal(`960`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Special_Drawing_Rights`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}expression`),
      literal(`\\(XDR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Special_Drawing_Rights?oldid=467224374`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(`${rdfs}label`),
      literal(`Special Drawing Rights`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${dcterms}description`),
      literal(`Sri Lanka`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}currencyCode`),
      literal(`LKR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}currencyNumber`),
      literal(`144`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sri_Lankan_rupee`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}expression`),
      literal(`\\(LKR\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sri_Lankan_rupee?oldid=495359963`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SriLankaRupee`),
      namedNode(`${rdfs}label`),
      literal(`Sri Lanka Rupee`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4.672`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB116`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`non SI-conform unit of the volume of readily finished wood material : 1 standard = 1,980 board feet or approximate 4.672 cubic metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}symbol`),
      literal(`standard`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}ucumCode`),
      literal(`1980.[bf_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WSD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Standard`),
      namedNode(`${rdfs}label`),
      literal(`Standard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6.35029318`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB081`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass which is commonly used for the determination of the weight of living beings regarding to the conversion to the avoirdupois system of units: 1 st = 14 lb (av)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}symbol`),
      literal(`st{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[stone_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`STI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Stone_UK`),
      namedNode(`${rdfs}label`),
      literal(`Stone (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${dcterms}description`),
      literal(`Sudan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}currencyCode`),
      literal(`SDG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`938`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Sudanese_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}expression`),
      literal(`\\(SDG\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sudanese_pound?oldid=495263707`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SudanesePound`),
      namedNode(`${rdfs}label`),
      literal(`Sudanese Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${dcterms}description`),
      literal(`Suriname`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`SRD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`968`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Surinamese_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(SRD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Surinamese_dollar?oldid=490316270`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SurinamDollar`),
      namedNode(`${rdfs}label`),
      literal(`Surinam Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${dcterms}description`),
      literal(`Sweden`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}currencyCode`),
      literal(`SEK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}currencyNumber`),
      literal(`752`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Swedish_krona`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}expression`),
      literal(`\\(SEK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Swedish_krona?oldid=492703602`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}SwedishKrona`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwedishKrona`),
      namedNode(`${rdfs}label`),
      literal(`Swedish Krona`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${dcterms}description`),
      literal(`Switzerland, Liechtenstein`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`CHF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`756`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Swiss_franc`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(CHF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Swiss_franc?oldid=492548706`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}SwissFranc`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SwissFranc`),
      namedNode(`${rdfs}label`),
      literal(`Swiss Franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${dcterms}description`),
      literal(`Syria`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}currencyCode`),
      literal(`SYP`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}currencyNumber`),
      literal(`760`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Syrian_pound`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}expression`),
      literal(`\\(SYP\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Syrian_pound?oldid=484294722`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}SyrianPound`),
      namedNode(`${rdfs}label`),
      literal(`Syrian Pound`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${qudt}symbol`),
      literal(`T⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`T.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-M`),
      namedNode(`${rdfs}label`),
      literal(`T-M`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`T⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`T.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T-SEC`),
      namedNode(`${rdfs}label`),
      literal(`T-SEC`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of flux density (or field intensity) for magnetic fields (also called the magnetic induction). The intensity of a magnetic field can be measured by placing a current-carrying conductor in the field. The magnetic field exerts a force on the conductor, a force which depends on the amount of the current and on the length of the conductor. One tesla is defined as the field intensity generating one newton of force per ampere of current per meter of conductor. Equivalently, one tesla represents a magnetic flux density of one weber per square meter of area. A field of one tesla is quite strong: the strongest fields available in laboratories are about 20 teslas, and the Earth's magnetic flux density, at its surface, is about 50 microteslas. The tesla, defined in 1958, honors the Serbian-American electrical engineer Nikola Tesla (1856-1943), whose work in electromagnetic induction led to the first practical generators and motors using alternating current. \(T =  V\cdot s \cdot m^{-2} = N\cdot A^{-1}\cdot m^{-1} = Wb\cdot m^{-1} = kg \cdot  C^{-1}\cdot s^{-1}\cdot A^{-1} = kg \cdot s^{-2}\cdot A^{-1} = N \cdot s \cdot C^{-1}\cdot m^{-1}\) where, \(\\\) \(A\) = ampere, \(C\)=coulomb, \(m\) = meter,  \(N\) = newton, \(s\) = second, \(T\) = tesla, \(Wb\) = weber`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tesla`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA285`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tesla?oldid=481198244`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tesla_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1406?rskey=AzXBLd`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}tesla`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`Wb/m^2`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}symbol`),
      literal(`T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}ucumCode`),
      literal(`T`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}udunitsCode`),
      literal(`T`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D33`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T`),
      namedNode(`${rdfs}label`),
      literal(`Tesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${dcterms}description`),
      literal(`In the US and parts of Canada, a tablespoon is the largest type of spoon used for eating from a bowl. In the UK and most Commonwealth countries, a tablespoon is a type of large spoon usually used for serving. In countries where a tablespoon is a serving spoon, the nearest equivalent to the US tablespoon is either the dessert spoon or the soup spoon. A tablespoonful, nominally the capacity of one tablespoon, is commonly used as a measure of volume in cooking. It is abbreviated as T, tb, tbs, tbsp, tblsp, or tblspn. The capacity of ordinary tablespoons is not regulated by law and is subject to considerable variation. In most countries one level tablespoon is approximately 15 mL; in Australia it is 20 mL.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000147867656`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tablespoon`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB006`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tablespoon?oldid=494615208`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}symbol`),
      literal(`tbsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}ucumCode`),
      literal(`[tbs_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Tbl`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Tblsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Tbsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`tblsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`tbsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TBSP`),
      namedNode(`${rdfs}label`),
      literal(`Tablespoon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${dcterms}description`),
      literal(`<p>\\textit{Tex</em> is a unit of measure for the linear mass density of fibers and is defined as the mass in grams per 1000 meters. Tex is more likely to be used in Canada and Continental Europe, while denier remains more common in the United States and United Kingdom. The unit code is 'tex'. The most commonly used unit is actually the decitex, abbreviated dtex, which is the mass in grams per 10,000 meters. When measuring objects that consist of multiple fibers the term 'filament tex' is sometimes used, referring to the mass in grams per 1000 meters of a single filament. Tex is used for measuring fiber size in many products, including cigarette filters, optical cable, yarn, and fabric.}`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tex`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB246`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tex?oldid=457265525`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Units_of_textile_measurement`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}symbol`),
      literal(`tex`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}ucumCode`),
      literal(`tex`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D34`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TEX`),
      namedNode(`${rdfs}label`),
      literal(`Tex`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${dcterms}description`),
      literal(`Thailand`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}currencyCode`),
      literal(`THB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}currencyNumber`),
      literal(`764`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thai_baht`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thai_baht?oldid=493286022`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THB`),
      namedNode(`${rdfs}label`),
      literal(`Baht`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(therm-eec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}symbol`),
      literal(`thm{EEC}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`100000.[Btu_IT]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_EEC`),
      namedNode(`${rdfs}label`),
      literal(`THM_EEC`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Therm} (symbol \\(thm\\)) is a non-SI unit of heat energy. It was defined in the United States in 1968 as the energy equivalent of burning 100 cubic feet of natural gas at standard temperature and pressure. In the US gas industry its SI equivalent is defined as exactly \\(100,000 BTU59^\\circ F\\) or \\(105.4804 megajoules\\). Public utilities in the U.S. use the therm unit for measuring customer usage of gas and calculating the monthly bills.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`105480400.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.convertunits.com/info/therm%2B%5BU.S.%5D`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}symbol`),
      literal(`thm{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`100000.[Btu_59]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N72`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}THM_US`),
      namedNode(`${rdfs}label`),
      literal(`Therm US`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${dcterms}description`),
      literal(`<p>The tonne of oil equivalent (toe) is a unit of energy: the amount of energy released by burning one tonne of crude oil, approximately 42 GJ (as different crude oils have different calorific values, the exact value of the toe is defined by convention; unfortunately there are several slightly different definitions as discussed below). The toe is sometimes used for large amounts of energy, as it can be more intuitive to visualise, say, the energy released by burning 1000 tonnes of oil than 42,000 billion joules (the SI unit of energy). Multiples of the toe are used, in particular the megatoe (Mtoe, one million toe) and the gigatoe (Gtoe, one billion toe).</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`41868000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tonne_of_oil_equivalent`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${qudt}symbol`),
      literal(`toe`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TOE`),
      namedNode(`${rdfs}label`),
      literal(`Ton of Oil Equivalent`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.011574074074074`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA991`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`metric unit tonne divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`t/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000317`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of density equivalent to 1000kg per hectare per year or one Megagram per hectare per year, typically used to express a volume of biomass or crop yield.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}symbol`),
      literal(`t/ha/year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.har-1.year-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(`${rdfs}label`),
      literal(`tonne per hectare per year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of density equivalent to 1000kg per hectare or one Megagram per hectare, typically used to express a volume of biomass or crop yield.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`t/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`tonne per hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB994`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`t/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA997`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`t/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`16.666666666666668`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB000`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`t/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB003`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`t/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}symbol`),
      literal(`t`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}ucumCode`),
      literal(`t`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}udunitsCode`),
      literal(`t`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`TNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${rdfs}label`),
      literal(`Tonne`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TONNE`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_Metric`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${dcterms}description`),
      literal(`In the United States, a unit of mass, approximately \\(29.167\\, grams\\). The number of milligrams of precious metal in one assay ton of the ore being tested is equal to the number of troy ounces of pure precious metal in one 2000-pound ton of the ore. i.e. a bead is obtained that weights 3 milligrams, thus the precious metals in the bead would equal three troy ounces to each ton of ore with the understanding that this varies considerably in the real world as the amount of precious values in each ton of ore varies considerably.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.02916667`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.assaying.org/assayton.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${qudt}symbol`),
      literal(`AT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Assay`),
      namedNode(`${rdfs}label`),
      literal(`Assay Ton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${dcterms}description`),
      literal(`12000 btu per hour</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3516.853`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ton_of_refrigeration`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}expression`),
      literal(`\\(t/fg\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ton_of_refrigeration?oldid=494342824`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}tonOfRefrigeration`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}symbol`),
      literal(`t/fg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_FG`),
      namedNode(`${rdfs}label`),
      literal(`Ton of Refrigeration`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`8896.443230521`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Force`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB021`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the force according to the American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}symbol`),
      literal(`tonf{us}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[stonf_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L94`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_F_US`),
      namedNode(`${rdfs}label`),
      literal(`Ton Force (US Short)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${dcterms}description`),
      literal(`The long ton per cubic yard density measurement unit is used to measure volume in cubic yards in order to estimate weight or mass in long tons.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1328.9391836174336`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}expression`),
      literal(`\\(ton/yd^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`t{long}/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lton_av]/[cyd_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L92`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Long Ton per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${dcterms}description`),
      literal(`Long ton (weight ton or imperial ton) is the name for the unit called the "ton" in the avoirdupois or Imperial system of measurements, as used in the United Kingdom and several other Commonwealth countries. One long ton is equal to 2,240 pounds (1,016 kg), 1.12 times as much as a short ton, or 35 cubic feet (0.9911 m3) of salt water with a density of 64 lb/ft3 (1.025 g/ml).</p>
<p>It has some limited use in the United States, most commonly in measuring the displacement of ships, and was the unit prescribed for warships by the Washington Naval Treaty 1922-for example battleships were limited to a mass of 35,000 long tons (36,000 t; 39,000 short tons).</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1016.0469088`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_UK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Long_ton`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}symbol`),
      literal(`t{long}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lton_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${rdfs}label`),
      literal(`Long Ton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_LONG`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_UK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.011574074074074`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA991`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`metric unit ton divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`t/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L71`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.1`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of density equivalent to 1000kg per hectare or one Megagram per hectare, typically used to express a volume of biomass or crop yield.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}symbol`),
      literal(`t/ha`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.har-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${rdfs}label`),
      literal(`metric tonne per hectare`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.277777777777778`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB994`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`t/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA997`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit tonne divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`t/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D41`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`16.666666666666668`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB000`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit ton divided by the unit for time minute`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`t/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L78`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB003`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit ton divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`t/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`t.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L81`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Tonne Per Second (metric Ton)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${dcterms}description`),
      literal(`The tonne (SI unit symbol: t) is a metric system unit of mass equal to 1,000 kilograms (2,204.6 pounds). It is a non-SI unit accepted for use with SI. To avoid confusion with the ton, it is also known as the metric tonne and metric ton in the United States[3] and occasionally in the United Kingdom. In SI units and prefixes, the tonne is a megagram (Mg), a rarely-used symbol, easily confused with mg, for milligram.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tonne`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tonne?oldid=492526238`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000-fold of the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}symbol`),
      literal(`t`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}ucumCode`),
      literal(`t`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`TNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${rdfs}label`),
      literal(`Metric Ton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TONNE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_Metric`),
      namedNode(`${skos}altLabel`),
      literal(`metric-tonne`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.1326`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB011`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional unit for volume of cargo, especially in shipping`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}symbol`),
      literal(`MTON`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L86`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(`${rdfs}label`),
      literal(`Ton (US Shipping)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${dcterms}description`),
      literal(`The short Ton per Hour is a unit used to express a weight processed in a period of time.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.251995761`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}expression`),
      literal(`\\(ton/hr\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ton/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Short Ton per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${dcterms}description`),
      literal(`The short ton per cubic yard density measurement unit is used to measure volume in cubic yards in order to estimate weight or mass in short tons.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1186.552842515566`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}expression`),
      literal(`\\(ton/yd^3\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Density`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`ton{short}/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av].[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Short Ton per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${dcterms}description`),
      literal(`<p>The short ton is a unit of mass equal to 2,000 pounds (907.18474 kg). In the United States it is often called simply ton without distinguishing it from the metric ton (tonne, 1,000 kilograms / 2,204.62262 pounds) or the long ton (2,240 pounds / 1,016.0469088 kilograms); rather, the other two are specifically noted. There are, however, some U.S. applications for which unspecified tons normally means long tons.</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`907.18474`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_US`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Short_ton`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}symbol`),
      literal(`ton{short}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`STN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${rdfs}label`),
      literal(`Short Ton`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_SHORT`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_US`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.011759259259259`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB010`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit British ton according to the Imperial system of units divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`t{long}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lton_av].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L85`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Long Ton (uk) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1328.8778292234224`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB018`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density according the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`t{long}/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lton_av].[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Long Ton (UK) Per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1016.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_LONG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB008`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB009`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`traditional Imperial unit for volume of cargo, especially in the shipping sector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}symbol`),
      literal(`ton{UK}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}ucumCode`),
      literal(`[lton_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L84`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`LTN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${rdfs}label`),
      literal(`Ton (UK)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_UK`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_LONG`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.010497685185185`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB014`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit American ton according to the Anglo-American system of units divided by the unit day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`ton{US}/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L88`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Short Ton (us) Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.251944444444444`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA994`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB019`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit ton divided by the unit for time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`ton{US}/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`4W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E18`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Ton (US) Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1186.3112117181538`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB020`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the density according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}symbol`),
      literal(`ton{US}/yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av].[cyd_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L93`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${rdfs}label`),
      literal(`Short Ton (US) Per Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`907.1847`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB012`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of the mass according to the Anglo-American system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}symbol`),
      literal(`ton{US}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}ucumCode`),
      literal(`[ston_av]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`STN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${rdfs}label`),
      literal(`Ton (US)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TON_US`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${dcterms}description`),
      literal(`<p>The \\textit{torr} is a non-SI unit of pressure with the ratio of 760 to 1 standard atmosphere, chosen to be roughly equal to the fluid pressure exerted by a millimeter of mercury, i.e. , a pressure of 1 torr is approximately equal to one millimeter of mercury. Note that the symbol (Torr) is spelled exactly the same as the unit (torr), but the letter case differs. The unit is written lower-case, while the symbol of the unit (Torr) is capitalized (as upper-case), as is customary in metric units derived from names. Thus, it is correctly written either way, and is only incorrect when specification is first made that the word is being used as a unit, or else a symbol of the unit, and then the incorrect letter case for the specified use is employed.</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`133.322`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Torr`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB022`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Torr?oldid=495199381`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}torr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}symbol`),
      literal(`Torr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`UA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TORR`),
      namedNode(`${rdfs}label`),
      literal(`Torr`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${dcterms}description`),
      literal(`A teaspoon is a unit of volume. In the United States one teaspoon as a unit of culinary measure is \\(1/3\\) tablespoon , that is, \\(\\approx 4.93 mL\\); it is exactly \\(1/6 U.S. fl. oz\\), \\(1/48 \\; cup\\), and \\(1/768 \\; U.S. liquid gallon\\) (see United States customary units for relative volumes of these other measures) and approximately \\(1/3 cubic inch\\). For nutritional labeling on food packages in the U.S., the teaspoon is defined as precisely \\(5 mL\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000492892187`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Teaspoon`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB007`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Teaspoon?oldid=490940468`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}symbol`),
      literal(`tsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}ucumCode`),
      literal(`[tsp_us]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}udunitsCode`),
      literal(`tsp`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`G25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TSP`),
      namedNode(`${rdfs}label`),
      literal(`Teaspoon`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${dcterms}description`),
      literal(`The unit of magnetic induction in the cgs system, \\(10^{-4}\\,tesla\\). Also known as the gauss.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.diracdelta.co.uk/science/source/g/a/gauss/source.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abtesla`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}GAUSS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}T_Ab`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Gs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${dcterms}description`),
      literal(`Tanzania`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}currencyCode`),
      literal(`TZS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}currencyNumber`),
      literal(`834`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tanzanian_shilling`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}expression`),
      literal(`\\(TZS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tanzanian_shilling?oldid=492257527`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TanzanianShilling`),
      namedNode(`${rdfs}label`),
      literal(`Tanzanian Shilling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The tebibyte is a multiple of the unit byte for digital information. The prefix tebi means 1024^4`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`6096987078286.4836024230149744713`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tebibyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Byte#Multiple-byte_units`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tebi`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`TiB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E61`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TebiBYTE`),
      namedNode(`${rdfs}label`),
      literal(`TebiByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${dcterms}description`),
      literal(`Kazakhstan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}currencyCode`),
      literal(`KZT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}currencyNumber`),
      literal(`398`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kazakhstani_tenge`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}expression`),
      literal(`\\(KZT\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kazakhstani_tenge?oldid=490523058`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tenge`),
      namedNode(`${rdfs}label`),
      literal(`Tenge`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${dcterms}description`),
      literal(`The terabyte is a multiple of the unit byte for digital information. The prefix tera means 10^12 in the International System of Units (SI), and therefore 1 terabyte is 1000000000000bytes, or 1 trillion bytes, or 1000 gigabytes. 1 terabyte in binary prefixes is 0.9095 tebibytes, or 931.32 gibibytes. The unit symbol for the terabyte is TB or TByte, but not Tb (lower case b) which refers to terabit.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`5545177444479.5624753378569716654`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Terabyte`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB186`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Terabyte?oldid=494671550`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}symbol`),
      literal(`TB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}ucumCode`),
      literal(`TBy`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`E35`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraBYTE`),
      namedNode(`${rdfs}label`),
      literal(`TeraByte`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${dcterms}description`),
      literal(`A TeraCoulomb is \\(10^{12} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}symbol`),
      literal(`TC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${qudt}ucumCode`),
      literal(`TC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${rdfs}label`),
      literal(`TeraCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA287`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000 000-fold of the SI derived unit hertz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}symbol`),
      literal(`THz`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}ucumCode`),
      literal(`THz`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D29`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraHZ`),
      namedNode(`${rdfs}label`),
      literal(`Terahertz`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA288`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1 000 000 000 000-fold of the SI derived unit joule`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}symbol`),
      literal(`TJ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}ucumCode`),
      literal(`TJ`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D30`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraJ`),
      namedNode(`${rdfs}label`),
      literal(`Terajoule`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA286`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000,000,000-fold of the SI derived unit ohm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}symbol`),
      literal(`TΩ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}ucumCode`),
      literal(`TOhm`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraOHM`),
      namedNode(`${rdfs}label`),
      literal(`Teraohm`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA290`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000,000,000-fold of the product of the SI derived unit watt and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}symbol`),
      literal(`TW⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`TW/h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D32`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW-HR`),
      namedNode(`${rdfs}label`),
      literal(`Terawatt Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA289`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`1,000,000,000,000-fold of the SI derived unit watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Tera`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}symbol`),
      literal(`TW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}ucumCode`),
      literal(`TW`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D31`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TeraW`),
      namedNode(`${rdfs}label`),
      literal(`Terawatt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${dcterms}description`),
      literal(`Energy equivalent of one ton of TNT`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`4184000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}expression`),
      literal(`\\(t/lbf\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`t/lbf`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}ucumCode`),
      literal(`Gcal`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TonEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Ton Energy`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${dcterms}description`),
      literal(`Trinidad and Tobago`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`TTD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`780`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Trinidad_and_Tobago_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(TTD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Trinidad_and_Tobago_dollar?oldid=490325306`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(`${rdfs}label`),
      literal(`Trinidad and Tobago Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${dcterms}description`),
      literal(`Mongolia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mongolian_t%C3%B6gr%C3%B6g`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}expression`),
      literal(`\\(MNT\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mongolian_tögrög?oldid=495408271`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Tugrik`),
      namedNode(`${rdfs}label`),
      literal(`Tugrik`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${dcterms}description`),
      literal(`Tunisia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}currencyCode`),
      literal(`TND`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`3`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`788`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tunisian_dinar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}expression`),
      literal(`\\(TND\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Tunisian_dinar?oldid=491218035`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}TunisianDinar`),
      namedNode(`${rdfs}label`),
      literal(`Tunisian Dinar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${dcterms}description`),
      literal(`The unified atomic mass unit (symbol: \\(u\\)) or dalton (symbol: \\(Da\\)) is the standard unit that is used for indicating mass on an atomic or molecular scale (atomic mass). It is defined as one twelfth of the mass of an unbound neutral atom of carbon-12 in its nuclear and electronic ground state,[ and has a value of \\(1.660538921(73) \\times 10^{-27} kg\\). One dalton is approximately equal to the mass of one nucleon; an equivalence of saying \\(1 g mol^{-1}\\). The CIPM have categorised it as a 'non-SI unit' because units values in SI units must be obtained experimentally.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000000000000000000000000166053878283`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Atomic_mass_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}AMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}Da`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Mass`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB083`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_mass_unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}unifiedAtomicMassUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}ucumCode`),
      literal(`u`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D43`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${rdfs}label`),
      literal(`Unified Atomic Mass Unit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}AMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}U`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}Da`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${dcterms}description`),
      literal(`United Arab Emirates`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}currencyCode`),
      literal(`AED`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}currencyNumber`),
      literal(`784`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/United_Arab_Emirates_dirham`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}expression`),
      literal(`\\(AED\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/United_Arab_Emirates_dirham?oldid=491806142`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UAEDirham`),
      namedNode(`${rdfs}label`),
      literal(`United Arab Emirates dirham`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${dcterms}description`),
      literal(`International Union of Railways`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`XFU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(XFU\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UICFranc`),
      namedNode(`${rdfs}label`),
      literal(`UIC franc (special settlement currency)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${dcterms}description`),
      literal(`An explicit unit to say something has no units.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Absorptance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Count`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Dissipance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Duv`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Emissivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Lethargy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LossFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Reactivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Refectance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Reflectance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Transmittance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Turns`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}symbol`),
      literal(`unitless`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`C62`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CountingUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DimensionlessUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UNITLESS`),
      namedNode(`${rdfs}label`),
      literal(`Unitless`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${dcterms}description`),
      literal(`American Samoa, British Indian Ocean Territory, Ecuador, El Salvador, Guam, Haiti, Marshall Islands, Micronesia, Northern Mariana Islands, Palau, Panama, Puerto Rico, East Timor, Turks and Caicos Islands, United States, Virgin Islands`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`USD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`840`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${qudt}symbol`),
      literal(`US$`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar`),
      namedNode(`${rdfs}label`),
      literal(`US Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${dcterms}description`),
      literal(`United States`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}currencyCode`),
      literal(`USN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}currencyNumber`),
      literal(`997`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}expression`),
      literal(`\\(USN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(`${rdfs}label`),
      literal(`United States Dollar (next day) (funds code)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${dcterms}description`),
      literal(`United States`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${qudt}currencyCode`),
      literal(`USS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${qudt}currencyNumber`),
      literal(`998`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(`${rdfs}label`),
      literal(`United States Dollar (same day) (funds code)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${dcterms}description`),
      literal(`Uganda`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}currencyCode`),
      literal(`UGX`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}currencyNumber`),
      literal(`800`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Ugandan_shilling`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}expression`),
      literal(`\\(UGX\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ugandan_shilling?oldid=495383966`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UgandaShilling`),
      namedNode(`${rdfs}label`),
      literal(`Uganda Shilling`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${dcterms}description`),
      literal(`Colombia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}currencyCode`),
      literal(`COU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}currencyNumber`),
      literal(`970`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}expression`),
      literal(`\\(COU\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(`${rdfs}label`),
      literal(`Unidad de Valor Real`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${dcterms}description`),
      literal(`Chile`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}currencyCode`),
      literal(`CLF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}currencyNumber`),
      literal(`990`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}expression`),
      literal(`\\(CLF\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(`${rdfs}label`),
      literal(`Unidades de formento (Funds code)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${dcterms}description`),
      literal(`A magnetic pole is a unit pole if it exerts a force of one dyne on another pole of equal strength at a distance of 1 cm. The strength of any given pole in cgs units is therefore numerically equal to the force in dynes which it exerts on a unit pole 1 cm away.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0000001256637`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}expression`),
      literal(`\\(U/nWb\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB214`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}unitPole`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}symbol`),
      literal(`pole`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UnitPole`),
      namedNode(`${rdfs}label`),
      literal(`Unit Pole`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${dcterms}description`),
      literal(`Uruguay`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}currencyCode`),
      literal(`UYU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}currencyNumber`),
      literal(`858`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Uruguayan_peso`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}expression`),
      literal(`\\(UYU\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Uruguayan_peso?oldid=487528781`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UruguayPeso`),
      namedNode(`${rdfs}label`),
      literal(`Peso Uruguayo`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${dcterms}description`),
      literal(`Uzbekistan`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}currencyCode`),
      literal(`UZS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}currencyNumber`),
      literal(`860`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Uzbekistani_som`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}expression`),
      literal(`\\(UZS\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Uzbekistani_som?oldid=490522228`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}UzbekistanSom`),
      namedNode(`${rdfs}label`),
      literal(`Uzbekistan Som`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit for apparent by ampere and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅A⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.A.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A-HR`),
      namedNode(`${rdfs}label`),
      literal(`Volt Ampere Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA298`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit volt and the SI base unit ampere`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.A`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}udunitsCode`),
      literal(`VA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A`),
      namedNode(`${rdfs}label`),
      literal(`Volt Ampere`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the unit volt ampere reactive and the unit hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅A{reactive}⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.A{reactive}.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(`${rdfs}label`),
      literal(`Volt Ampere Reactive Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB023`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit with special name for reactive power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅A{Reactive}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.A{reactive}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D44`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-A_Reactive`),
      namedNode(`${rdfs}label`),
      literal(`Volt Ampere Reactive`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-M`),
      namedNode(`${rdfs}label`),
      literal(`V-M`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`100.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB054`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit volt divided by the 0.01-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`V/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`39.37007874015748`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA300`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit volt divided by the unit inch according to the Anglo-American and the Imperial system of units`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}symbol`),
      literal(`V/in`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.[in_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H23`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-IN`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(v/k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB173`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`V/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Volt per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`The divergence at a particular point in a vector field is (roughly) how much the vector field 'spreads out' from that point. Operationally, we take the partial derivative of each of the field with respect to each of its space variables and add all the derivatives together to get the divergence. Electric field (V/m) differentiated with respect to distance (m) yields \\(V/(m^2)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(V m^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.funtrivia.com/en/subtopics/Physical-Quantities-310909.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`V/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Volt per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Volt per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${dcterms}description`),
      literal(`Volt Per Meter (V/m) is a unit in the category of Electric field strength. It is also known as volts per meter, volt/meter, volt/metre, volt per metre, volts per metre. This unit is commonly used in the SI unit system. Volt Per Meter (V/m) has a dimension of \\(MLT^{-3}I^{-1}\\) where M is mass, L is length, T is time, and I is electric current. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}expression`),
      literal(`\\(V/m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA301`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--electric_field_strength--volt_per_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`V/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Volt per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Volt per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA297`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit volt divided by the 0.000001-fold of the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}symbol`),
      literal(`V/µs`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.us-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H24`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Microsecond`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA302`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit volt divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`V/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D51`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Volt Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${dcterms}description`),
      literal(`'Volt per Second' is a unit of magnetic flux equaling one weber. This is the flux passing through a conducting loop and reduced to zero at a uniform rate in one second inducing an electric potential of one volt in the loop. `, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(V / sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-4D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA304`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1512`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/Webers`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`V/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H46`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Volt per second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA303`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit volt and the SI base unit second divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`V⋅s/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`V.s.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Volt Second Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Volt Second Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}expression`),
      literal(`\\(v^2/k^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L4I0M2H-2T-6D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB172`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}symbol`),
      literal(`V²/K²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}ucumCode`),
      literal(`V2.K-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D45`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V2-PER-K2`),
      namedNode(`${rdfs}label`),
      literal(`Square Volt per Square Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Volt} is the SI unit of electric potential. Separating electric charges creates potential energy, which can be measured in energy units such as joules. Electric potential is defined as the amount of potential energy present per unit of charge. Electric potential is measured in volts, with one volt representing a potential of one joule per coulomb of charge. The name of the unit honors the Italian scientist Count Alessandro Volta (1745-1827), the inventor of the first battery.  The volt also may be expressed with a variety of other units. For example, a volt is also equal to one watt per ampere (W/A) and one joule per ampere per second (J/A/s).\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Volt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA296`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Volt?oldid=494812083`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\text{V}\\ \\equiv\\ \\text{volt}\\ \\equiv\\ \\frac{\\text{J}}{\\text{C}}\\ \\equiv\\ \\frac{\\text{joule}}{\\text{coulomb}}\\ \\equiv\\ \\frac{\\text{W.s}}{\\text{C}}\\ \\equiv\\ \\frac{\\text{watt.second}}{\\text{coulomb}}\\ \\equiv\\ \\frac{\\text{W}}{\\text{A}}\\ \\equiv\\ \\frac{\\text{watt}}{\\text{amp}}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}volt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`W/A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}ucumCode`),
      literal(`V`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}udunitsCode`),
      literal(`V`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`VLT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V`),
      namedNode(`${rdfs}label`),
      literal(`Volt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`In the electromagnetic centimeter-gram-second system of units, 'abvolt per centimeter' is the unit of electric field strength.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.endmemo.com/convert/electric%20field%20strength.php`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`abV/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.nV.cm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Abvolt per centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Abvolt per centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${dcterms}description`),
      literal(`The magnetic flux whose expenditure in 1 second produces 1 abvolt per turn of a linked circuit. Technically defined in a three-dimensional system, it corresponds in the four-dimensional electromagnetic sector of the SI system to 10 nWb, and is an impractically small unit. In use for some years, the name was agreed by the International Electrotechnical Committee in 1930, along with a corresponding practical unit, the pramaxwell (or pro-maxwell) = \\(10^{8}\\) maxwell.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}expression`),
      literal(`\\(abv-sec\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-820`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`abv⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.nV.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Abvolt Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${dcterms}description`),
      literal(`A unit of electrical potential equal to one hundred millionth of a volt (\\(10^{-8}\\,volts\\)), used in the centimeter-gram-second (CGS) system of units. One abV is the potential difference that exists between two points when the work done to transfer one abcoulomb of charge between them equals: \\(1\\,erg\\cdot\\,1\\,abV\\,=\\,10\\,nV\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Abvolt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-EMU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Abvolt?oldid=477198646`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.lexic.us/definition-of/abvolt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-27`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}abvolt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}symbol`),
      literal(`abV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}ucumCode`),
      literal(`10.nV`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Ab`),
      namedNode(`${rdfs}label`),
      literal(`Abvolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(statvolt-centimeter\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`statV⋅cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`V_Stat-CentiM`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${dcterms}description`),
      literal(`One statvolt per centimetre is equal in magnitude to one gauss. For example, an electric field of one statvolt/cm has the same energy density as a magnetic field of one gauss. Likewise, a plane wave propagating in a vacuum has perpendicular electric and magnetic fields such that for every gauss of magnetic field intensity there is one statvolt/cm of electric field intensity.
The abvolt is another option for a unit of voltage in the cgs system.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`29979.2458`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}expression`),
      literal(`\\(statv-per-cm\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricField`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Statvolt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${qudt}symbol`),
      literal(`statV/cm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Statvolt per Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(`${rdfs}label`),
      literal(`Statvolt per Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${dcterms}description`),
      literal(`"statvolt" is a unit of voltage and electrical potential used in the cgs system of units. The conversion to the SI system is \\(1 statvolt = 299.792458 volts\\). The conversion factor 299.792458 is simply the numerical value of the speed of light in m/s divided by 106. The statvolt is also defined in the cgs system as \\(1 erg / esu\\). It is a useful unit for electromagnetism because one statvolt per centimetre is equal in magnitude to one gauss. Thus, for example, an electric field of one statvolt/cm has the same energy density as a magnetic field of one gauss. Likewise, a plane wave propagating in a vacuum has perpendicular electric and magnetic fields such that for every gauss of magnetic field intensity there is one statvolt/cm of electric field intensity. The abvolt is another option for a unit of voltage in the cgs system.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`299.792458`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Statvolt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}CGS-ESU`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Statvolt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Statvolt?oldid=491769750`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}statvolt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}symbol`),
      literal(`statV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}V_Stat`),
      namedNode(`${rdfs}label`),
      literal(`Statvolt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${dcterms}description`),
      literal(`Vanuatu`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}currencyCode`),
      literal(`VUV`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}currencyNumber`),
      literal(`548`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Vanuatu_vatu`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}expression`),
      literal(`\\(VUV\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Vanuatu_vatu?oldid=494667103`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Vatu`),
      namedNode(`${rdfs}label`),
      literal(`Vatu`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${dcterms}description`),
      literal(`Venezuela`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}currencyCode`),
      literal(`VES`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`928`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}expression`),
      literal(`\\(VEB\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(`${rdfs}label`),
      literal(`Venezuelan bolvar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${dcterms}description`),
      literal(`Vietnam`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}currencyCode`),
      literal(`VND`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}currencyNumber`),
      literal(`704`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}expression`),
      literal(`\\(VND\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}VietnameseDong`),
      namedNode(`${rdfs}label`),
      literal(`Vietnamese ??ng`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${dcterms}description`),
      literal(`The watt hour per cubic meter is a unit of energy density, equal to 3,600 joule per cubic meter.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅hr/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.h.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Watthour per Cubic meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Watthour per Cubic metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${dcterms}description`),
      literal(`The watt hour is a unit of energy, equal to 3,600 joule.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`3600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.h`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WHR`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-HR`),
      namedNode(`${rdfs}label`),
      literal(`Watthour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${dcterms}description`),
      literal(`The power per unit area of radiation of a given wavenumber illuminating a target at a given incident angle.`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅m/m²⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.m.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M-PER-M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watts per square metre per inverse metre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅m²/sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m2.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(`${rdfs}label`),
      literal(`W-M2-PER-SR`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`Q21`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-M2`),
      namedNode(`${rdfs}label`),
      literal(`W-M2`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Square Centimeter is a unit of heat flux or thermal flux, the rate of heat energy transfer through a given surface.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB224`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}symbol`),
      literal(`W/cm²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.cm-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N48`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Centimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Centimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Square Foot is a unit of heat flux or thermal flux, the rate of heat energy transfer through a given surface.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`10.7639104`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/ft^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}symbol`),
      literal(`W/ft²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.[sft_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-FT2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Foot`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Square Inch is a unit of heat flux or thermal flux, the rate of heat energy transfer through a given surface.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1550.0031`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/in^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB225`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}symbol`),
      literal(`W/in²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.[sin_i]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`N49`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-IN2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Inch`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Kelvin (\\(W/K\\)) is a unit in the category of Thermal conductivity.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(w-per-K\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA307`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}symbol`),
      literal(`w/K`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D52`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-K`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA316`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit watt divided by the SI base unit kilogram`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}symbol`),
      literal(`W/kg`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.kg-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}ucumCode`),
      literal(`W/kg`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WA`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(`${rdfs}label`),
      literal(`Watt Per Kilogram`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(W-per-MK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA309`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(W \\cdot m^{-1} \\cdot K^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}symbol`),
      literal(`W/(m⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-1.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D53`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M-K`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Square Meter Per Quartic Kelvin (\\(W/m2\\cdotK4)\\) is a unit in the category of light.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/(m^2.K^4)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-4T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}symbol`),
      literal(`W/(m²⋅K⁴)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.K-4`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D56`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Meter Quartic Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Metre Quartic Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Watt Per Square Meter Per Kelvin }(\\(W m^{-2} K^{-1}\\)) is a unit in the category of Thermal heat transfer coefficient. It is also known as watt/square meter-kelvin. This unit is commonly used in the SI unit system. Watt Per Square Meter Per Kelvin (\\(W m^{-2} K^{-1}\\)) has a dimension of \\(MT^{-1}Q^{-1}\\) where \\(M\\) is mass, \\(T\\) is time, and \\(Q\\) is temperature. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/(m^{2}-K)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA311`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}symbol`),
      literal(`W/(m²⋅K)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.K-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Meter Kelvin`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Metre Kelvin`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W/m²⋅m⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.m-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watts per square metre per metre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${qudt}symbol`),
      literal(`W/m²⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-M`),
      namedNode(`${rdfs}label`),
      literal(`Watts per square metre per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W/m²⋅nm⋅sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.nm-1.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watts per square metre per nanometre per steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${qudt}symbol`),
      literal(`W/m²⋅nm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.nm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-NanoM`),
      namedNode(`${rdfs}label`),
      literal(`Watts per square metre per nanometre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${dcterms}description`),
      literal(`Watt Per Square Meter Per Pascal (\\(W/m^2-pa\\)) is a unit of Evaporative Heat Transfer.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/(m^2.pa)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}symbol`),
      literal(`W/(m²⋅pa)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.Pa-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Meter Pascal`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Metre Pascal`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Watt per steradian per square metre}\\) is the SI unit of radiance (\\(W·sr^{-1}·m^{-2}\\)), while that of spectral radiance in frequency is the watt per steradian per square metre per hertz (\\(W·sr^{-1}·m^{-2}·Hz^{-1}\\)) and that of spectral radiance in wavelength is the watt per steradian per square metre, per metre (\\(W·sr^{-1}·m^{-3}\\)), commonly the watt per steradian per square metre per nanometre (\\(W·sr^{-1}·m^{-2}·nm^{-1}\\)). It has a dimension of \\(ML^{-4}T^{-3}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/(m^2.sr)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Radiance`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://asd-www.larc.nasa.gov/Instrument/ceres_units.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--radiance--watt_per_square_meter_per_steradian.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Radiance`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W/(m²⋅sr)`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D58`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Meter Steradian`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Metre Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${dcterms}description`),
      literal(`"Watt per Square Meter} is a unit of irradiance defined as the power received per area. This is a unit in the category of Energy flux. It is also known as watts per square meter, watt per square metre, watts per square metre, watt/square meter, watt/square metre. This unit is commonly used in the SI unit system. Watt Per Square Meter (\\(W/m^2\\)) has a dimension of \\(MT^{-3"\\) where M is mass, and T is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}expression`),
      literal(`\\(W/m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA310`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units--energy_flux--watt_per_square_meter.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`W/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W/m2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D54`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Square Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA312`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit watt divided by the power of the SI base unit metre with the exponent 3`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}symbol`),
      literal(`W/m³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H47`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Watt Per Cubic Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M3`),
      namedNode(`${rdfs}label`),
      literal(`Watt Per Cubic Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`W/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`H74`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Watts per metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Watt Per Steradian (W/sr)}\\) is the unit in the category of Radiant intensity. It is also known as watts per steradian. This unit is commonly used in the SI unit system. Watt Per Steradian (W/sr) has a dimension of \\(M\\cdot L^{-2}\\cdot T^{-3}\\) where \\(M\\) is mass, \\(L\\) is length, and \\(T\\) is time. This unit is the standard SI unit in this category.`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}expression`),
      literal(`\\(W sr^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA314`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}symbol`),
      literal(`W/sr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.sr-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D57`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-PER-SR`),
      namedNode(`${rdfs}label`),
      literal(`Watt per Steradian`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅s/m²`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.s.m-2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(`${rdfs}label`),
      literal(`Watt seconds per square metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Energy`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA313`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`product of the SI derived unit watt and SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`W⋅s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`W.s`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`J55`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Watt Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of power. Power is the rate at which work is done, or (equivalently) the rate at which energy is expended. One watt is equal to a power rate of one joule of work per second of time. This unit is used both in mechanics and in electricity, so it links the mechanical and electrical units to one another. In mechanical terms, one watt equals about 0.001 341 02 horsepower (hp) or 0.737 562 foot-pound per second (lbf/s). In electrical terms, one watt is the power produced by a current of one ampere flowing through an electric potential of one volt. The name of the unit honors James Watt (1736-1819), the British engineer whose improvements to the steam engine are often credited with igniting the Industrial Revolution.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}allowedUnitOfSystem`),
      namedNode(`${sou}PLANCK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Watt`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Power`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA306`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Watt?oldid=494906356`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\text{W}\\ \\equiv\\ \\text{watt}\\ \\equiv\\ \\frac{\\text{J}}{\\text{s}}\\ \\equiv\\ \\frac{\\text{joule}}{\\text{second}}\\ \\equiv\\ \\frac{\\text{N.m}}{\\text{s}}\\ \\equiv\\ \\frac{\\text{newton.metre}}{\\text{second}}\\ \\equiv\\ \\text{V.A}\\ \\equiv\\ \\text{volt.amp}\\ \\equiv\\ \\Omega\\text{.A}^{2}\\ \\equiv\\ \\text{ohm.amp}^{2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}watt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}symbol`),
      literal(`W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}ucumCode`),
      literal(`W`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}udunitsCode`),
      literal(`W`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WTT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}W`),
      namedNode(`${rdfs}label`),
      literal(`Watt`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB333`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}symbol`),
      literal(`Wb⋅m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Wb.m`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`P50`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdfs}label`),
      literal(`Weber Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${rdfs}label`),
      literal(`Weber Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-M`),
      namedNode(`${owl}sameAs`),
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA318`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`SI derived unit weber divided by the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}symbol`),
      literal(`Wb/m`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}ucumCode`),
      literal(`Wb.m-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D59`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Weber Per Meter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-M`),
      namedNode(`${rdfs}label`),
      literal(`Weber Per Metre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB074`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`derived SI unit weber divided by the 0.001-fold of the SI base unit metre`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}symbol`),
      literal(`Wb/mm`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}ucumCode`),
      literal(`Wb.mm-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D60`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Weber Per Millimeter`, 'en-us'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(`${rdfs}label`),
      literal(`Weber Per Millimetre`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${dcterms}description`),
      literal(`The SI unit of magnetic flux. "Flux" is the rate (per unit of time) at which something crosses a surface perpendicular to the flow. The weber is a large unit, equal to \\(10^{8}\\) maxwells, and practical fluxes are usually fractions of one weber. The weber is the magnetic flux which, linking a circuit of one turn, would produce in it an electromotive force of 1 volt if it were reduced to zero at a uniform rate in 1 second. In SI base units, the dimensions of the weber are \\((kg \\cdot m^2)/(s^2 \\cdot A)\\). The weber is commonly expressed in terms of other derived units as the Tesla-square meter (\\(T \\cdot m^2\\)), volt-seconds (\\(V \\cdot s\\)), or joules per ampere (\\(J/A\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Weber`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}derivedCoherentUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAA317`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Weber_(unit)`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}weber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}siUnitsExpression`),
      literal(`V.s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}symbol`),
      literal(`Wb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}ucumCode`),
      literal(`Wb`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}udunitsCode`),
      literal(`Wb`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WEB`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WB`),
      namedNode(`${rdfs}label`),
      literal(`Weber`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${dcterms}description`),
      literal(`Switzerland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}currencyCode`),
      literal(`CHE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}currencyNumber`),
      literal(`947`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}expression`),
      literal(`\\(CHE\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIREuro`),
      namedNode(`${rdfs}label`),
      literal(`WIR Euro (complementary currency)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${dcterms}description`),
      literal(`Switzerland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}currencyCode`),
      literal(`CHW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}currencyNumber`),
      literal(`948`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}expression`),
      literal(`\\(CHW\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WIRFranc`),
      namedNode(`${rdfs}label`),
      literal(`WIR Franc (complementary currency)`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${dcterms}description`),
      literal(`Mean solar week`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`604800.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Week`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB024`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Week?oldid=493867029`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}week`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}symbol`),
      literal(`wk`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}ucumCode`),
      literal(`wk`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`WEE`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}WK`),
      namedNode(`${rdfs}label`),
      literal(`Week`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${dcterms}description`),
      literal(`Cameroon, Central African Republic, Congo, Chad, Equatorial Guinea, Gabon`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${qudt}currencyCode`),
      literal(`XAF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${qudt}currencyNumber`),
      literal(`950`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XAF`),
      namedNode(`${rdfs}label`),
      literal(`CFA Franc BEAC`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${dcterms}description`),
      literal(`Currency of Benin, Burkina Faso, CÔte d'Ivoire, Guinea-Bissau, Mali, Niger, Senegal, Togo`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${qudt}currencyCode`),
      literal(`XOF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${qudt}currencyNumber`),
      literal(`952`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XOF`),
      namedNode(`${rdfs}label`),
      literal(`CFA Franc BCEAO`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${dcterms}description`),
      literal(`French Polynesia, New Caledonia, Wallis and Futuna`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${qudt}currencyCode`),
      literal(`XPF`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${qudt}currencyNumber`),
      literal(`953`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}XPF`),
      namedNode(`${rdfs}label`),
      literal(`CFP franc`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.6459200164592`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB031`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit yard according to the Anglo-American and the Imperial system of units divided by the unit for temperature degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`yd/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i].[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L98`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Yard Per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${dcterms}description`),
      literal(`The square yard is an imperial/US customary unit of area, formerly used in most of the English-speaking world but now generally replaced by the square metre outside of the U.S. , Canada and the U.K. It is defined as the area of a square with sides of one yard in length. (Gaj in Hindi).`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.83612736`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}expression`),
      literal(`\\(yd^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Area`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB034`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}symbol`),
      literal(`sqyd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[syd_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i]2`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`YDK`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD2`),
      namedNode(`${rdfs}label`),
      literal(`Square Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00000884901456`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB037`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit yard according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit for time day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}symbol`),
      literal(`yd³/day`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i].d-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M12`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard Per Day`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1.376198881991088`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB036`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit yard according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit for temperature degree Fahrenheit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}symbol`),
      literal(`yd³/°F`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i].[degF]-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M11`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard Per Degree Fahrenheit`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.00021237634944`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB038`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit yard according to the Anglo-American and the Imperial system of units with the exponent 3 divided by the unit for the time hour`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}symbol`),
      literal(`yd³/hr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i].h-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M13`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard Per Hour`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${dcterms}description`),
      literal(`"Cubic Yard per Minute" is an Imperial unit for  'Volume Per Unit Time' expressed as \\(yd^{3}/min\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0127425809664`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}expression`),
      literal(`\\(yd^{3}/min\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB040`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}symbol`),
      literal(`yd³/min`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i].min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i]/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i]3.min-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i]3/min`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M15`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard per Minute`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.764554857984`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB041`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`power of the unit and the Anglo-American and Imperial system of units with the exponent 3 divided by the SI base unit second`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}symbol`),
      literal(`yd³/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i].s-1`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`M16`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard Per Second`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${dcterms}description`),
      literal(`A cubic yard is an Imperial / U.S. customary unit of volume, used in the United States, Canada, and the UK. It is defined as the volume of a cube with sides of 1 yard in length.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.764554857984`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}expression`),
      literal(`\\(yd^{3}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Volume`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB035`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}symbol`),
      literal(`yd³`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[cyd_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i]3`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`YDQ`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD3`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${dcterms}description`),
      literal(`A yard is a unit of length in several different systems including United States customary units, Imperial units and the former English units. It is equal to 3 feet or 36 inches. Under an agreement in 1959 between Australia, Canada, New Zealand, South Africa, the United Kingdom and the United States, the yard (known as the "international yard" in the United States) was legally defined to be exactly 0.9144 metres.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.9144`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Yard`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}definedUnitOfSystem`),
      namedNode(`${sou}USCS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Length`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB030`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Yard?oldid=492334628`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}symbol`),
      literal(`yd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}ucumCode`),
      literal(`[yd_i]`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}udunitsCode`),
      literal(`yd`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`YRD`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}IMPERIAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YD`),
      namedNode(`${rdfs}label`),
      literal(`Yard`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${dcterms}description`),
      literal(`A year is any of the various periods equated with one passage of Earth about the Sun, and hence of roughly 365 days. The familiar calendar has a mixture of 365- and 366-day years, reflecting the fact that the time for one complete passage takes about 365¼ days; the precise value for this figure depends on the manner of defining the year.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`31557600.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB026`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198605225.001.0001/acref-9780198605225-e-1533?rskey=b94Fd6`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}omUnit`),
      namedNode(`${ns12}year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}symbol`),
      literal(`yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}ucumCode`),
      literal(`a`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}udunitsCode`),
      literal(`yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`ANN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR`),
      namedNode(`${rdfs}label`),
      literal(`Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`31536000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB025`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`31,536,000-fold of the SI base unit second according a common year with 365 days`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}symbol`),
      literal(`yr`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L95`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Common`),
      namedNode(`${rdfs}label`),
      literal(`Common Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${dcterms}description`),
      literal(`A sidereal year is the time taken for Sun to return to the same position with respect to the stars of the celestial sphere.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`31558149.7632`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB028`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}symbol`),
      literal(`yr{sidereal}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`L96`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_Sidereal`),
      namedNode(`${rdfs}label`),
      literal(`Sidereal Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${dcterms}description`),
      literal(`<p>A tropical year (also known as a solar year), for general purposes, is the length of time that the Sun takes to return to the same position in the cycle of seasons, as seen from Earth; for example, the time from vernal equinox to vernal equinox, or from summer solstice to summer solstice. Because of the precession of the equinoxes, the seasonal cycle does not remain exactly synchronised with the position of the Earth in its orbit around the Sun. As a consequence, the tropical year is about 20 minutes shorter than the time it takes Earth to complete one full orbit around the Sun as measured with respect to the fixed stars. Since antiquity, astronomers have progressively refined the definition of the tropical year, and currently define it as the time required for the mean Sun's tropical longitude (longitudinal position along the ecliptic relative to its position at the vernal equinox) to increase by 360 degrees (that is, to complete one full seasonal circuit).</p>`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`31556925.216`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Time`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB029`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}symbol`),
      literal(`yr{tropical}`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}ucumCode`),
      literal(`a_t`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`D42`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${rdfs}label`),
      literal(`Tropical Year`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(`${skos}altLabel`),
      literal(`solar year`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${dcterms}description`),
      literal(`Yemen`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}currencyCode`),
      literal(`YER`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}currencyNumber`),
      literal(`886`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Yemeni_rial`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}expression`),
      literal(`\\(YER\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Yemeni_rial?oldid=494507603`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YemeniRial`),
      namedNode(`${rdfs}label`),
      literal(`Yemeni Rial`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${dcterms}description`),
      literal(`A YoctoCoulomb is \\(10^{-24} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Yocto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}symbol`),
      literal(`yC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`yC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${rdfs}label`),
      literal(`YoctoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YoctoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${dcterms}description`),
      literal(`A YottaCoulomb is \\(10^{24} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Yotta`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}symbol`),
      literal(`YC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`YC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${rdfs}label`),
      literal(`YottaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YottaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${dcterms}description`),
      literal(`Mainland China`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}currencyCode`),
      literal(`CNY`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}currencyExponent`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}currencyNumber`),
      literal(`156`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Renminbi`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}expression`),
      literal(`\\(CNY\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Renminbi?oldid=494799454`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}YuanRenminbi`),
      namedNode(`${rdfs}label`),
      literal(`Yuan Renminbi`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${dcterms}description`),
      literal(`In chemistry and physics, the atomic number (also known as the proton number) is the number of protons found in the nucleus of an atom and therefore identical to the charge number of the nucleus. It is conventionally represented by the symbol Z. The atomic number uniquely identifies a chemical element. In an atom of neutral charge, the atomic number is also equal to the number of electrons.`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Atomic_number`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_number?oldid=490723437`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${qudt}unitOfSystem`),
      namedNode(`${sou}CGS`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Z`),
      namedNode(`${rdfs}label`),
      literal(`atomic-number`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${dcterms}description`),
      literal(`Zambia`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}currencyCode`),
      literal(`ZMW`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}currencyExponent`),
      literal(`0`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}currencyNumber`),
      literal(`967`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Zambian_kwacha`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}expression`),
      literal(`\\(ZMK\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Zambian_kwacha?oldid=490328608`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZambianKwacha`),
      namedNode(`${rdfs}label`),
      literal(`Zambian Kwacha`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${dcterms}description`),
      literal(`A ZeptoCoulomb is \\(10^{-21} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.000000000000000000001`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Zepto`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}symbol`),
      literal(`zC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${qudt}ucumCode`),
      literal(`zC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${rdfs}label`),
      literal(`ZeptoCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZeptoC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${dcterms}description`),
      literal(`A ZettaCoulomb is \\(10^{21} C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`1000000000000000000000.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}derivedUnitOfSystem`),
      namedNode(`${sou}SI`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}prefix`),
      namedNode(`${prefix}Zetta`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}symbol`),
      literal(`ZC`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${qudt}ucumCode`),
      literal(`ZC`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}DerivedUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${rdfs}label`),
      literal(`ZettaCoulomb`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZettaC`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${unit}C`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${dcterms}description`),
      literal(`Zimbabwe`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}currencyCode`),
      literal(`ZWL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}currencyNumber`),
      literal(`932`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Zimbabwean_dollar`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}expression`),
      literal(`\\(ZWD\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Zimbabwean_dollar?oldid=491532675`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(`${rdfs}label`),
      literal(`Zimbabwe Dollar`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${dcterms}description`),
      literal(`Poland`, namedNode(`${rdf}HTML`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}currencyCode`),
      literal(`PLN`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}currencyExponent`),
      literal(`2`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}currencyNumber`),
      literal(`985`, namedNode(`${xsd}integer`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Polish_z%C5%82oty`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}expression`),
      literal(`\\(PLN\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Currency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Polish_złoty?oldid=492697733`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}CurrencyUnit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}Zloty`),
      namedNode(`${rdfs}label`),
      literal(`Zloty`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}conversionMultiplier`),
      literal(`0.0`, namedNode(`${xsd}decimal`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}hasQuantityKind`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}iec61360Code`),
      literal(`0112/2///62720#UAB403`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`unit of failure rate`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}symbol`),
      literal(`failures/s`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}ucumCode`),
      literal(`s-1{failures}`, namedNode(`${qudt}UCUMcs`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${qudt}uneceCommonCode`),
      literal(`FIT`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}Unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${unit}failures-in-time`),
      namedNode(`${rdfs}label`),
      literal(`Failures In Time`, 'en'),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${vaem}hasGraphMetadata`),
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${rdfs}label`),
      literal(`QUDT Units of Measure for All Units Release 2.1.25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${owl}imports`),
      namedNode(`${ns20}qudt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${owl}imports`),
      namedNode(`${ns1}prefix`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${owl}imports`),
      namedNode(`${ns1}quantitykind`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${owl}imports`),
      namedNode(`${ns1}sou`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns3}unit`),
      namedNode(`${owl}versionIRI`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns21}QUDT-UNITS-VocabCatalogEntry`),
      namedNode(`${rdf}type`),
      namedNode(`${vaem}CatalogEntry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns21}QUDT-UNITS-VocabCatalogEntry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${ns21}QUDT-UNITS-VocabCatalogEntry`),
      namedNode(`${rdfs}label`),
      literal(`QUDT UNITS Vocab Catalog Entry`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}contributor`),
      literal(`Jack Hodges`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}contributor`),
      literal(`Simon J D Cox`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}contributor`),
      literal(`Steve Ray`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}created`),
      literal(`2019-07-30`, namedNode(`${xsd}date`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}creator`),
      literal(`Steve Ray`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}modified`),
      literal(`2023-03-02T11:19:23.310-05:00`, namedNode(`${xsd}dateTime`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}rights`),
      literal(`The QUDT Ontologies are issued under a Creative Commons Attribution 4.0 International License (CC BY 4.0), available at https://creativecommons.org/licenses/by/4.0/. Attribution should be made to QUDT.org`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}rights`),
      literal(`
  This product includes all or a portion of the UCUM table, UCUM codes, and UCUM definitions or is derived from it, subject to a license from Regenstrief Institute, Inc. and The UCUM Organization. Your use of the UCUM table, UCUM codes, UCUM definitions also is subject to this license, a copy of which is available at ​http://unitsofmeasure.org. The current complete UCUM table, UCUM Specification are available for download at ​http://unitsofmeasure.org. The UCUM table and UCUM codes are copyright © 1995-2009, Regenstrief Institute, Inc. and the Unified Codes for Units of Measures (UCUM) Organization. All rights reserved.

THE UCUM TABLE (IN ALL FORMATS), UCUM DEFINITIONS, AND SPECIFICATION ARE PROVIDED 'AS IS.' ANY EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  `),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}subject`),
      literal(`Units-All`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${dcterms}title`),
      literal(`ALL UNITS Version 2.1.25 Graph Metadata`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}description`),
      literal(`Standard units of measure for all units.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}graphName`),
      literal(`qudt`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}graphTitle`),
      literal(`All Units Ontology Version 2.1.25`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}hasGraphRole`),
      namedNode(`${vaem}VocabularyGraph`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}hasOwner`),
      namedNode(`${vaem}QUDT.org`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}hasSteward`),
      namedNode(`${vaem}QUDT.org`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}intent`),
      literal(`To provide a vocabulary of all units.`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}isMetadataFor`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}latestPublishedVersion`),
      literal(`https://qudt.org/doc/2023/03/DOC_VOCAB-UNITS-ALL-v2.1.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}logo`),
      literal(`https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}namespace`),
      literal(`http://qudt.org/vocab/unit/`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}namespacePrefix`),
      literal(`unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}owner`),
      literal(`QUDT.org`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}previousPublishedVersion`),
      literal(`https://qudt.org/doc/2023/01/DOC_VOCAB-UNITS-ALL-v2.1.html`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}revision`),
      literal(`2.1`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}turtleFileURL`),
      literal(`http://qudt.org/2.1/vocab/unit`, namedNode(`${xsd}anyURI`)),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}abstract`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}created`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}creator`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}modified`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}title`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${rdf}type`),
      namedNode(`${vaem}GraphMetaData`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}unit`),
      namedNode(unit)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-UNITS-ALL`),
      namedNode(`${rdfs}label`),
      literal(`All Units Ontology Version 2.1.25`),
      namedNode(unit)
    ),

  ]
}

/* This file was automatically generated. Do not edit by hand. */

const {
  cc,
  rdf,
  owl,
  rico,
  dc11,
  dcterms,
  vann,
  ns8,
  skos,
  rdfs,
  ns11,
  xsd,
  ns13,
  ns14,
  ns15,
  ns16,
  ns17,
  ns18,
  ns19
} = {
  'cc': 'http://creativecommons.org/ns#',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'rico': 'https://www.ica.org/standards/RiC/ontology#',
  'dc11': 'http://purl.org/dc/elements/1.1/',
  'dcterms': 'http://purl.org/dc/terms/',
  'vann': 'http://purl.org/vocab/vann/',
  'ns8': 'http://purl.org/vocommons/voaf#',
  'skos': 'http://www.w3.org/2004/02/skos/core#',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns11': 'https://www.ica.org/standards/RiC/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'ns13': 'https://creativecommons.org/licenses/by/4.0/',
  'ns14': 'http://www.isni.org/',
  'ns15': 'https://data.bnf.fr/ark:/12148/cb169702205#',
  'ns16': 'http://www.wikidata.org/entity/',
  'ns17': 'https://www.ica.org/standards/RiC/vocabularies/documentaryFormTypes#',
  'ns18': 'https://www.ica.org/standards/RiC/vocabularies/',
  'ns19': 'https://www.ica.org/standards/RiC/vocabularies/recordSetTypes#'
}

export default ({ blankNode, literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  const blankNodes: import('rdf-js').BlankNode[] = []
  for (let i = 0; i < 910; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      namedNode(`${cc}license`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}contributor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}creator`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}date`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}publisher`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}rights`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dc11}title`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}abstract`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}contributor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}creator`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}description`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}publisher`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}rights`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${dcterms}title`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${vann}preferredNamespacePrefix`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${vann}preferredNamespaceUri`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns8}Vocabulary`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rdf}value`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}Concept`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}ConceptScheme`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}altLabel`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}changeNote`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}changeNote`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}note`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}definition`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}example`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}historyNote`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}inScheme`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}note`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}prefLabel`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${skos}scopeNote`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Record Resource or Instantiation to at
            least one Agent, when the Agent accumulates it, be it intentionally (collecting it) or
            not (receiving it in the course of its activities).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Accumulation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[0],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[1],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AccumulationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R028 and RiC-R028i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}comment`),
      literal(`The doing of something for some human purpose.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}label`),
      literal(`Activity`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[2],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[3],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${skos}changeNote`),
      blankNodes[4],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${skos}scopeNote`),
      literal(`Activity is a kind of Event. Activity is specifically used to
            designate purposeful human activity. Activity may be understood from two perspectives.
            First it can be understood as leading to an end. The end is the purpose of the Activity,
            or why the Activity is performed. Second, it can be understood in terms of the processes
            that lead to achieving the end, how the end is realized through coordinated actions.
            Purpose and process are complementary understandings of Activity. Together the two
            perspectives address why the Activity is performed, the expected ends or outcomes; and
            how the Activity fulfills the purpose. While activity has an intended end, it also has
            unintended consequences and results, or side-effects. By and large, these may not be the
            focus of the description, but they are, unquestionably, context. |In a corporate or
            government context an Activity may also be called a 'function'. An Activity exists in a
            specific social and cultural context, and within that context is subject to change over
            time. An Activity may be composed of other Activities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Activity`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E15 (Activity
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Record Resource or Instantiation to at
            least one Activity, when the Record Resource or Instantiation results from the
            activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Activity Documentation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[5],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[6],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R033 and RiC-R033
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of an Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdfs}label`),
      literal(`Activity Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[7],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${skos}changeNote`),
      blankNodes[8],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${skos}scopeNote`),
      literal(`Can be extended with any number of subclasses, e.g.
            “function/action” and “activity domain”. This allows for a faceted approach that enables
            an Activity to be categorized using a combination of components, general or more
            specific. For example, “monitoring” can be used in combination with “election polls” or
            “water resources”.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ActivityType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A02 (Activity Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rdfs}comment`),
      literal(`A Person, or Group, or an entity created by a Person or Group
            (Mechanism), or a Position, that acts in the world.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rdfs}label`),
      literal(`Agent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${skos}changeNote`),
      blankNodes[9],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${skos}changeNote`),
      blankNodes[10],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${skos}scopeNote`),
      literal(`An Agent may have one or more identities; an identity is a
            constellation of properties or relations that together “identify” the Agent. A Person or
            Group commonly has one identity, though each also may have one or more alternative
            identities. Such alternative identities may be shared by more than one Person or Group.
            Alternative identities include but are not limited to pseudonyms, heteronyms, DBA (Doing
            Business As), and trade identities. An alternative identity should not be confused with
            a Position in a Group, for example, presidents, prime ministers, governors, popes,
            royalty, or bishops. Nor should an alternative identity be confused with a variant name
            or identifier of the same identity. Agent also includes entities created by a Person or
            Group that act on behalf of the creating Agent in an autonomous or semi-autonomous
            manner. Examples of a Mechanism include software agents, robots, and space and
            underwater probes that generate data (records) in the course of Activity assigned to and
            in conformance with the instructions given to them by the creating Person or
            Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Agent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E07 (Agent
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent, to at least another Agent, when the
            first one(s) control(s) in a way the activities of the second one(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}label`),
      literal(`Agent Control Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[11],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[12],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentControlRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R041 and RiC-R041i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent to at least another Agent, when the
            first one is hierarchically superior to the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}label`),
      literal(`Agent Hierarchical Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[13],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[14],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R045 and RiC-R045i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rdfs}comment`),
      literal(`A label, title or term designating an Agent in order to make it
            distinguishable from other similar entities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rdfs}label`),
      literal(`Agent Name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentName`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of a specialization of
            RiC-A28 (Name attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Record Resource or an Instantiation to at
            least one Agent that creates or accumulates the Record Resource, receives it, or sends
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Agent Origination Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[15],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[16],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R026 and RiC-R026i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent, to at least another Agent, that
            succeeds it chronologically for, for instance, fullfilling some functions or performing
            some activities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`Agent Temporal Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[17],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[18],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[19],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R016 and RiC-016i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Agents.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdfs}label`),
      literal(`Agent Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[20],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R044 and RiC-044i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Appellation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Appellation`),
      namedNode(`${rdfs}comment`),
      literal(`A concept of any kind that is used for designating an Entity and
            referring to it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Appellation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Appellation`),
      namedNode(`${rdfs}label`),
      literal(`Appellation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Appellation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`The relation between an Appellation and at least one Thing that
            the Appellation designates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Appellation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[21],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AppellationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[22],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent, and at least one Thing over which
            the Agent has some authority.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}label`),
      literal(`Authority Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[23],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[24],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`Would probably rarely be used as such (use its
            sub-categories)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorityRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R036 and RiC-R036i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Record to at least one Person, Group or
            Position that is responsible for conceiving and formulating the information contained in
            the Record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}label`),
      literal(`Authorship Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[25],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[26],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${skos}changeNote`),
      blankNodes[27],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R079 and RiC-R079i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rdfs}comment`),
      literal(`The extent of a Record Resource carrier`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rdfs}label`),
      literal(`Carrier Extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[28],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[29],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`Countable characteristics of a record resource carrier
            expressed as a quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A04 (Carrier Extent)
            attribute`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of physical material in or on which information
            is represented.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdfs}label`),
      literal(`Carrier Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[30],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${skos}changeNote`),
      blankNodes[31],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${skos}scopeNote`),
      literal(`Carrier Type information is essential for assessing
            authenticity, conservation needs and the availability, access and use of Record
            Resources. Carrier Type determines the environmental conditions of storage and the
            prerequisites and possible ways to access and use of the records. Should not be confused
            with Content Type, that categorizes a Record Resource, nor with Representation Type that
            categorizes an Instantiation. The Carrier Type depends on the media type that is
            required to access the records and is independent of its content`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CarrierType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A05 (Carrier Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at lest one Person, to at least another Person, when
            the first has child the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}label`),
      literal(`Child Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}DescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[32],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[33],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ChildRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R018 and RiC-R018i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Concept`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Concept`),
      namedNode(`${rdfs}comment`),
      literal(`An idea, unit of thought, abstract cultural object or
            category`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Concept`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Concept`),
      namedNode(`${rdfs}label`),
      literal(`Concept`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Concept`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdfs}comment`),
      literal(`The fundamental form of communication in which a Record is
            expressed and the human sense through which it is intended to be
            perceived.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdfs}label`),
      literal(`Content Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[34],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${skos}changeNote`),
      blankNodes[35],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${skos}scopeNote`),
      literal(`Should not be confused with Representation Type or Carrier
            Type of a related Instantiation since the form of communication can be independent of
            the representation or carrier, for example, a map (Content Type: cartographic image) can
            be represented as a sketch (Representation Type: graphic) or as a GIS-coded elements
            (Representation Type: computer).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ContentType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A10 (Content Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdfs}comment`),
      literal(`Longitudinal and latitudinal information of a
            Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdfs}label`),
      literal(`Coordinates`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[36],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${skos}changeNote`),
      blankNodes[37],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Coordinates`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A11 (Coordinates
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rdfs}comment`),
      literal(`An organized group of persons that act together as an Agent, and
            that has a recognized legal or social status.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rdfs}label`),
      literal(`Corporate Body`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${skos}changeNote`),
      blankNodes[38],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${skos}scopeNote`),
      literal(`Corporate Body is a kind of Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBody`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E11 (Corporate Body
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a Corporate Body.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdfs}label`),
      literal(`Corporate Body Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[39],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorporateBodyType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A12 (Corporate Body Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Persons, when they correspond to each
            other.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Correspondence Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}KnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[40],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R052 and Ri052i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Record Resource or Instantiation to at
            least one Agent, when the Agent is either responsible for all or some of the content of
            the Record Resource, or is a contributor to the genesis or production of the
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Creation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[41],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[42],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[43],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}CreationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R027 and RiC-R027i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rdfs}comment`),
      literal(`Chronological information associated with an entity that
            contributes to its identification and contextualization.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rdfs}label`),
      literal(`Date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${skos}changeNote`),
      blankNodes[44],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${skos}scopeNote`),
      literal(`Date includes both single dates, a date range, or a set of
            non-contiguous single dates or date ranges. A date may be represented in natural
            language, based on a digital standard, or both. Digital standard dates will typically be
            based on ISO 8601, or Extended Date-Time Format (EDTF).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Date`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E18 (Date
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}comment`),
      literal(`Chronological information associated with an entity that
            contributes to its identification and contextualization, that implies or explicitly
            states a start date and end date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}label`),
      literal(`Date Range`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[45],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[46],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateRange`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E20 (Date Range
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rdfs}comment`),
      literal(`Non-contiguous single dates or date ranges.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rdfs}label`),
      literal(`Date Set`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${skos}changeNote`),
      blankNodes[47],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${skos}scopeNote`),
      literal(`Primarily used in the description of Record Sets to describe
            dates of member Records`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DateSet`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E21 (Date Set
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a person according to characteristics such as
            age, gender, education, place of origin, ethnic/cultural identification, religion,
            etc.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rdfs}label`),
      literal(`Demographic Group`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${skos}changeNote`),
      blankNodes[48],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${skos}changeNote`),
      blankNodes[49],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${skos}scopeNote`),
      literal(`Can be extended with any number of subclasses, e.g. Age or
            Religion. A demographic group may be defined as a subset of the general population.
            Individuals may belong to several demographic groups`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DemographicGroup`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A15 (Demographic Group
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to at least one Instantiation that is
            derived from it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Derivation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[50],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[51],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DerivationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R014 and RiR014i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Person to at least another Person, when
            the first has/have descendant the second one(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Descendance Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}FamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[52],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[53],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DescendanceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R017 and RiC-R017i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of the document with respect to its extrinsic and
            intrinsic elements that together communicate its content, administrative and documentary
            context, and authority`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdfs}label`),
      literal(`Documentary Form Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[54],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${skos}changeNote`),
      blankNodes[55],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${skos}scopeNote`),
      literal(`Documentary Form Type plays an important role in determining
            the type of information a Record may comprise, its status of perfection, and its
            authenticity and reliability. Documentary form types exist in a specific social and
            cultural context, and within that context, are subject to change over
            time`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A17 (Documentary Form Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdfs}comment`),
      literal(`Something that happens in time and space.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdfs}label`),
      literal(`Event`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[56],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${skos}changeNote`),
      blankNodes[57],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${skos}scopeNote`),
      literal(`An event may be natural, human, or a combination of natural
            and human. Events have temporal and spatial boundaries. An event may actively involve
            some agent(s) and affect any entity. An event may be discrete, happening at a specific
            moment in time, or may occur over an extended period of time. Events may have events as
            parts, and events may precede or follow one another. Multiple agents may participate in
            the same event, and in different roles. `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E14 (Event
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Event`),
      namedNode(`${rico}closeTo`),
      literal(`LODE Event class
            (http://linkedevents.org/ontology/#term-Event)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Event to at least one Thing, when the
            first is associated with the existence and lifecycle of the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}label`),
      literal(`Event Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[58],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[59],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R057 and RiC-R057i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of an Event.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdfs}label`),
      literal(`Event Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[60],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${skos}changeNote`),
      blankNodes[61],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${skos}scopeNote`),
      literal(`Events of all kinds can be categorized. Curation event types
            include creation; acquisition; transfer; arrangement; description; digitization, etc.
            Biographical event types include birth, marriage, death, etc.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}EventType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A18 (Event Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${rdfs}comment`),
      literal(`Countable characteristics of the content of an entity expressed
            as a quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${rdfs}label`),
      literal(`Extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${skos}changeNote`),
      blankNodes[62],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Extent`),
      namedNode(`${skos}scopeNote`),
      literal(`Physical or logical extent of a resource`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of the extent that is being measured`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${rdfs}label`),
      literal(`Extent Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ExtentType`),
      namedNode(`${skos}changeNote`),
      blankNodes[63],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rdfs}comment`),
      literal(`Two or more persons related by birth, or through marriage,
            adoption, civil union, or other social conventions that bind them together as a socially
            recognized familial group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rdfs}label`),
      literal(`Family`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${skos}changeNote`),
      blankNodes[64],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${skos}scopeNote`),
      literal(`Family is a kind of Group. “Family” is used here as a general
            term that encompasses a wide variety of familial groups. Other types of familial groups
            include Dynasty, Clan, House, Tribe and others. Though family may be a recognized legal
            group in specific contexts, the term may also be used for groups that are socially
            recognized as families. A family may be a group of persons related either by
            consanguinity or affinity or cohabitation or other social conventions. In some context,
            a Family may be legally recognized as Corporate Body. For example, certain North
            American peoples (tribes) retain self-government rights and have jurisdiction over
            defined tribal lands.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Family`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E10 (Family
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Persons, when they have some family link,
            i.e. belong to the same family.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdfs}label`),
      literal(`Family Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[65],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R047 and RiC-R047i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a Family.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdfs}label`),
      literal(`Family Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[66],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${skos}changeNote`),
      blankNodes[67],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${skos}scopeNote`),
      literal(`Family Type encompasses a wide variety of familial groups
            related by consanguinity, affinity, cohabitation or other social conventions. `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FamilyType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A20 (Family Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Instantiations which may be considered as
            equivalent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Functional Equivalence Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[68],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`Use for Instantiations which, from some point of view, in some
            context and for some users at least, may be considered as equivalent. This equivalence
            is usually based upon the fact that the Instantiations have at least the same
            intellectual content (they instantiate the same Record Resource).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R035 and RiC-R035i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rdfs}comment`),
      literal(`Two or more Agents that act together as an Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rdfs}label`),
      literal(`Group`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Mechanism`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${skos}changeNote`),
      blankNodes[69],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${skos}scopeNote`),
      literal(`Group is a kind of Agent. A Group has a socially recognized
            identity. Each member of the Group plays a particular role or roles (that is has a
            particular Position) in the coordinated activity of the Group. Corporate bodies and
            families are kinds of groups, though other kinds of groups are possible. For example,
            the “electorate” -- all of the voters in a given election. Complex, large groups may be
            subdivided into other groups.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Group`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E09 (Group
            Entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group and at least another Group, when the first one
            as the second one(s) among its subdivisions.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}label`),
      literal(`Group Subdivision Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}WholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[70],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[71],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R005 and RiC-R005i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdfs}comment`),
      literal(`A word, number, letter, symbol, or any combination of these used
            to uniquely identify or reference an individual instance of an entity within a specific
            information domain.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdfs}label`),
      literal(`Identifier`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[72],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Identifier`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A22 (Identifier
            attribute) (see also the identifier data property)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of an Identifier.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdfs}label`),
      literal(`Identifier Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[73],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${skos}changeNote`),
      blankNodes[74],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IdentifierType`),
      namedNode(`${skos}scopeNote`),
      literal(`For example, 'old identifier' ; 'ISNI' (for a person or
            corporate body), etc.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}comment`),
      literal(`The inscription of information made by an Agent on a physical
            carrier in any persistent, recoverable form as a means of communicating information
            through time and space.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}label`),
      literal(`Instantiation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[75],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[76],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[77],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${skos}changeNote`),
      blankNodes[78],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${skos}scopeNote`),
      literal(`A Record or Record Part must have been instantiated at least
            once, though this instantiation may no longer exist at the moment of description. An
            instantiation might also exist at the moment of description, but be destroyed at a later
            moment in time, when, for example, a derived instantiation might become the only
            remaining instantiation. A Record Set may have an instantiation, which is to say that it
            is not a necessary condition. An Instantiation may be derived from another
            Instantiation. A Record Resource may have many Instantiations simultaneously (for
            instance, a record printed and saved in the same time as DOCX and PDF/A would have 3
            concurrent instantiations) or through time (for example, copy of a record). Depending on
            the context, a new instantiation may be seen as a new or as the same record resource.
            During in the process of re-instantiation something is lost and something is preserved,
            but it is up to the context and the Agent that produces or uses that Instantiation to
            assess whether the two instantiations are functionally equivalent or not. For instance,
            a postcard representing a town map from 1874 (Instantiation 1) is digitized and kept as
            a JPEG file (Instantiation 2). The digital copy may be considered as instantiating the
            "same" Record by an Agent considering the information transmitted by the Record (e.g.,
            the urban landscape displayed), but as a" different" Record by an antiquarian more
            focused on the materiality of the carrier. Successive instantiations may change the
            perceivable boundaries of a Record Resource. For instance, a case file comprising many
            records may be digitized and saved as one single PDF file, which, from management
            perspective, may be treated as one Record. Similarly, a large Record Set (a fonds or a
            series) may be maintained as one database. On the other hand, one record (main document
            and its annexes) may be digitized in separate files and each one may be managed as a
            discrete “physical” item. Instantiations may require mediation to communicate the
            information in the Record Resource. While a traditional Record on paper can simply be
            read by an Agent in order to understand the information, a vinyl recording, a video
            cassette or a digital file needs a device (mediator) to codify or decodify the
            information conveyed. This mediator may imply simple physical components (a turntable
            needle, for example), or a complex gallery of software and hardware elements.
            Instantiations are more than the mere informational content of Record Resource and may
            be the focus of preservation and physical management of records. The use of particular
            document types for records, such as a medieval charter, may have implications for the
            authenticity of the records. Hence, the way a Record Resource is instantiated
            contributes to the contextualizing of the content.record resource is instantiated
            contributes to the contextualizing the content. Distinguishing the message conveyed
            (Record Resource) and its physical representations (Instantiation) allows for the
            efficient management of their descriptions, and preserve information about a Record
            Resource even when no physical representation of it exists or is known to exist anymore.
            The relations between distinct instantiations can then be expressed wherever they
            coexist, and they can be related to the Record Resource they
            instantiate.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E06 (Instantiation
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Instantiation`),
      namedNode(`${rico}closeTo`),
      literal(`PREMIS Representation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rdfs}comment`),
      literal(`The extent of an Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rdfs}label`),
      literal(`Instantiation Extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[79],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[80],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`Countable characteristics of an Instantiation expressed as a
            quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A23 (Instantiation
            Extent attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two instantiations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Instantiation to Instantiation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[81],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent and one Record Resource or
            Instantiation on which the Agent has some intellectual property rights.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}label`),
      literal(`Intellectual Property Rights Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[82],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[83],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`Can be used, when the record resource is a work, for
            specifying the connection between the record resource and its
            author(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R040 and RiC-R040i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Person to at least another one, when the
            first one has some knowledge of the second one through time or space.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`Knowing Of Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[84],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[85],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R050 and RiC-R050i
            relationsi`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Persons that directly know each other
            during their existence. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdfs}label`),
      literal(`Knowing Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[86],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}KnowingRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Cass implementation of RiC-R051 and RiC—R051i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rdfs}comment`),
      literal(`A spoken or written human language represented in the Record or
            Record Part, or used by the Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rdfs}label`),
      literal(`Language`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${skos}changeNote`),
      blankNodes[87],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${skos}changeNote`),
      blankNodes[88],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Language`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A25 (Language
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Person and at least one Group, when the
            first one leads the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`Leadership Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[89],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[90],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[91],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LeadershipRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R042 and RiC-R042i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rdfs}comment`),
      literal(`A status defined by law.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rdfs}label`),
      literal(`Legal Status`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}LegalStatus`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A26 (Legal Status
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent, and at least one Record Resource or
            Instantiation that the Agent manages.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}label`),
      literal(`Management Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[92],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[93],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ManagementRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R038 and RiC-R038i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdfs}comment`),
      literal(`Delegation of authority by an Agent to another Agent to perform
            an Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdfs}label`),
      literal(`Mandate`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[94],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${skos}changeNote`),
      blankNodes[95],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${skos}scopeNote`),
      literal(`Mandate is a kind of Rule. A Mandate confers the authority or
            competencies of Agents to perform a specified Activity. In addition to assigning an
            Activity and delegating authority to perform the Activity to an Agent, a Mandate
            commonly limits the Place (jurisdiction) and Date (time period) within which an Agent
            may perform the Activity (where and when). Mandates exist in a specific social and
            cultural context, and within that context are subject to change over time. While a
            Mandate may be tacit, in whole or part, it may be explicitly expressed in a variety of
            documentary sources (for example, constitutions, legislation, (legal) acts, statutes,
            legal codes, ordinances, charges, charters, or mission statements). The evidence for
            identifying a Mandate may be found in its entirety in one documentary source (for
            example, a law or regulation), or may be found in two or more sources. A Mandate should
            not be confused with the one or more documentary sources that serve as evidence of its
            identity. A documentary source is a Record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mandate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E17 (Mandate
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Mandate, and at least one Agent, when the
            first gives the second one the authority or competencies to act. May also involve one to
            many Activities that the Mandate(s) assign(s) to the Agent(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}label`),
      literal(`Mandate Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}RuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[96],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[97],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[98],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[99],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MandateRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R067 and RiC-R067i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rdfs}comment`),
      literal(`A process or system created by a Person or Group that performs
            an Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rdfs}label`),
      literal(`Mechanism`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${skos}changeNote`),
      blankNodes[100],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${skos}scopeNote`),
      literal(`Mechanism is a kind of Agent. A Mechanism may have both
            mechanical and software components, or may be exclusively software. A Mechanism acts in
            the world producing physical or social effects, and frequently generates or modifies
            Records.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Mechanism`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E13 (Mechanism
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group and at least one Person, when the first one has
            the second one(s) among its members.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`Membership Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[101],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[102],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[103],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MembershipRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R055 and RiC-R055i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation and at least another Instantiation,
            when the first is migrated into the second one(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Migration Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}DerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[104],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[105],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}MigrationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R015 and RiC-R015i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rdfs}comment`),
      literal(`A label, title or term designating the entity in order to make
            it distinguishable from other similar entities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rdfs}label`),
      literal(`Name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Name`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A28 (Name attribute)
            (see also the name data property)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a profession, trade, or craft pursued by a
            person in fulfilment of an Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}label`),
      literal(`Occupation Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}ActivityType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}DemographicGroup`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[106],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${skos}changeNote`),
      blankNodes[107],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${skos}scopeNote`),
      literal(`Occupation Type should not be confused with Position where,
            for example, an Agent with the Occupation Type “lawyer” holds the Position of “legal
            counsel” in an agency. Occupation Type is related to, but should not be confused with
            the domain or field of Activity (Actvitity Type), such as an archivist who works in the
            domain of archival science. Occupation Type is a kind of Demographic
            Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OccupationType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A30 (Occupation Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Group, Person or Position, and at least a
            Thing that these Agent(s) own(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`Ownership Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[108],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[109],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`Among other probably more rare use cases for archival
            description, can be used between agents (a person owns a corporate body, a corporate
            body owns a mechanism), or between agents and record resources`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}OwnershipRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R037 and RiC-R037i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Activity to at least one Agent, when the
            first is performed by the second one(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Performance Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}EventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[110],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[111],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PerformanceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R060 and RiC-R060i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdfs}comment`),
      literal(`A human being with a social identity or persona.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdfs}label`),
      literal(`Person`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[112],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${skos}changeNote`),
      blankNodes[113],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${skos}changeNote`),
      blankNodes[114],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${skos}scopeNote`),
      literal(`Person is a kind of Agent. Most commonly, a human being
            (biological person) has a single coeval social identity or persona. In everyday
            discourse, this is the “real person.” Less common though not rare, over the course of a
            lifetime, personae in addition to the coeval (or “original”) persona may be associated
            with the human being. Such “alternative personae” are most often created by the original
            person for specific purposes. Under some circumstances, an alternative persona might
            eclipse or replace the original person (Mark Twain eclipsing Samuel Clemens; John Wayne
            eclipsing Marion Mitchell Morrison), that is, the social (shared) alternative identity
            becomes the predominate identity. Less common is whentwo or more persons collaborate to
            create a shared persona. Persona shared by two or more Persons constitute a kind of
            Group. Within the archival context, the original Person generally will be the focus of
            the description, with alternative personae noted. Exceptionally, an alternative persona
            may displace the coeval persona.s.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Person`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E08 (Person
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}comment`),
      literal(`A delimitation of the physical territory of a
            Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}label`),
      literal(`Physical Location`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[115],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[116],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${skos}scopeNote`),
      literal(`Usually associated to one to many Places, and known during
            some time. A location may be linked to one to many Coordinates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PhysicalLocation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A27 (Location
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdfs}comment`),
      literal(`Bounded, named geographic area or region.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdfs}label`),
      literal(`Place`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[117],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${skos}changeNote`),
      blankNodes[118],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${skos}scopeNote`),
      literal(`A Place may be a jurisdiction, a manmade structure, or a
            natural feature. A manmade structure or natural feature may also be a jurisdiction. A
            Place may be referenced to a Physical Location on the earth, or (if you don't want to
            use the PhysicalLocation class) directly to geographic coordinates. Both jurisdictions
            and natural features are historical entities. A Place thus may have begin and end dates,
            and changing boundaries that result from human or natural events. A Jurisdiction is the
            bounded geographic area within which an Agent has the authority to perform specified
            activities constrained by rules.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Place`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E22 (Place
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rdfs}comment`),
      literal(`A label, title or term designating a Place in order to make it
            distinguishable from other similar entities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rdfs}label`),
      literal(`Place Name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceName`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of a specialization of
            RiC-A28 (Name attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place and at least one Thing, when the first is
            associated with the existence and lifecycle of the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Place Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[119],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[120],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R074 and RiC-R074i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdfs}label`),
      literal(`Place Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[121],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${skos}scopeNote`),
      literal(`Broadly, a Place may be a member of three broad categories:
            jurisdiction, manmade structure, or a natural feature. Each of these three categories
            can subdivided into narrower categories.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PlaceType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A32 (Place Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rdfs}comment`),
      literal(`The functional role of a Person within a Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rdfs}label`),
      literal(`Position`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${skos}changeNote`),
      blankNodes[122],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${skos}scopeNote`),
      literal(`Position is a kind of Agent. Position is the intersection of a
            Person and a Group. Position exists independently of the Person that holds the Position
            within a Group. More than one Person may hold a Position. Position is commonly defined
            in a Mandate, often called a position description or job description. The Mandate may
            specify the work to be performed (Activity) as well as the competencies for performing
            the Activity. A Position is often given a Name. A Position may be tied to a project or
            to a set of tasks and thus have a defined duration. A Position may change over time, as
            the Group that establishes it changes over time. Position is not to be confused with
            Occupation or Activity. Within the records created by a Corporate Body, a Position may
            be used to identify the record sets resulting from activities performed by one or more
            persons holding the Position over time, without necessarily identifying or describing
            the Person or persons, or identifying which records were created by each
            Person.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Position`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E12 (Position
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Person, and at least one Position that the
            Person occupies.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`Position Holding Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[123],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[124],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R054 and RiC-R054i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Position, and a Group, when the first
            one(s) exist(s) in/is defined within the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}label`),
      literal(`Position to Group Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[125],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[126],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R056 and RiC-R056i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of the method used in the representation of
            information on the Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdfs}label`),
      literal(`Production Technique Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[127],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${skos}changeNote`),
      blankNodes[128],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A33 (Production
            Technique attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Specifies the provenance or origin of at least one Record
            Resource or Instantiation, for example the relation between a Record Resource and the
            Agent which created it or the Activity from which it resulted.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Provenance Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[129],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[130],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`This relation stands for organic and for functional
            provenance.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}comment`),
      literal(`A Proxy represents (stands for) a Record Resource as it exists
            in a specific Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}label`),
      literal(`Proxy`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[131],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[132],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${skos}scopeNote`),
      literal(`Useful for handling in RDF the sequencing of records or
            records sets in the context of a Record set. A Record Resource has only one Proxy in the
            context of one specific Record Set. It may have many Proxies simultaneously or through
            time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Proxy`),
      namedNode(`${rico}closeTo`),
      literal(`ORE Proxy (http://www.openarchives.org/ore/terms/Proxy)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rdfs}comment`),
      literal(`Information inscribed at least once by any method on any
            physical carrier in any persistent, recoverable form by an Agent in the course of life
            or work Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rdfs}label`),
      literal(`Record`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${skos}changeNote`),
      blankNodes[133],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${skos}changeNote`),
      blankNodes[134],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${skos}scopeNote`),
      literal(`Record is a kind of Record Resource. A Record must have or
            have had at least one Instantiation. A Record may have more than one Instantiation. A
            re-instantiation of the record may be considered the same record or a new record,
            depending on the context and of the functions that record serves. Such information may
            serve a variety of purposes, though it always documents or is evidence of
            Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Record`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E04 (Record
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rdfs}comment`),
      literal(`Part of a Record with discrete information content that
            contributes to the Record's physical or intellectual completeness.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rdfs}label`),
      literal(`Record Part`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${skos}changeNote`),
      blankNodes[135],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${skos}changeNote`),
      blankNodes[136],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${skos}scopeNote`),
      literal(`Record Part is a kind of Record Resource. A Record Part may
            itself have Record Parts.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordPart`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E05 (Record Part
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdfs}comment`),
      literal(`A Record, Record Set, or Record Part produced or acquired and
            retained by an Agent in the course of Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[137],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${skos}changeNote`),
      blankNodes[138],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${skos}changeNote`),
      blankNodes[139],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${skos}scopeNote`),
      literal(`Producing a record resource may imply either its newly
            creation or a reuse of previous existing information by combination, rearrangement,
            selecting, reformatting etc. Records, Record Sets, and Record Parts are all evidence of
            the activities of an Agent. More than one Agent may be involved in the creation of a
            Record Resource. The role of the Agent in creating the Record Resource may take
            different forms, for example, authoring of an individual record, accumulating a set of
            records, or forming a set of records. Though a Record, Record Set, and Record Part,
            under most circumstances, may be easily distinguished from one another, frequently
            identifying the boundary of each and how the “bounded information regions” interrelate,
            may present particular challenges. Documentary Forms provide the rules governing many
            Records, providing criteria for identifying its boundary, and identifying its essential
            Record Parts. Many Records, though, do not have well-established documentary forms,
            particularly electronic records, where it may be difficult to determine whether
            individual elements represented in separate bitstreams are record parts, records, or
            record sets. For example, is a photograph represented independently in a bitstream
            embedded in a text document a Record, or a Record Part ? Or is the same photograph
            attached to an email, maintaining its independent representation, a Record or a Record
            Part? When information is grouped for some purpose, for example, zip or tar “file
            compression” for saving storage space, presents a further challenge. One file comprises
            multiple bitstreams subjected to techniques that remove bits that can be losslessly
            recovered when decompressed. Under what circumstances is such a compressed bitstream a
            Record or a Record Set? Determining when an information object is a Record, Record Part,
            or Record Set is based on perspective and judgement exercised in a particular context.
            In one context, the Agent describing an information object may designate it a Record,
            while another Agent in a different context may designate it a Record Part. Both
            designations are supported by RiC, and the significance of the difference for users of
            the records is ameliorated by the fact that attributes and relations employed in
            describing each of the record entities are shared.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResource`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E02 (Record Resource
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rdfs}comment`),
      literal(`The extent of the content of a Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource Extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[140],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[141],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`Countable characteristics of the content of the Record
            Resource expressed as a quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-A35 (Record Resource
            extent attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two to more Record Resources when there is a genetic
            relation between them. Genetic in this sense is as defined by diplomatics, i.e. the
            process by which a Record Resource is developed.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource Genetic Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[142],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R023 and RiC-023i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Agent, and one or more Record Resource or
            Instantiation that the Agent holds.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource Holding Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}ManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[143],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[144],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R039 and RiC-039i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to one or more Instantiations that
            instantiate it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource to Instantiation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[145],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[146],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R025 and RiC-R025i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Record Resources.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource to Record Resource Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[147],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R022 and RiC-022i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdfs}comment`),
      literal(`One or more records that are associated by categorization and/or
            physical aggregation by the creator or other Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdfs}label`),
      literal(`Record Set`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[148],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${skos}changeNote`),
      blankNodes[149],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${skos}scopeNote`),
      literal(`Record Set is a kind of Record Resource. The Record members in
            a Record Set may physically reside together, though physical proximity is not essential.
            In a particular context, an Agent (e.g. administrator, records manager, archivist,
            end-user, etc.) may select the Record members of a Record Set based on a shared
            attribute or attributes, or a shared Relation or Relations. The grouping of the Records
            serves a purpose or purposes specific to the context of the Agent. All Record members of
            a Record Set may share the attribute of having been accumulated by the same Agent, or
            all share the same Documentary Form Type and are created over time by the same Activity.
            A Record Set may represent the act of classifying the Records in accordance with a
            formal classification scheme that may be based on Activity, subject, organizational
            structure, or other criteria; an act of archival arrangement (e.g. based on common
            provenance); or some other selection and grouping that fulfils a particular purpose or
            purposes (e.g. a classification that reflects or supports the purposes of a researcher).
            By exception, some Records are brought together based on their not belonging in the
            context of selection to other designated groups: a ‘Miscellaneous’ series, for example.
            A Record Set accumulated by an Agent in the course of life or work Activity should be
            kept in a manner that preserves context and evidential value. Records Sets may also
            contain other Records Sets. Both a Record Set and a Record may simultaneously be a
            member of more than one Record Set, and over the course of its existence, a Record Set
            or Record may be a member of an indeterminate number of Record Sets in an indeterminate
            number of contexts. Record Sets and Records contained within a Record Set may be ordered
            into a sequence based on a common property or relation, or common properties or
            relations (e.g. alphabetical by Agent or related Place name; chronological order by an
            allocated Date); or some other criterion (e.g. an imposed order by
            relevance).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSet`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E03 (Record Set
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdfs}comment`),
      literal(`A broad categorization of the type of Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdfs}label`),
      literal(`Record Set Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[150],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${skos}changeNote`),
      blankNodes[151],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${skos}scopeNote`),
      literal(`Four instances of Record Set Type are included for now in
            RiC-O; they also are instances of skos:Concept and, as such, part of a SKOS vocabulary.
            Record Set Type may also be used to categorize types of Record Set that have not
            traditionally been considered archival, e.g. search result list.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordSetType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A36 (Record Set Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of the production or reproduction status of a
            Record or Record Part.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rdfs}label`),
      literal(`Record State`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${skos}changeNote`),
      blankNodes[152],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${skos}changeNote`),
      blankNodes[153],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${skos}scopeNote`),
      literal(`Can in particular refer to a record state of development or
            its status of transmission once finished (draft, original, copy...). Specifying that a
            record resource has state copy usually implies that another record resource existed or
            exists, of which the one described is the copy. In such a case you can also use 'is copy
            of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RecordState`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A39 (State
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${rdfs}comment`),
      literal(`The top level relation class. It connects at least two Things.
            An instance of a Relation may have some datatype and object properties : a descriptive
            note (datatype property) like any Thing ; certainty (for 'certain', 'quite probable',
            'uncertain','unknown'); a date (use either the date datatype property or the Date class
            and isAssociatedWithDate object property ; a state (relationState) ; a location (use
            Place class and isAssociatedWithPlace object property) ; a source of information that
            can be used as an evidence for it (use either source datatype property or hasSource
            object property).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${rdfs}label`),
      literal(`Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${skos}changeNote`),
      blankNodes[154],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Relation`),
      namedNode(`${skos}scopeNote`),
      literal(`Use when direct, binary object properties are not enough, e.g.
            when you need to record a date, a location or any other descriptive element for a
            relation (till RDF-Star becomes a W3C recommendation and provides a lighter method for
            doing so); or when the relation invloves more than two entities (n-ary relation). It is
            recommended to use the subclasses of the Relation class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of the method of recording the content type of a
            Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdfs}label`),
      literal(`Representation Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[155],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${skos}changeNote`),
      blankNodes[156],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${skos}scopeNote`),
      literal(`Representation Type can be unmediated (which allows humans to
            receive the message communicated without an intermediation of a device) and mediated
            (which needs a device to decode the message). A lot of contemporary mediated types are
            digital. Each Representation Type may present specific features: bit rate for audio,
            resolution for digital images, encoding format for video etc. Depending of the type,
            properties may thus be needed to describe their characteristics. Not be confused with
            Content Type or Carrier Type since the form of representation can be independent of the
            communication or carrier.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RepresentationType`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A37 (Representation Type
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      namedNode(`${rdfs}comment`),
      literal(`When it exists, specifies the identifier and name of RiC-CM
            component that corresponds to the annotated class or property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      namedNode(`${rdfs}label`),
      literal(`RiC-CM corresponding component`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rdfs}comment`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RoleType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RoleType`),
      namedNode(`${rdfs}comment`),
      literal(`The role an agent plays in some context (usually in some
            creation relation). Not to be confused with a position (position of an agent in some
            group). For example, a person who is the head of some corporate body may play the role
            of annotator (of a record) in a creation relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RoleType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RoleType`),
      namedNode(`${rdfs}label`),
      literal(`Role Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RoleType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdfs}comment`),
      literal(`Conditions that govern the existence or authority of an Agent or the performance of an Activity, or that contribute to the distinct characteristics of things created or managed by an Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdfs}label`),
      literal(`Rule`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[157],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${skos}changeNote`),
      blankNodes[158],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${skos}changeNote`),
      blankNodes[159],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${skos}scopeNote`),
      literal(`Rule can be related directly to Agent, Activity, or anything created or managed by agents, such as a Record Resource or Instantiation.
            A Rule may be unwritten or written or otherwise documented. Unwritten rules may include though are not limited to the following:  social mores, customs, or community expectations. Written rules may include though are not limited to the following: constitutions, legislation, acts (legal), statutes, legal codes, ordinances, charters, mission statements, regulations, policies, procedures, instructions, codes of conduct or ethics, professional standards, work assignments or work plans.
            The source or sources of some Rules are external to the Agent (for example, expressed in elections, social mores, customs, community expectations, laws, regulations, standards and best practice codes), while others are expressed within the Agent’s immediate context (for example, policies, or written or verbal instructions).
            The evidence for identifying Rules may be found in their entirety in one documentary source (for example, a law or regulation) or may be found in two or more sources.
            Rule should not be confused with the one or more documentary sources that serve as evidence of its identity. A documentary source is a Record.
           `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Rule`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E16 (Rule
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Rule to at least one Thing, when it is
            associated with existence and lifecycle of the Thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}label`),
      literal(`Rule Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[160],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[161],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R062 and RiC-R062i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdfs}comment`),
      literal(`Categorization of a Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdfs}label`),
      literal(`Rule Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[162],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${skos}changeNote`),
      blankNodes[163],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}RuleType`),
      namedNode(`${skos}scopeNote`),
      literal(`For example, for rules that can be applied to record resources
            : access rule, use rule, etc.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Thing to at least one Thing that follows
            it in some sequence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}label`),
      literal(`Sequential Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[164],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[165],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SequentialRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R008 and RiC-R008i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Persons, when they are
            siblings.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdfs}label`),
      literal(`Sibling Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}FamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[166],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SiblingRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R048 and048i
            relations RiC-`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rdfs}comment`),
      literal(`Chronological information associated with an entity that
            contributes to its identification and contextualization, related to a single point in
            time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rdfs}label`),
      literal(`Single Date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SingleDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E19 (SingleDate
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Persons, when they are
            spouses.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdfs}label`),
      literal(`Spouse Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}FamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[167],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}SpouseRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R049 and RiC-R049i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Person to at least another Person, who is
            their student.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}label`),
      literal(`Teaching Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}KnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[168],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[169],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TeachingRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R053 and RiC-R053i
            relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least one Thing to at least one Thing that follows
            it in chronological order.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`Temporal Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}SequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[170],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[171],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TemporalRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R009 and RiC-R009i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${rdfs}comment`),
      literal(`Any idea, material thing, or event within the realm of human
            experience.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${rdfs}label`),
      literal(`Thing`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${skos}changeNote`),
      blankNodes[172],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${skos}scopeNote`),
      literal(`Includes all RiC entities as well as any concept, material
            thing, or event that may be the subject of a Record Resource or associated with an
            Activity. Examples of entities not explicitly addressed in RiC includes but is not
            limited to the following: abstract concepts; cultural movements, named periods and
            events; named things, objects and works; legendary, mythical or fictitious figures,
            characters or beings.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Thing`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-E01 (Thing
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rdfs}comment`),
      literal(`A name that is used for a Record Resource or a
            Rule`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rdfs}label`),
      literal(`Title`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Title`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of a specialization of
            RiC-A28 (Name attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Type`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Type`),
      namedNode(`${rdfs}comment`),
      literal(`A superclass for any category of some thing. A type
            characterizes an entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Type`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Type`),
      namedNode(`${rdfs}label`),
      literal(`Type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}Type`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a category (a Type) and at least one Thing that belongs
            to this category.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}label`),
      literal(`Type Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[173],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[174],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}TypeRelation`),
      namedNode(`${skos}scopeNote`),
      literal(`may be useful at least for some types (e.g. demographic
            group)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${rdfs}comment`),
      literal(`A definite magnitude of a quantity, defined and adopted by convention or by
            law, that is used as a standard for measurement of the same kind of quantity. Can be
            spacial units (cm, m), weigt (g, kg), time (s, h), storage (MB, TB) or more informal
            units used in the archival context like number of boxes, pages or words.`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${rdfs}label`),
      literal(`Unit Of Measurement`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(`${skos}changeNote`),
      blankNodes[175],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to at least one constitutive or component part
            of that Thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}label`),
      literal(`Whole Part Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[176],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[177],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WholePartRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R002 and RiC-R002i
            relations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects at least two Agents that have some type of work
            relation in the course of their activities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdfs}label`),
      literal(`Work Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[178],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}WorkRelation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Class implementation of RiC-R046 and RiR046i
            relations-`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdfs}comment`),
      literal(`Information on the anticipated accession(s) to the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdfs}label`),
      literal(`accrual`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${skos}scopeNote`),
      literal(`See also accrualStatus`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrual`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`corresponds to RiC-A01 (Accrual
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdfs}comment`),
      literal(`Information on the status of an Accrual`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdfs}label`),
      literal(`accrual status`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${skos}changeNote`),
      blankNodes[179],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${skos}scopeNote`),
      literal(`A text statement or single words such as “Closed” to indicate
            that no additional Record Resource will (or is anticipated to) be added to the Record
            Set; “Open” to indicate that additional records or record sets will (or are expected to)
            be added to the Record Set; or “Unknown” to indicate that this information is not
            available, for example. See also accrual`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accrualStatus`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`corresponds to RiC-A01 (Accrual
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Accumulation Relation to one of the accumulated
            Record Resources or Instantiations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`accumulation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[180],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Accumulation Relation to one of the accumulating
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`accumulation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity Documentation Relation to one of the
            resulting Record Resources or Instantiations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`activity documentation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[181],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity Documentation Relation to one of the
            documented Activities`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`activity documentation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity to an Agent Temporal Relation (when the
            Activity is transferred from an Agent to another one) or a Mandate Relation (the Mandate
            assigns the Activity to the Agent or defines it).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`activity is context of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}range`),
      blankNodes[182],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}asConcernsActivity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity that is performed to a Performance
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`activity is source of performance relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity to an Activity Documentation
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}label`),
      literal(`activity is target of activity documentation relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}activityIsTargetOfActivityDocumentationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to a Thing on which the Event has or had some
            significant impact.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}label`),
      literal(`affects or affected`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${skos}changeNote`),
      blankNodes[183],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}affectsOrAffected`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R059 ('affects or affected'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Control Relation to one of the controlling
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`agent control relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Control Relation to one of the controlled
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`agent control relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`s`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Work Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent has work relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}WorkRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}workRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Hierarchical Relation to one of the
            hierarchically superior Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`agent hierarchical relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Hierarchical Relation to one of the
            hierarchically inferior Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`agent hierarchical relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to an Agent Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is connected to agent relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a controlling Agent to an Agent Control
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of agent control relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a hierarchically superior Agent to an Agent
            Hierarchical Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of agent hierarchical relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a predecessor Agent to an Agent Temporal
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of agent temporal relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent thas has the authority, to an Authority
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of authority relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent having the intellectual property rights, to an
            Intellectual Property Rights Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[184],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of intellectual property rights relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a manager Agent to a Management Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of management relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an owner Agent to an Ownership Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[185],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of ownership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}OwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent that holds a Record Resource or Instantiation,
            to a Record Resource Holding Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is source of record resource holding relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects one of the accumulating Agents to an Accumulation
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of accumulation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects one of the controlled Agents to an Agent Control
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of agent control relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects one of the hierarchically inferior Agents to an Agent
            Hierarchical Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of agent hierarchical relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects one of the Agents that created or accumulated the
            Record resource or Instantiation, to an Agent Origination Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of agent origination relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a successor Agent to an Agent Temporal
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of agent temporal relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person, Group or Position to an Authorship
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[186],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of authorship relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(`${skos}changeNote`),
      blankNodes[187],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a creator Agent to a Creation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of creation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a mandated Agent to a Mandate Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of mandate relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Performance Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent is target of performance relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent or Activity that is the provenance of a Record
            resource or Instantiation, to a Provenance Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[188],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`agent or activity is target of provenance relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Origination Relation to one of the resulting
            Record Resource or Instantiation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`agent origination relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[189],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Origination Relation to one of the creating or
            accumulating Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`agent origination relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Relation to one of the involved
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`agent relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Temporal Relation to one of the predecessor
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`agent temporal relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Temporal Relation to one of the successor
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`agent temporal relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}comment`),
      literal(`Reference system used for altitude`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}label`),
      literal(`altimetric system`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altimetricSystem`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}referenceSystem`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}comment`),
      literal(`The height of a Place above a reference level, especially above
            sea level.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}label`),
      literal(`altitude`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}measure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}altitude`),
      namedNode(`${skos}scopeNote`),
      literal(`Property of the Coordinates class. If you don't use this
            class, use geographicalCoordinates property, a property of Place class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation to an Appellation
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}label`),
      literal(`appellation is source of appellation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation Relation to the concerned
            Appellation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`appellation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}appellationIsSourceOfAppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation Relation to one of the designated
            Things`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`appellation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Temporal Relation or Mandate Relation, to an
            Activity that is, either transferred from an Agent to another one, or assigned by a
            Mandate to an Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}domain`),
      blankNodes[190],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}label`),
      literal(`as concerns activity `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}asConcernsActivity`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}activityIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdfs}comment`),
      literal(`Description of evidences that the Record Resource or
            Instantiation is what it purports to be, was created or sent by the said Agent, at the
            said time and has not been tampered or corrupted.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdfs}domain`),
      blankNodes[191],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdfs}label`),
      literal(`authenticity note`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}changeNote`),
      blankNodes[192],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The charter is missing the seal of the King.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The electronic signature validity cannot by assessed, but the
            content was not modified from the moment of signing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The record bears no signature.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The record bears signatures and it was preserved.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The record is digitally signed by the Notary.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The timestamp exists but cannot be verified.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}example`),
      literal(`The whole collection consists of copies of the charters issued
            by Vlad the Impaler.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${skos}scopeNote`),
      literal(`For electronic records, it may include results from automated
            means of checking the validity of signatures and timestamp.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authenticityNote`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A03 (Authenticity Note
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Authority Relation to an Agent that has the
            authority`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`authority relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Authority Relation to a Thing over which the
            Authority is performed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`authority relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'authorizes' object property`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}label`),
      literal(`authorized by `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Mandate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorizes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[193],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R067i ('authorizedBy'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Mandate to the Agent that the Mandate gives the
            authority or competencies to act.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Mandate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}label`),
      literal(`authorizes`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorizedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[194],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${skos}changeNote`),
      blankNodes[195],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizes`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R067 ('authorizes'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Mandate Relation to an Agent that assigns the
            Mandate.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}label`),
      literal(`authorizing agent `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingAgent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}comment`),
      literal(`Information on a Mandate that authorizes an Agent to perform an
            Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}label`),
      literal(`authorizing mandate`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}ruleFollowed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorizingMandate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use the Mandate class for handling
            mandates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Authorship Relation to one of the Records involved
            in the relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`authorship relation has source`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(`${skos}changeNote`),
      blankNodes[196],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Authorship Relation to one of the author Person,
            Group or Position.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`authorship relation has target`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}range`),
      blankNodes[197],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(`${skos}changeNote`),
      blankNodes[198],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which something began.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}label`),
      literal(`beginning date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}beginningDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which a Person was born.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}label`),
      literal(`birth date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}beginningDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}birthDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}comment`),
      literal(`Used system of reckoning time in which the beginning, length,
            and divisions of a year are defined, sometimes along with multiyear
            cycles.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}label`),
      literal(`calendar`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}dateStandard`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}calendar`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Specialization of RiC-A14 (Date Standard
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}comment`),
      literal(`Number of physical units and/or physical dimensions of the
            carrier of a record resource instantiation. Various carriers, depending on specific
            needs, may have more than one relevant dimension. In some cases, indicating the number
            of physical units may be sufficient, while in other case, relevant dimensions should be
            used in order to characterize the carrier.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}label`),
      literal(`carrier extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[199],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}example`),
      literal(`1 page`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}example`),
      literal(`17 x 34.5 cm`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}example`),
      literal(`2 pieces of parchment, 30 x 50 cm and 32,5 x 49
            cm`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}example`),
      literal(`3GB USB key`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`For electronic resources, it indicates the size of storage
            capacity (disk, tape, film etc.). Carrier Extent should not be confused with Record
            Resource Extent or Instantiation Extent. For a given Record Resource, the Instantiation
            Extent may vary, based on format, density of information on the carrier, etc. For
            example, 1500 words (Record Resource Extent) may have Instantiation Extent 3kb as a Word
            document and 5kb as a PDF file, and instantiations may be represented on a CD of 700mb
            (Carrier Extent). Use if you don't use CarrierExtent class and its properties for
            handling such information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}carrierExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A04 (Carrier Extent
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdfs}comment`),
      literal(`Qualifies the level of certitude of the accuracy of a Date, an
            Event or a Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdfs}domain`),
      blankNodes[200],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdfs}label`),
      literal(`certainty`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${skos}changeNote`),
      blankNodes[201],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}certainty`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A06 (Certainty
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Child Relation to a parent Person`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`child relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Child Relation to a child Person`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`child relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdfs}comment`),
      literal(`A term, number or alphanumeric string that is usually taken from
            an external classification vocabulary or scheme that qualifies the Record
            Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdfs}label`),
      literal(`classification`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}changeNote`),
      blankNodes[202],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}example`),
      literal(`BUD-01-F002 [example of a classification number from a corporate
            file plan]`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}example`),
      literal(`digitized items`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}example`),
      literal(`financial affairs`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}example`),
      literal(`human resource management`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}example`),
      literal(`student registration`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${skos}scopeNote`),
      literal(`No further statement is made here about the nature of the
            qualifier, nor about the relation it has with the Record Resource or with the management
            of the Record Resource. The value of this property may in turn be used as a criterion
            for identifying the qualified Record Resource as a member of a Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}classification`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A07 (Classification
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}closeTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}AnnotationProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}closeTo`),
      namedNode(`${rdfs}comment`),
      literal(`An annotation property for recording a possible mapping to a
            component in another model or ontology`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}closeTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}closeTo`),
      namedNode(`${rdfs}label`),
      literal(`close to`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}closeTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rdfs}comment`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdfs}comment`),
      literal(`Terms and circumstances affecting the availability of a Record
            Resource for consultation. Such conditions may originate in laws, regulations and
            policies, including those pertaining to privacy and security concerns or restrictions;
            they may concern a specific Instantiation of a Record Resource, for example, conditions
            that require preservation treatment; or they may specify the software or hardware
            necessary to access the Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdfs}domain`),
      blankNodes[203],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdfs}label`),
      literal(`conditions of access`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}changeNote`),
      blankNodes[204],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`Acceso libre a través de los terminales de
            consulta`, 'es'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`Recognita software, min. version 3.0, is needed in order to open
            the file.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`closed as awaiting conservation treatment`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`closed under data protection legislation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`open`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}example`),
      literal(`the Archives cannot provide VHS reader to access the content of
            the tape.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${skos}scopeNote`),
      literal(`This property provides information about the accessibility of
            a Record Resource, as well as the physical, technical or legal limitations that exist
            for providing access to it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfAccess`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A08 (Conditions of Access
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdfs}comment`),
      literal(`Terms and circumstances affecting the use of a Record Resource
            after access has been provided. Includes conditions governing reproduction of the Record
            Resource under applicable copyright (intellectual property) and/or property legislation,
            and of the Instantiation, due to conservation status.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdfs}domain`),
      blankNodes[205],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdfs}label`),
      literal(`conditions of use`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${skos}changeNote`),
      blankNodes[206],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${skos}example`),
      literal(`Freely usable without restrictions`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${skos}example`),
      literal(`The permission of the owner of the Record must be obtained
            before use.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${skos}example`),
      literal(`The record cannot be copied using warm light copying machines or
            photographed using flashlight.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}conditionsOfUse`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A09 (Conditions of Use
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to a region that is or was within
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}label`),
      literal(`contains or contained`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${skos}changeNote`),
      blankNodes[207],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${skos}scopeNote`),
      literal(`Use for connecting two geographical or administrative
            regions.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}containsOrContained`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R007 ('contains or contained'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Correspondence Relation to one of the Persons
            involved`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`correspondence relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which an entity was created.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}label`),
      literal(`creation date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}beginningDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Creation Relation to one of the created Record
            Resources or Instantiations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`creation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[208],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Creation Relation to one of the creator
            Agents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`creation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Creation Relation to the Role Type that the creator
            Agent(s) has in the creation process`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}label`),
      literal(`creation with role `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RoleType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}creationWithRole`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdfs}comment`),
      literal(`Chronological information associated with an entity that
            contributes to its identification and contextualization.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdfs}label`),
      literal(`date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons, like its subproperties. May be
            deprecated and removed later on. Use only if you don't use Date classes for handling
            dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}date`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property implementation of RiC-E18 (Date
            entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdfs}comment`),
      literal(`Indicates the precision of a date. It specifies if, and to what
            extent, the value is an estimation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdfs}label`),
      literal(`date qualifier`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${skos}changeNote`),
      blankNodes[209],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${skos}example`),
      literal(`circa`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${skos}example`),
      literal(`during`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${skos}example`),
      literal(`exact`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateQualifier`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A13 (Date Qualifier
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}comment`),
      literal(`Identifier of the standard of the Normalized
            date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}label`),
      literal(`date standard`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}referenceSystem`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${skos}changeNote`),
      blankNodes[210],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${skos}example`),
      literal(`IETF`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${skos}example`),
      literal(`ISO8601`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}dateStandard`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A14 (Date Standard
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which a Person died.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}label`),
      literal(`death date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}endDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deathDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which an entity was deleted.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}label`),
      literal(`deletion date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}endDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}deletionDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Derivation Relation to the Instantiation from which
            one or more Instantiations is derived.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`derivation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Derivation Relation to one of the derived
            Instantiations`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`derivation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Descendance Relation to one of the ancestor
            Persons`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`descendance relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Descendance Relation to one of the descendant
            Persons`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`descendance relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a Thing that it
            describes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}label`),
      literal(`describes or described`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${skos}changeNote`),
      blankNodes[211],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${skos}scopeNote`),
      literal(`Can be used, among other situations, for specifying that some
            finding aid (a Record that has Documentary Form Type Finding Aid) describes some Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}describesOrDescribed`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R021 (describes or
            described)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdfs}comment`),
      literal(`Descriptive information about an entity that is not otherwise
            addressed.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdfs}label`),
      literal(`descriptive note`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}descriptiveNote`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A16 (Descriptive Note
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'documents' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}label`),
      literal(`documented by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}range`),
      blankNodes[212],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}documents`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[213],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documentedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R033i ('documented by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Activity
            that generates the Record Resource or Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}domain`),
      blankNodes[214],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}label`),
      literal(`documents`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}documentedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[215],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${skos}changeNote`),
      blankNodes[216],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}documents`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R033 ('documents'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which something ended.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}label`),
      literal(`end date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}endDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to an Event Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}label`),
      literal(`event is source of event relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}EventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event Relation to an Event`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}EventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`event relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event Relation to an associated Thing`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}EventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`event relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position to a Group in which that Position exists or
            existed, or that is defined by that Group�s organizational structure.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}label`),
      literal(`exists or existed in`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[217],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${skos}changeNote`),
      blankNodes[218],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R056 ('exists or existed in'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}comment`),
      literal(`Natural language expression of a Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}label`),
      literal(`expressed date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}textualValue`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${skos}changeNote`),
      blankNodes[219],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${skos}example`),
      literal(`1925-1966`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${skos}example`),
      literal(`October 24th, 1999`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${skos}example`),
      literal(`The Sunday before Christmas`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressedDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A19 (Expressed Date
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was expressed by' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}label`),
      literal(`expresses or expressed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${skos}changeNote`),
      blankNodes[220],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R064i ('expresses or expressed'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Family Relation to a Person.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}FamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`family relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}familyRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'precedes in time' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}label`),
      literal(`follows in time`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsOrFollowed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[221],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${skos}changeNote`),
      blankNodes[222],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsInTime`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R009i ('follows in time'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'precedesOrPreceded' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}label`),
      literal(`follows or followed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[223],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${skos}changeNote`),
      blankNodes[224],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}followsOrFollowed`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R008i ('follows or followed'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Functional Equivalence Relation to one of the
            functionally equivalent Instantiations.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`functional equivalence relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}comment`),
      literal(`Reference system used for geographical
            coordinates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}label`),
      literal(`geodesic system`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geodesicSystem`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}referenceSystem`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdfs}comment`),
      literal(`Longitudinal and latitudinal information of a
            Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdfs}label`),
      literal(`geographical coordinates`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${skos}changeNote`),
      blankNodes[225],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${skos}example`),
      literal(`Latitude 35.89421911, Longitude 139.94637467`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${skos}example`),
      literal(`Latitude 50°40′46,461″N, Longitude 95°48′26,533″W, Height
            123,45m`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use PhysicalLocation and Coordinates classes with Place.
            Coordinates may be based on ISO 6709 Standard representation of geographic point
            location by coordinates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}geographicalCoordinates`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A11 (Coordinates
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects the Group that has at least a subdivision, to a Group
            Subdivision Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}label`),
      literal(`group is source of group subdivision relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects the Group (that has one to many members) to a
            Membership Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`group is source of membership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group that is a subdivision, to a Group Subdivision
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}label`),
      literal(`group is target of group subdivision relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group (which has a leader) to a Leadership
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`group is target of leadership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects the Group (in which a Position exists) to a Position To
            Group Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}label`),
      literal(`group is target of position to group relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group Subdivision Relation to the Group that has
            subdivisions`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`group subdivision relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group Subdivision Relation to one of the Groups that
            is a subdivision`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}GroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`group subdivision relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Agent that
            accumulates it, be it intentionally (collecting) or not (receiving in the course of its
            activities).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}domain`),
      blankNodes[226],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}label`),
      literal(`has accumulator`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasProvenance`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[227],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${skos}changeNote`),
      blankNodes[228],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAccumulator`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R028 ('has accumulator'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity to an Activity Type that categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}label`),
      literal(`has activity type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ActivityType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasActivityType`),
      namedNode(`${skos}changeNote`),
      blankNodes[229],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Agent that
            it is addressed to.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}domain`),
      blankNodes[230],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}label`),
      literal(`has addressee`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasProvenance`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAddresseeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${skos}changeNote`),
      blankNodes[231],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${skos}scopeNote`),
      literal(`The identity of the addressee is (usually) evidenced by the
            Record Resource or Instantiation itself.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAddressee`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R032 ('has addressee'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has descendant' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}label`),
      literal(`has ancestor`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isSuccessorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasDescendant`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[232],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${skos}changeNote`),
      blankNodes[233],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAncestor`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R017i (has ancestor
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record to the Group, Person or Position that is
            responsible for conceiving and formulating the information contained in the
            Record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}label`),
      literal(`has author`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}range`),
      blankNodes[234],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasCreator`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAuthorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[235],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${skos}changeNote`),
      blankNodes[236],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${skos}scopeNote`),
      literal(`To be used for any contribution to the content of a Record.
            Includes (of course) the Person, Group or Position in whose name or by whose command the
            content may have been formulated and first instantiated (e.g. the person who signed
            it).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasAuthor`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R079 ('has author'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is beginning date of' object property`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}label`),
      literal(`has beginning date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBeginningDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R069i ('has beginning date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is birth date of' object property`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}label`),
      literal(`has birth date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasBeginningDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isBirthDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasBirthDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R070i ('has birth date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to a Carrier Type which categorizes
            its carrier.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}label`),
      literal(`has carrier type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CarrierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCarrierType`),
      namedNode(`${skos}changeNote`),
      blankNodes[237],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to one of their children.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}label`),
      literal(`has child`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasDescendant`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isChildOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[238],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${skos}changeNote`),
      blankNodes[239],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasChild`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R018 ('has child'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Agent that
            collects it intentionally (is a collector).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}domain`),
      blankNodes[240],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}label`),
      literal(`has collector`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasAccumulator`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isCollectorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${skos}changeNote`),
      blankNodes[241],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCollector`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R030 ('has collector'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record or a Record Part to a Content Type which
            categorizes its content.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}domain`),
      blankNodes[242],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}label`),
      literal(`has content of type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isContentTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasContentOfType`),
      namedNode(`${skos}changeNote`),
      blankNodes[243],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a copy of that Record
            Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}label`),
      literal(`has copy `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isCopyOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCopy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R012 ('has copy'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to an Agent that
            is either responsible for all or some of the content of the Record Resource or is a
            contributor to the genesis or production of an Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}domain`),
      blankNodes[244],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}label`),
      literal(`has creator`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasProvenance`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isCreatorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${skos}changeNote`),
      blankNodes[245],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${skos}scopeNote`),
      literal(`Covers the definition of author in diplomatics, and any
            contribution to the intellectual content of a Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasCreator`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R027 ('has creator'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is death date of' object property`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}label`),
      literal(`has death date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasEndDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isDeathDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDeathDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R072i ('has death date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to an Instantiation that is derived
            from it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}label`),
      literal(`has derived instantiation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[246],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R014 ('has derived instantiation'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to one of their descendants.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}label`),
      literal(`has descendant`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasSuccessor`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasAncestor`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[247],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${skos}changeNote`),
      blankNodes[248],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDescendant`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R017 ('has descendant'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record or Record Part to its Documentary Form
            Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}domain`),
      blankNodes[249],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}label`),
      literal(`has documentary form type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(`${skos}changeNote`),
      blankNodes[250],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is draft of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}domain`),
      blankNodes[251],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}label`),
      literal(`has draft `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}range`),
      blankNodes[252],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isDraftOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasDraft`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-011i ('has draft'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is end date of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}label`),
      literal(`has end date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isEndDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEndDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R071i ('has end date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to an Event Type which categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}label`),
      literal(`has event type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}EventType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isEventTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasEventType`),
      namedNode(`${skos}changeNote`),
      blankNodes[253],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation to an Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}domain`),
      blankNodes[254],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}label`),
      literal(`has extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isExtentOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[255],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Extent to an Extent Type that categorizes what is being
            measured.`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}label`),
      literal(`has extent type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ExtentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasExtentType`),
      namedNode(`${skos}changeNote`),
      blankNodes[256],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Persons that have some type of family link, i.e.
            belong to the same family. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}label`),
      literal(`has family association with`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[257],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${skos}changeNote`),
      blankNodes[258],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R047 ('has family association with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Family to a Family Type that categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Family`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}label`),
      literal(`has family type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}FamilyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasFamilyType`),
      namedNode(`${skos}changeNote`),
      blankNodes[259],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Record Resources when there is a genetic link
            between them. Genetic in this sense is as defined by diplomatics, i.e. the process by
            which a Record Resource is developed. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}label`),
      literal(`has genetic link to record resource `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${skos}scopeNote`),
      literal(`Use to connect two Record Resources only if it is not possible
            to be more accurate and specify a narrower, asymmetric relation, e.g. ‘is original
            of’.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R023 ('has genetic link to record resource'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Identifier and an Identifier Type that categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Identifier`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}label`),
      literal(`has identifier type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}IdentifierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${skos}changeNote`),
      blankNodes[260],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasIdentifierType`),
      namedNode(`${skos}changeNote`),
      blankNodes[261],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to one of its
            Instantiations.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}label`),
      literal(`has instantiation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isInstantiationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[262],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${skos}changeNote`),
      blankNodes[263],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasInstantiation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R025 ('has instantiation'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is modification date of' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}label`),
      literal(`has modification date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isModificationDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasModificationDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R073i ('has modification date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent and (one of) its present or past Agent
            Name.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}label`),
      literal(`has or had agent name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(`${skos}changeNote`),
      blankNodes[264],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Category (Type) to which all the
            Records or Record Parts that are or were included in the Record Set
            belong.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}label`),
      literal(`has or had all members with category`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(`${skos}changeNote`),
      blankNodes[265],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Content Type that categorizes all
            the Records or Record Parts that are or were included in the Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}label`),
      literal(`has of had all members with content type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(`${skos}changeNote`),
      blankNodes[266],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Documentary Form Type that
            categorizes all the Records or Record Parts that are or were included in the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}label`),
      literal(`has of had all members with documentary form type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(`${skos}changeNote`),
      blankNodes[267],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Language used by all the Records or
            Record Parts that are or were included in the Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}label`),
      literal(`has of had all members with language`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(`${skos}changeNote`),
      blankNodes[268],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Legal Status that categorizes all
            the Records or Record Parts that are or were included in the Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}label`),
      literal(`has of had all members with legal status`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(`${skos}changeNote`),
      blankNodes[269],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Record State that categorizes all
            the Records or Record Parts that are or were included in the Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}label`),
      literal(`has of had all members with record state`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(`${skos}changeNote`),
      blankNodes[270],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to an Appellation that is or was used for
            designating it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}label`),
      literal(`has or had appellation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[271],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(`${skos}changeNote`),
      blankNodes[272],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Thing the Agent has or had authority
            over.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}label`),
      literal(`has or had authority over`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[273],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${skos}changeNote`),
      blankNodes[274],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R036 ('has or had authority over'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Type that categorizes or categorized
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}label`),
      literal(`has or had category`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[275],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(`${skos}changeNote`),
      blankNodes[276],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to one of its present or past
            component instantiations.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}label`),
      literal(`has or had component`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${skos}changeNote`),
      blankNodes[277],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R004 ('has or had component'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record to a Record Part that is or was a component of
            that Record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}label`),
      literal(`has or had constituent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${skos}changeNote`),
      blankNodes[278],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R003 ('has or had constituent'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was controller of' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}label`),
      literal(`has or had controller`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[279],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${skos}changeNote`),
      blankNodes[280],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadController`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R041i ('has or had controller'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Physical Location to its past or present coordinates
            in a reference system.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}label`),
      literal(`has coordinates`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(`${skos}changeNote`),
      blankNodes[281],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Corporate Body to a Corporate Body Type which
            categorizes or categorized it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CorporateBody`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}label`),
      literal(`has or had corporate body type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CorporateBodyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(`${skos}changeNote`),
      blankNodes[282],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Persons that correspond or have corresponded with
            each other. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}label`),
      literal(`has or had correspondent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knows`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[283],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${skos}changeNote`),
      blankNodes[284],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadCorrespondent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R052 ('has or had correspondent'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person or a Group to a Demographic Group to which it
            belongs or belonged.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}domain`),
      blankNodes[285],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}label`),
      literal(`has or had demographic group`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DemographicGroup`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(`${skos}changeNote`),
      blankNodes[286],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was holder of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}domain`),
      blankNodes[287],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}label`),
      literal(`has or had holder`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadManager`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[288],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${skos}changeNote`),
      blankNodes[289],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R039i ('has or had holder'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to one of its past or present
            Identifiers.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}label`),
      literal(`has or had identifier`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Identifier`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(`${skos}changeNote`),
      blankNodes[290],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was holder of intellectual property rights of'
            object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}domain`),
      blankNodes[291],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}label`),
      literal(`has or had intellectual property rights holder`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}range`),
      blankNodes[292],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[293],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${skos}changeNote`),
      blankNodes[294],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R040i ('has or had intellectual property
            rights holder ' relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was jurisdiction of' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}label`),
      literal(`has or had jurisdiction`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${skos}changeNote`),
      blankNodes[295],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R076i ('has or had jurisdiction'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent or Record Resource to a Language that it uses
            or used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}domain`),
      blankNodes[296],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}label`),
      literal(`has or had language`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(`${skos}changeNote`),
      blankNodes[297],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was leader of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}label`),
      literal(`has or had leader`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadController`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[298],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${skos}changeNote`),
      blankNodes[299],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R042i ('has or had leader'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent or Record Resource to a Legal Status which
            categorized or categorizes it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}domain`),
      blankNodes[300],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}label`),
      literal(`has or had legal status`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(`${skos}changeNote`),
      blankNodes[301],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was location of' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}label`),
      literal(`has or had location`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${skos}changeNote`),
      blankNodes[302],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R075i ('has or had location'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a Thing that is or was its main
            subject.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}label`),
      literal(`has or had main subject`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${skos}changeNote`),
      blankNodes[303],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${skos}scopeNote`),
      literal(`Use for specifying, for example, that a Record Set of type
            personal file has main subject some person, which would help end users to retrieve the
            main archival resources about this person.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R020 ('has or had main subject'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was manager of' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}domain`),
      blankNodes[304],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}label`),
      literal(`has or had manager`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[305],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${skos}changeNote`),
      blankNodes[306],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadManager`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R038i ('is or was managed by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group to a Person that is or was a member of that
            Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}label`),
      literal(`has or had member`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[307],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${skos}changeNote`),
      blankNodes[308],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadMember`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R055 ('has or had member'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to one of its past or present
            Names.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}label`),
      literal(`has or had name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadName`),
      namedNode(`${skos}changeNote`),
      blankNodes[309],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to an Occupation Type that categorized or
            categorizes his/her occupation (profession, trade or craft).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}label`),
      literal(`has or had occupation of type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}OccupationType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(`${skos}changeNote`),
      blankNodes[310],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was owner of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}label`),
      literal(`has or had owner`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}range`),
      blankNodes[311],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[312],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${skos}changeNote`),
      blankNodes[313],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R037i ('has or had owner'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a constitutive or component part of that
            Thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}label`),
      literal(`has or had part`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[314],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${skos}changeNote`),
      blankNodes[315],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${skos}scopeNote`),
      literal(`The end of existence of a whole/part relation may affect the
            integrity or nature of the domain entity`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPart`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R002 (has or had part
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to a Thing that is or was actively or
            passively involved in it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}label`),
      literal(`has or had participant`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${skos}changeNote`),
      blankNodes[316],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R058 ('has or had participant'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to one of its past or present Physical
            Location.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}label`),
      literal(`has or had physical location`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${skos}changeNote`),
      blankNodes[317],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(`${skos}changeNote`),
      blankNodes[318],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to one of its past or present
            names.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}label`),
      literal(`has or had place name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PlaceName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(`${skos}changeNote`),
      blankNodes[319],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to a Place Type that categorized or categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}label`),
      literal(`has or had place type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PlaceType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(`${skos}changeNote`),
      blankNodes[320],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'exists or existed in' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}label`),
      literal(`has or had position`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}existsOrExistedIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${skos}changeNote`),
      blankNodes[321],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadPosition`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R056i ('has or had position'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to a Rule Type that categorized or categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}label`),
      literal(`has or had rule type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RuleType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${skos}changeNote`),
      blankNodes[322],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(`${skos}changeNote`),
      blankNodes[323],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Category (Type) to which some of the
            Records or Record Parts that are or were included in the Record Set
            belong.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with category`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(`${skos}changeNote`),
      blankNodes[324],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Content Type that categorizes some
            of the Records or Record Parts that are or were included in the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with content type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(`${skos}changeNote`),
      blankNodes[325],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Language used by some of the Records
            or Record Parts that are or were included in the Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with language`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(`${skos}changeNote`),
      blankNodes[326],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Legal Status that categorizes some
            of the Records or Record Parts that are or were included in the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with legal status`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(`${skos}changeNote`),
      blankNodes[327],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Record State that categorizes some
            of the Records or Record Parts that are or were included in the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with record state`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(`${skos}changeNote`),
      blankNodes[328],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set and a Documentary Form Type that
            categorizes some of the Records or Record Parts that are or were included in the Record
            Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}label`),
      literal(`has or had some members with documentary form type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(`${skos}changeNote`),
      blankNodes[329],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Persons that are or were married. This relation is
            symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}label`),
      literal(`has or had spouse`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[330],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${skos}changeNote`),
      blankNodes[331],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSpouse`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R049 ('has or had spouse'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had teacher' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}label`),
      literal(`has or had student`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knows`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[332],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${skos}changeNote`),
      blankNodes[333],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R053i ('has or had student'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group to one of its present or past
            subdivisions.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}label`),
      literal(`has or had subdivision`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[334],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${skos}changeNote`),
      blankNodes[335],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R005 ('has or hadsubdivision'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to one of a series of Events that constitute
            the original, broader, past or ongoing Event.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}label`),
      literal(`has or had subevent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${skos}changeNote`),
      blankNodes[336],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${skos}scopeNote`),
      literal(`Since an Activity is a kind of Event, this Relation can also
            be used for Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R006 ('has or had subevent'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a Thing that is or was its
            subject.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}label`),
      literal(`has or had subject`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${skos}changeNote`),
      blankNodes[337],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R019 ('has or had subject'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to an Agent that is hierarchically
            inferior.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}label`),
      literal(`has or had subordinate`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[338],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${skos}changeNote`),
      blankNodes[339],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${skos}scopeNote`),
      literal(`The hierarchical relation can be an authority relation, or a
            whole/part relation between two Groups`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R045 ('has or had subordinate '
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to another Person who is or was their
            student.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}label`),
      literal(`has or had teacher`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knows`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadStudent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[340],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${skos}changeNote`),
      blankNodes[341],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTeacher`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R053 ('has or had teacher'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource, Instantiation or Rule to a title
            that is or was used for designating it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}domain`),
      blankNodes[342],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}label`),
      literal(`has or had title`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Title`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(`${skos}changeNote`),
      blankNodes[343],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Agents that have or had some type of work relation
            in the course of their activities. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}label`),
      literal(`has or had work relation with`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${skos}changeNote`),
      blankNodes[344],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOrHadWorkRelationWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R046 ('has or had work relation with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is original of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}domain`),
      blankNodes[345],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}label`),
      literal(`has original `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}range`),
      blankNodes[346],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOriginalOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasOriginal`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R010i (is original of
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to a Production Technique Type that
            categorizes its production technique.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}label`),
      literal(`has production technique type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(`${skos}changeNote`),
      blankNodes[347],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to an Agent that
            creates or accumulates the Record Resource, receives it, or sends it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}domain`),
      blankNodes[348],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}label`),
      literal(`has provenance `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isProvenanceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[349],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasProvenance`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R026 ('has provenance'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record resource to an Agent who published
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}label`),
      literal(`hasPublisher`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isPublisherOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasPublisher`),
      namedNode(`${skos}changeNote`),
      blankNodes[350],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Agent that
            receives it in the course of its activities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}domain`),
      blankNodes[351],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}label`),
      literal(`has receiver`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasAccumulator`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isReceiverOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${skos}changeNote`),
      blankNodes[352],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReceiver`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R029 ('has receiver'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set to a Record Set Type that categorizes
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}label`),
      literal(`has record set type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordSetType`),
      namedNode(`${skos}changeNote`),
      blankNodes[353],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record or Record Part to a Record State that
            categorizes its state.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}domain`),
      blankNodes[354],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}label`),
      literal(`has record state`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isRecordStateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRecordState`),
      namedNode(`${skos}changeNote`),
      blankNodes[355],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a reply, usually in the form of
            correspondence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}label`),
      literal(`has reply`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isReplyTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${skos}changeNote`),
      blankNodes[356],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasReply`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R013 ('has reply'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to a Representation Type that
            categorizes its representation type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}label`),
      literal(`has representation type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RepresentationType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasRepresentationType`),
      namedNode(`${skos}changeNote`),
      blankNodes[357],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Instantiation to the Agent that
            sends it`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}domain`),
      blankNodes[358],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}label`),
      literal(`has sender `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasProvenance`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isSenderOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSender`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R031 ('has sender'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Persons that are siblings. This relation is
            symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}label`),
      literal(`has sibling`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasFamilyAssociationWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[359],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${skos}changeNote`),
      blankNodes[360],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSibling`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R048 ('has sibling'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Relation to a Record Resource or
            Agent that is used as a source of information for identifying or describing
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}domain`),
      blankNodes[361],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}label`),
      literal(`has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[362],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isSourceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to another Agent that succeeds it
            chronologically.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}label`),
      literal(`has successor`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isSuccessorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[363],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${skos}changeNote`),
      blankNodes[364],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${skos}scopeNote`),
      literal(`There may be zero to many intermediate Agents , ignored or
            unknown, between the two connected Agents. Can be used when there is a transfer of
            function from the first Agent to the second Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasSuccessor`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RIC-R016 ('has successor'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Extent to a Unit Of Measurement`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}label`),
      literal(`has unit of measurement`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(`${skos}changeNote`),
      blankNodes[365],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}comment`),
      literal(`Vertical dimension of an entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}label`),
      literal(`height`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}height`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}measure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdfs}comment`),
      literal(`Summary of the development of an entity, since its origin until
            present time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdfs}domain`),
      blankNodes[366],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdfs}label`),
      literal(`history`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${skos}changeNote`),
      blankNodes[367],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${skos}example`),
      literal(`El primer sorteo de lotería se celebró el 13 de mayo de 1771,
            siendo desarrollado por la Real Lotería General de Nueva España…
            (Activity)`, 'es'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${skos}example`),
      literal(`Nacido en Barbastro en 1892, donde realizó sus primeros estudios
            con los escolapios. Licenciado en Derecho por la Universidad de Zaragoza, aprobó las
            oposiciones al cuerpo nacional de notarios…(Person)`, 'es'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${skos}example`),
      literal(`The manuscripts are part of the collections of Robert Harley (d
            1724) and Edward Harley (d 1741), 1st and 2nd Earls of Oxford, that were brought by
            Parliament and transferred to the British Museum in 1753. Those materials were then
            separated into this collection and those for Harley Charters and Harley Rolls and became
            part of the collections of the British Library in 1972. (Record Set)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${skos}scopeNote`),
      literal(`History can alternatively be represented by a series of
            related Events.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}history`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A21 (History
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdfs}comment`),
      literal(`A word, number, letter, symbol, or any combination of these used
            to uniquely identify or reference an individual instance of an entity within a specific
            information domain. Includes Global Persistent Identifiers (globally unique and
            persistently resolvable identifier for the entity) and/or Local
            Identifiers.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdfs}label`),
      literal(`identifier`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}changeNote`),
      blankNodes[368],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`Ark ID: w6tz44ht`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`BUD-01-F002 [example of a classification number from a corporate
            file plan]`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`F 1204 [example of a local identifier for a Record Set assigned
            by a repository]`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`ISNI : 0000000073572182`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`NAS1/A/1.1 [example of local identifier for a
            Record]`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}example`),
      literal(`SNAC ID: 83847206`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you don't use Identifier class for handling
            identifiers. Within a given domain (a closed system), identifiers are used to uniquely
            reference instances of an entity. Identifiers are instruments of control that facilitate
            management of the entities within the domain. The formulation of identifiers commonly is
            based on rules.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}identifier`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A22 (Identifier
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set to a Record or Record Set it aggregates,
            or aggregated in the past.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}label`),
      literal(`includes or included`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}range`),
      blankNodes[369],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${skos}changeNote`),
      blankNodes[370],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${skos}scopeNote`),
      literal(`A Record or Record Set can be aggregated in one or many Record
            Sets simultaneously or through time`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}includesOrIncluded`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R024 ('includes or included'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}comment`),
      literal(`Countable characteristics of the Instantiation expressed as a
            quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}label`),
      literal(`Instantiation extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[371],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${skos}example`),
      literal(`Size of PDF-file: 1.5 MB`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${skos}example`),
      literal(`The book register has 345 written leaves.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`For a given Record Resource, the Instantiation Extent may
            vary, based on format, density of information on the carrier, etc. For example, a file
            of 1500 words (Record Resource Extent) may have Instantiation Extent 3kb as a Word
            document and 5kb as a PDF file, and instantiations may be represented on a CD of 700mb
            (Carrier Extent). Use if you don't use InstantiationExtent class and its properties for
            handling such information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A23 (Instantiation Extent
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to a Functional Equivalence
            Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is connected to functional equivalence relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}FunctionalEquivalenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to an Instantiation to Instantiation
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is connected to instantiation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation (from which at least one Instantiation
            is derived) to a Derivation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is source of derivation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation (from which at least one Instantiation
            is migrated) to a Migration Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is source of migration relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a derived Instantiation to a Derivation
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is target of derivation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation which results from a migration, to a
            Migration Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is target of migration relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}instantiationIsTargetOfDerivationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation of a Record Resource to the Record
            Resource to Instantiation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}label`),
      literal(`instantiation is target of record resource to instantiation
            relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}comment`),
      literal(`Information about the physical arrangement and composition of an
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}label`),
      literal(`Instantiation structure`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}structure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${skos}changeNote`),
      blankNodes[372],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationStructure`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Specialization of RiC-A40 (Structure
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to Instantiation Relation to one of
            the related Instantiations.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}InstantiationToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`instantiation to instantiation relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdfs}comment`),
      literal(`Information about the completeness of a Record Resource or
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdfs}domain`),
      blankNodes[373],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdfs}label`),
      literal(`integrity`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${skos}changeNote`),
      blankNodes[374],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${skos}example`),
      literal(`The book register’s last pages are missing, which affects the
            completeness of the record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${skos}example`),
      literal(`The charter is missing the seal.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${skos}example`),
      literal(`The database (DBF) file has the checksum SHA-1:
            99f9d780e441785016dea545b72dad700305535a.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${skos}scopeNote`),
      literal(`The information about integrity may be generated manually or
            automatically.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}integrity`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A24 (Integrity
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an IntellectualPropertyRightsRelation to one of the
            Group, Person or Position that holds the rights.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`intellectual property rights relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[375],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an IintellectualPropertyRightsRelation to one of the
            Record Resource or Instantiation on which the rights are held.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`intellectual property rights relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}range`),
      blankNodes[376],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has accumulator' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}label`),
      literal(`is accumulator of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}range`),
      blankNodes[377],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isProvenanceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasAccumulator`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[378],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[379],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R028i ('is accumulator of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity Type to an Activity that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ActivityType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is activity type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasActivityType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[380],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has addressee' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}label`),
      literal(`is addressee of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}range`),
      blankNodes[381],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isProvenanceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasAddressee`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAddresseeOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-032i ('is addressee of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Agents. This object property is
            symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}label`),
      literal(`is agent associated with agent `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[382],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${skos}scopeNote`),
      literal(`Use to connect two Agents only if it is not possible to be
            more accurate and use a narrower Agent to Agent relation, e.g. ‘has work relation
            with’.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R044 ('is agent associated with agent'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is date associated with' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}label`),
      literal(`is associated with date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R068i ('is associated with date'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is event associated with' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}label`),
      literal(`is associated with event `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[383],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R057i ('is associated with event'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is place associated with' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}label`),
      literal(`is associated with place `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[384],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R074i ('is associated with place'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is rule associated with' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}label`),
      literal(`is associated with rule `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[385],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R062i ('is associated with rule'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has author' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[386],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}label`),
      literal(`is author of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isCreatorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasAuthor`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[387],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[388],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R079i ('is author of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent that assigns the Mandate, to a Mandate
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}label`),
      literal(`is authorizing agent in mandate relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isAuthorizingAgentInMandateRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorizingAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Thing that came into existence on that
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is beginning date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasBeginningDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R069 ('is beginning date of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Person that was born on that
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is birth date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isBeginningDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasBirthDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isBirthDateOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R070 ('is birth date of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Carrier Type to an Instantiation whose carrier it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CarrierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is carrier type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasCarrierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[389],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has child' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}label`),
      literal(`is child of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasAncestor`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasChild`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[390],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isChildOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R018i ('is child of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has collector' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}label`),
      literal(`is collector of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}range`),
      blankNodes[391],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasCollector`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[392],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCollectorOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R030i ('is collector of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Content Type to a Record or Record Part whose content
            it categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is content type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}range`),
      blankNodes[393],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasContentOfType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isContentTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[394],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has copy' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}label`),
      literal(`is copy of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasCopy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCopyOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R012i ('is copy of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has creator' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}label`),
      literal(`is creator of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}range`),
      blankNodes[395],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isProvenanceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasCreator`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[396],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[397],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isCreatorOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R027i ('is creator of
            'relation')`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Thing that the Date is associated with the
            existence and lifecycle of.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}label`),
      literal(`is date associated with `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R068 ('is date associated with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Person who died on that
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is death date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEndDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasDeathDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDeathDateOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R072 ('is death date of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has derived instantiation' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}label`),
      literal(`is derived from instantiation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R014i ('is derived from instantiation'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Documentary Form Type to a Record or Record Part that
            it categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is documentary form type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}range`),
      blankNodes[398],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasDocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[399],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a draft to the final version of a
            Record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[400],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}label`),
      literal(`is draft of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}range`),
      blankNodes[401],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasDraft`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isDraftOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R011 (is draft of
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Thing whose existence ended on that
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is end date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasEndDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEndDateOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R071 ('is end date
            of')`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Things that are considered
            equivalent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}label`),
      literal(`is equivalent to `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEquivalentTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to a Thing that is associated with the
            existence and lifecycle of the Event.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}label`),
      literal(`is event associated with `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[402],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R057 ('is event associated with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event Type to an Event that is
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}EventType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is event type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasEventType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isEventTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[403],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Extent to a Record Resource or Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}label`),
      literal(`is extent of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}range`),
      blankNodes[404],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasExtent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[405],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Extent Type to an Extent that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ExtentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is extent type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasExtentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[406],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isExtentTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[407],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Family Type to a Family that is
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}FamilyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is family type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Family`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasFamilyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[408],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to an Appellation, when it is the date at which
            the Appellation was first used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is from use date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Instantiations which may be considered as
            equivalent. This relation is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}label`),
      literal(`is functionally equivalent to`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEquivalentTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[409],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${skos}changeNote`),
      blankNodes[410],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${skos}scopeNote`),
      literal(`Two Instantiations, from some point of view, may be considered
            as equivalent. This equivalence is usually based upon the fact that the Instantiations
            have at least the same intellectual content (they instantiate the same Record
            Resource).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isFunctionallyEquivalentTo`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R035 ('is functionally equivalent to'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Identifier Type and an Identifier that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}IdentifierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is identifier type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Identifier`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasIdentifierType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[411],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[412],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Instantiations. This object property is
            symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}label`),
      literal(`is instantiation associated with instantiation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[413],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R034 ('is instantiation associated with
            instantiation' relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has instantiation' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}label`),
      literal(`is instantiation of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[414],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[415],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isInstantiationOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R025i ('is instantiation of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date and a Thing that was last modified at this
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is last update date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isModificationDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to a Thing that was modified on that
            Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is modification date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasModificationDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isModificationDateOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R073 ('is modification date of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Places that are or were geographically adjacent.
            This is a symmetric object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}label`),
      literal(`is or was adjacent to`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${skos}changeNote`),
      blankNodes[416],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAdjacentTo`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R077 ('is or was adjacent to'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'affects or affected' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was affected by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}affectsOrAffected`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[417],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAffectedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R059i ('is or was affected by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent Name to an Agent it designates or
            designated.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}AgentName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was agent name of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAgentName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAgentNameOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[418],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation to a Thing that it designates or
            designated.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was appellation of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAppellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[419],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Type (a category) to a Thing that it categorizes or
            categorized.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was category of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[420],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[421],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Category (Type) and a Record Set whose all present or
            past Record or Record Part members belong to that Category.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was category of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[422],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Category (Type) and a Record Set whose some present
            or past Record or Record Part members belong to that Category.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was category of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithCategory`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[423],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had component' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was component of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isInstantiationAssociatedWithInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadComponent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[424],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasComponentOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R004i ('is or was component of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had constituent' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was constituent of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadConstituent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[425],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasConstituentOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R003i ('is or was constituent of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'contains or contained' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was contained by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}containsOrContained`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[426],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContainedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R007i ('is or was contained by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Content Type and a Record Set whose all past or
            present Record or Record Part members have that Content Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was content type of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[427],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Content Type and a Record Set whose some past or
            present Record or Record Part members have that Content Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was content type of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithContentType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasContentTypeOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[428],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to another Agent it controls or controlled via
            Activities, i.e. controls by function.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was controller of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadController`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[429],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[430],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R041 ('is or was controller of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an instance of Coordinates to a Physical Location it
            locates or located on earth, according to some reference system.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was coordinates of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[431],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Corporate Body Type to a Corporate Body that it
            categorizes or categorized.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}CorporateBodyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was corporate body type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CorporateBody`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadCorporateBodyType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[432],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Demographic Group to a Person or Group which belongs
            or belonged to it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DemographicGroup`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was demographic group of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}range`),
      blankNodes[433],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadDemographicGroup`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[434],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'describes or described' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was described by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}describesOrDescribed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[435],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDescribedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R021i ('is or was described by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Documentary Form Type and a Record Set whose all past
            or present Record or Record Part members have that Documentary Form Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was documentary form type of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithDocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[436],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Documentary Form Type and a Record Set whose some
            past or present Record or Record Part members have that Documentary Form
            Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was documentary form type of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMemberswithDocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasDocumentaryFormTypeOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[437],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to an Agent that enforces or enforced the
            Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was enforced by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[438],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R066 ('is or was enforced by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to a Record Resource that expresses or expressed
            the Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was expressed by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}expressesOrExpressed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[439],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasExpressedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R064 ('is or was expressed by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Record Resource or Instantiation that the
            Agent holds or held.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was holder of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}range`),
      blankNodes[440],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadHolder`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[441],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[442],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R039 ('is or was holder of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Record Resource or Instantiation on which
            the Agent has or had some intellectual property rights.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[443],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was holder of intellectual property rights of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}range`),
      blankNodes[444],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadIntellectualPropertyRightsHolder`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[445],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[446],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasHolderOfIntellectualPropertyRightsOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R040 ('is or was holder of intellectual
            property rights of' relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Identifier to a Thing that it identified or
            identifies.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Identifier`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was identifier of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadIdentifier`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIdentifierOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[447],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'includes or included' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}domain`),
      blankNodes[448],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}label`),
      literal(`is or was included in`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}includesOrIncluded`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${skos}changeNote`),
      blankNodes[449],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasIncludedIn`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R024i ('is or was included in'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to an Agent that has or had jurisdiction over
            the Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was jurisdiction of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadJurisdiction`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[450],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasJurisdictionOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R076 ('is or was jurisdiction of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Language to an Agent, Record or Record Part that uses
            or used it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was language of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}range`),
      blankNodes[451],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadLanguage`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[452],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Language and a Record Set whose all present or past
            Record or Record Part members use that Language.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was language of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithLanguage`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[453],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Language and a Record Set whose some present or past
            Record or Record Part members use that Language.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Language`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was language of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithLanguage`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLanguageOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[454],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to the Group that Person leads or led in the
            past.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was leader of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasControllerOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadLeader`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[455],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[456],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLeaderOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R042 ('is or was leader of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Legal Status to an Agent or Record Resource that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was legal status of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}range`),
      blankNodes[457],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadLegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[458],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOf`),
      namedNode(`${skos}scopeNote`),
      literal(`Connects a Legal Status to an Agent, Record or Record Part
            that it categorized or categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Legal Status and a Record Set whose all past or
            present Record or Record Part members have that Legal Status.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was legal status of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithLegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[459],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Legal Status and a Record Set whose some past or
            present Record or Record Part members have that Legal Status.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was legal status of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithLegalStatus`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLegalStatusOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[460],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to a Thing that is or was located in the
            Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was location of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[461],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasLocationOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R075 ('is or was location of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had main subject' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was main subject of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadMainSubject`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[462],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMainSubjectOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R020i (is or was main subject
            of)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Record Resource or Instantiation that the
            Agent managed or manages.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was manager of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}range`),
      blankNodes[463],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadManager`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[464],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[465],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasManagerOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R038 ('is or was manager of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had member' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was member of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadMember`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[466],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[467],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasMemberOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R055i ('is or was member of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Name to a Thing that it designated or
            designates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was name of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasAppellationOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[468],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Occupation Type to a Person whose occupation is or
            was categorized by it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}OccupationType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was occupation type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasDemographicGroupOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[469],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'occupies or occupied' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was occupied by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[470],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[471],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R054i ('is or was occupied by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Group, Person or Position to a Thing that this Agent
            owns or owned.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[472],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was owner of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadOwner`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[473],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[474],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasOwnerOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R037 ('is or was owner of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had part' relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was part of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadPart`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[475],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[476],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R002i (is or was part of
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had participant' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}label`),
      literal(`is or was participant in`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${skos}changeNote`),
      blankNodes[477],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R058i ('is or was participant in'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Activity to an Agent that performed or performs the
            Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was performed by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasOrHadParticipant`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}performsOrPerformed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[478],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[479],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R060 ('is or was performed by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Physical Location to a Place, when it is or was its
            location.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was physical location of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[480],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[481],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place Name to a Place that was or is designated by
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PlaceName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was place name of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadPlaceName`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceNameOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[482],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place Type to a Place that is or was categorized by
            it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PlaceType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was place type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadPlaceType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[483],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record State and a Record Set whose all past or
            present Record or Record Part members have that Record State.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was record state of all members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfAllMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAllMembersWithRecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfAllMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[484],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record State and a Record Set whose some past or
            present Record or Record Part members have that Record State.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was record state of some members of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOfSomeMembersOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSomeMembersWithRecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRecordStateOfSomeMembersOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[485],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of the 'regulates or regulated' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}label`),
      literal(`is or was regulated by`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${skos}changeNote`),
      blankNodes[486],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R063i ('is or was regulated by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was enforced by' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}label`),
      literal(`is or was responsible for enforcing`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasEnforcedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${skos}changeNote`),
      blankNodes[487],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasResponsibleForEnforcing`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R066i ('is or was responsible for enforcing'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`connects a Rule Type to a Rule that it categorized or
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RuleType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was rule type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[488],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[489],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had subdivision' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was subdivision of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSubdivision`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[490],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[491],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubdivisionOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R005i ('is or was subdivision'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had subevent' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was subevent of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasPartOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSubevent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[492],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubeventOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R006i ('is or was subevent of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had subject' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was subject of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSubject`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[493],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubjectOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RIc-R019i ('is or was subject of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had subordinate' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}label`),
      literal(`is or was subordinate to`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadSubordinate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[494],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${skos}changeNote`),
      blankNodes[495],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasSubordinateTo`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R045i ('is or was subordinate to'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Title to a Record Resource, Instantiation or Rule
            that it designated or designates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Title`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was title of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}range`),
      blankNodes[496],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasNameOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadTitle`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasTitleOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[497],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has or had authority over' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}label`),
      literal(`is or was under authority of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOrHadAuthorityOver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[498],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[499],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOrWasUnderAuthorityOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R036i ('is or was under authority of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects the original version of a Record to a copy or a later
            version.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[500],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}label`),
      literal(`is original of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}range`),
      blankNodes[501],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasGeneticLinkToRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasOriginal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${skos}scopeNote`),
      literal(`There may be zero to many intermediate Records, ignored or
            unknown, between the two connected Records`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isOriginalOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R010 (is original of
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place to a Thing that Place is associated with the
            existence and lifecycle of.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}label`),
      literal(`is place associated with `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[502],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R074 ('is place associated with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Production Technique Type to an Instantiation whose
            production technique is categorized by it.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is production technique type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[503],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}comment`),
      literal(`inverse of 'has provenance' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}label`),
      literal(`is provenance of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}range`),
      blankNodes[504],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasProvenance`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[505],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isProvenanceOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R026i ('is provenance of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Agent to a Record Resource that it
            published.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}label`),
      literal(`isPublisherOf`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasPublisher`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isPublisherOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[506],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'received by' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}label`),
      literal(`is receiver of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}range`),
      blankNodes[507],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAccumulatorOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasReceiver`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[508],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReceiverOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R029i ('is receiver of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Record Resources. This object property is
            symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}label`),
      literal(`is record resource associated with record resource `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[509],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R022 ('is record resource associated with
            record resource' relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Set Type to a Record Set that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is record set type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasRecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[510],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record State to a Record or Record Part whose state
            it categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}label`),
      literal(`is record state of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}range`),
      blankNodes[511],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasRecordState`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRecordStateOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[512],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdfs}comment`),
      literal(`The most generic object property. Connects an Thing to any other
            Thing This is a symmetric object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdfs}label`),
      literal(`is related to `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRelatedTo`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R001 (is related to
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has reply' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}label`),
      literal(`is reply to`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRecordResourceAssociatedWithRecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasReply`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${skos}changeNote`),
      blankNodes[513],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isReplyTo`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R013i ('is reply to'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Representation Type to an Instantiation that it
            categorizes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RepresentationType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}label`),
      literal(`is representation type of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasCategoryOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasRepresentationType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[514],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'issued by' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}label`),
      literal(`is responsible for issuing `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}issuedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R065i ('is responsible for issuing'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to a Thing that is associated with the existence
            and lifecycle of the Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}label`),
      literal(`is rule associated with `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isAssociatedWithRule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[515],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R062 ('is rule associated with'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has sender' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}label`),
      literal(`is sender of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}range`),
      blankNodes[516],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isProvenanceOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasSender`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSenderOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R031i ('is sender of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or an Agent to a Record Resource or
            Relation, when the first is used as a source of information for identifying or
            describing the second one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}domain`),
      blankNodes[517],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}label`),
      literal(`is source of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}range`),
      blankNodes[518],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSourceOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has successor' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}label`),
      literal(`is successor of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasSuccessor`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[519],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[520],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isSuccessorOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R016i (is successor
            of)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Date to an Appellation, when it is the date till
            which the Appellation was used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}label`),
      literal(`is to use date of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDateAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isToUseDateOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}wasUsedToDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'has unit of measurement' object property`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}UnitOfMeasurement`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}label`),
      literal(`is unit of measurement of`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}hasUnitOfMeasurement`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}isUnitOfMeasurementOf`),
      namedNode(`${skos}changeNote`),
      blankNodes[521],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to the Agent that issued or published the
            Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}label`),
      literal(`issued by `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isResponsibleForIssuing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}issuedBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R065 ('issued by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Knowing Of Relation to a 'knowing of' Person (a
            Person who has some knowledge of another one.)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`knowing of relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Knowing Of Relation to a 'known by' Person (a Person
            on which another one has some has some knowledge.)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`knowing of relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects Knowing Relation to any known Person
            involved.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}KnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`knowing relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'knows of' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}label`),
      literal(`known by `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}knowsOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[522],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knownBy`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R050i ('known by'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Persons that directly know each other during their
            existence. This object property is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}label`),
      literal(`knows `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[523],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knows`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R051 ('knows'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to another Person they have some knowledge of
            through time or space.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}label`),
      literal(`knows of `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}knownBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[524],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}knowsOf`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R050 ('knows of'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which an entity was last updated.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}label`),
      literal(`last modification date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}modificationDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}lastModificationDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}comment`),
      literal(`Distance in degrees north or south of the
            equator.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}label`),
      literal(`latitude`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}measure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}latitude`),
      namedNode(`${skos}scopeNote`),
      literal(`Property of the Coordinates class. If you don't use this
            class, use geographicalCoordinates property, a property of Place class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Leadership Relation to a Person who is involved as a
            leader.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`leadership relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Leadership Relation to a lead Group.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`leadership relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Leadership Relation to the Position occupied by the
            leading Person.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}label`),
      literal(`leadership with position `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdfs}comment`),
      literal(`A delimitation of the physical territory of a place. This
            datatype property is used to describe basic human-readable text such as an address, a
            cadastral reference, or less precise information found in a record.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdfs}label`),
      literal(`location`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${skos}changeNote`),
      blankNodes[525],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${skos}example`),
      literal(`25 rue Saint-Denis à Paris`, 'fr'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${skos}example`),
      literal(`near the church`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${skos}example`),
      literal(`« Montreal »`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you don't use PhysicalLocation class with Place.
            Use the geographicalCoordinates property, or the Coordinates class, record the
            geographical coordinates of the Place.s`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}location`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A27 (Location
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}comment`),
      literal(`Distance in degrees east or west of a prime
            meridian.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}label`),
      literal(`longitude`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}measure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}longitude`),
      namedNode(`${skos}scopeNote`),
      literal(`Property of the Coordinates class. If you don't use this
            class, use geographicalCoordinates property, a property of Place class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Management Relation to an Agent who is involved as a
            manager.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`management relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Management Relation to a Record Resource or
            Instantiation that is involved as a managed thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`management relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}range`),
      blankNodes[526],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Mandate to a Mandate Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Mandate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}label`),
      literal(`mandate is source of mandate relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Mandate Relation to a Mandate.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`mandate relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Mandate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Mandate Relation to an Agent who is given the
            authority or competencies to act.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`mandate relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdfs}comment`),
      literal(`The extent, quantity, amount, or degree of an entity, as
            determined by measurement or calculation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdfs}label`),
      literal(`measure`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}measure`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Membership Relation to the Group that has
            member(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`membership relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Membership Relation to a Person who is involved as a
            member.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`membership relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Membership Relation to the Position occupied by the
            member Person(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}label`),
      literal(`membership with position `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}membershipWithPosition`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'migrated into' object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}label`),
      literal(`migrated from`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isDerivedFromInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}migratedInto`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[527],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${skos}changeNote`),
      blankNodes[528],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedFrom`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R015i ('migrated from'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Instantiation to a version it has been migrated
            to.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}label`),
      literal(`migrated into`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasDerivedInstantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}migratedFrom`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[529],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${skos}changeNote`),
      blankNodes[530],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${skos}scopeNote`),
      literal(`Use for digital instantiations.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migratedInto`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R015 ('migrated into'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Migration Relation to the migrated
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`migration relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Migration Relation to a resulting
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}MigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`migration relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date of the modification of an entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}label`),
      literal(`modification date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}modificationDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdfs}comment`),
      literal(`A label, title or term designating the entity in order to make
            it distinguishable from other similar entities. For Record Resource or Instantiation,
            the Name is generally assigned by an Agent as most do not have a Name given when
            created.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdfs}label`),
      literal(`name`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}changeNote`),
      blankNodes[531],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`4 March 1842`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`Digital copy of the Pomarius archival inventory from
            1575`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`Nelson Mandela`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`Papers of the Earls of Liverpool`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`Sketch Map of the Qatar Peninsula`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`The Letter of Neacsu from Campulung to the Mayor of
            Brasov`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`fundraising, University of Glasgow`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}example`),
      literal(`hearing services`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you don't use Name class for handling
            names.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}name`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corrresponds to RiC-A28 (Name
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}comment`),
      literal(`Date representation based on a standard, preferably
            machine-readable.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}label`),
      literal(`normalized date value`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}normalizedValue`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${skos}changeNote`),
      blankNodes[532],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${skos}example`),
      literal(`1789/1815`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${skos}example`),
      literal(`1948-03-03`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedDateValue`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A29 (Normalized Date
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}comment`),
      literal(`Value representation based on a standard, preferably
            machine-readable.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}domain`),
      blankNodes[533],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}label`),
      literal(`normalized value`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}normalizedValue`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}textualValue`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Position they occupy or
            occupied.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}label`),
      literal(`occupies or occupied`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAgentAssociatedWithAgent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasOccupiedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[534],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${skos}changeNote`),
      blankNodes[535],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}occupiesOrOccupied`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R054 ('occupies or occupied'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}SymmetricProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}comment`),
      literal(`Connects two Places that geographically overlap or overlapped.
            This object property is symmetric.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}label`),
      literal(`overlaps or overlapped`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithPlace`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isPlaceAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${skos}changeNote`),
      blankNodes[536],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}overlapsOrOverlapped`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R078 ('overlaps or overlapped'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Ownership Relation to a Person, Group or Position
            that is involved as an owner.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}OwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`ownership relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[537],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Ownership Relation to a Thing that is
            owned.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}OwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`owner ship relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Performance Relation to a performed
            Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`performance relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Performance Relation to a performing
            Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`performance relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'is or was performed by' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}label`),
      literal(`performs or performed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isOrWasParticipantIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[538],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${skos}changeNote`),
      blankNodes[539],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}performsOrPerformed`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R060i ('performs or performed'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Correspondence Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}label`),
      literal(`person has correspondence relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CorrespondenceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Family Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}label`),
      literal(`person has family relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}FamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Knowing Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}label`),
      literal(`person has knowing relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}KnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Sibling Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}label`),
      literal(`person has sibling relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}SiblingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person to a Spouse Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}label`),
      literal(`person has spouse relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}SpouseRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a parent) to a Child
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of child relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}childRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as an ancestor) to a Descendance
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of descendance relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (who has some knowledge of another one) to a
            Knowing Of Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of knowing of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a leader) to a Leadership
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of leadership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (who occupies a Position) to a Position
            Holding Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of position holding relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a teacher) to a Teaching
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is source of teaching relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a child) to a Child
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is target of child relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ChildRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfChildRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a descendant) to a Descendance
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is target of descendance relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}DescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (of which another Person has some knowledge)
            to a Knowing Of Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is target of knowing of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}KnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a member of a Group) to a Membership
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is target of membership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Person (as a student) to a Teaching
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}label`),
      literal(`person is target of teaching relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdfs}comment`),
      literal(`Information about the physical features of the Instantiation.
            Includes information about the physical nature and condition such as conservation
            status.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdfs}label`),
      literal(`physical characteristics`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${skos}changeNote`),
      blankNodes[540],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${skos}example`),
      literal(`British Library binding`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${skos}example`),
      literal(`carrier heavily foxed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${skos}example`),
      literal(`emulsion flaking`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${skos}example`),
      literal(`watermarked`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalCharacteristics`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A31 (Physical Characteristics
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdfs}comment`),
      literal(`Countable characteristics of the content of an entity expressed
            as a quantity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdfs}domain`),
      blankNodes[541],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdfs}label`),
      literal(`physical or logical extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. Use only if you cannot use the
            subproperties (particularly if the same free text is being used in your current metadata
            for describing the record resource, carrier and instantiation extent).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place (as associated to a Thing) to a Place
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}label`),
      literal(`place is source of place relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place Relation to the Place concerned.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`place relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Place Relation to a Thing that is associated to the
            Place.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`place relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position Holding Relation to a Person (who occupies a
            Position).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`position holding relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position Holding Relation to a Position (that is
            occupied).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`position holding relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position to a Leadership Relation (the leading Person
            occupies that Position).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`position is context of leadership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}LeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfLeadershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position to a Membership Relation (the member Person
            occupies that Position).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`position is context of membership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}MembershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsContextOfMembershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}membershipWithPosition`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position (that exists within a Group) to a Position
            to Group Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}label`),
      literal(`position is source of position to group relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position (that is occupied by a Person) to a Position
            Holding Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`position is target of position holding relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position to Group Relation to a Position (that exists
            in a Group).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`position to group relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Position to Group Relation to a Group (in which a
            Position exists).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}PositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`position to group relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}groupIsTargetOfPositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Thing that follows it in chronological
            order.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}label`),
      literal(`precedes in time`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}followsInTime`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[542],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${skos}changeNote`),
      blankNodes[543],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${skos}scopeNote`),
      literal(`There may actually be zero to many intermediate Entities,
            ignored or unknown, in the chronological sequence between the two connected
            Entities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesInTime`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R009 ('precedes in time'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Thing that follows or followed it in some
            sequence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}label`),
      literal(`precedes or preceded`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}followsOrFollowed`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${owl}propertyChainAxiom`),
      blankNodes[544],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${skos}changeNote`),
      blankNodes[545],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${skos}scopeNote`),
      literal(`The relation does not specify by itself what criteria are used
            for ordering the sequence. There may actually be zero to many intermediate Entities,
            ignored or unkown, in the sequence between the two connected Things. Can be used, for
            example, for specifying that some Record 'precedes' (has next) some Record within a
            Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}precedesOrPreceded`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R008 ('precedes or preceded'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdfs}comment`),
      literal(`Method used in the representation of information on the
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdfs}label`),
      literal(`production technique`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}changeNote`),
      blankNodes[546],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}example`),
      literal(`engraving`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}example`),
      literal(`handwriting`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}example`),
      literal(`magnetic recording`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}example`),
      literal(`optical recording`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you have free text or don't have a controlled
            vocabulary for production techniques (in this case, use the ProductionTechniqueType
            class)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}productionTechnique`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A33 (Production Technique
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Provenance Relation to a Record Resource or
            Instantiation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`provenance relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}range`),
      blankNodes[547],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Provenance Relation to an Agent or
            Activity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`provenance relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}range`),
      blankNodes[548],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentOrActivityIsTargetOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Proxy to the Record Resource it stands for in the
            specific context of a Record Set.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Proxy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}label`),
      literal(`proxy for `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyFor`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Proxy to the Record Set in which it stands for
            (represents) another Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Proxy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}label`),
      literal(`proxy in `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}proxyIn`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date of the publication of a Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}label`),
      literal(`publication date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}publicationDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdfs}comment`),
      literal(`Conditions of an Instantiation that impact the legibility or
            completeness of Record Resource, and thus the viability of its use. Conditions may be
            associated with deficiencies in the processes of Record (re)creation or capture, or the
            deterioration of the Instantiation (e.g. its carrier) causing loss of information of the
            record over time`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdfs}label`),
      literal(`quality of representation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${skos}changeNote`),
      blankNodes[549],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${skos}example`),
      literal(`Black and white digitization may have led to loss of some
            information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${skos}example`),
      literal(`some loss of information due to poor quality of image
            capture`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${skos}example`),
      literal(`some loss of text due to rodent damage`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}qualityOfRepresentation`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A34 (Quality of Representation
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}comment`),
      literal(`Machine-readable quantity.`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}label`),
      literal(`quantity`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}decimal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}textualValue`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${skos}changeNote`),
      blankNodes[550],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${skos}changeNote`),
      blankNodes[551],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}quantity`),
      namedNode(`${skos}scopeNote`),
      literal(`Use if you use the Extent class and its properties for
            handling an accurate description of the extent of a resource..`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record and an Authorship Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}label`),
      literal(`record is source of authorship relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(`${skos}changeNote`),
      blankNodes[552],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}comment`),
      literal(`The quantity of information content as human experienced
            represented in the Record Resource. The method and precision of expressing the quantity
            of information represented in a Record Resource will vary by the kind of Record Resource
            being described as well as by processing economy constraints. For record sets, quantity
            may be expressed as number of records, or, for analogue records in particular, by the
            physical storage dimensions of the Record members. For individual records or record
            parts, quantity may be expressed in more precise terms. Use if you don't use
            RecordResourceExtent class and its properties for handling such
            information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}physicalOrLogicalExtent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[553],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}changeNote`),
      blankNodes[554],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`1,500 words`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`2 films`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`2.065.735 characters`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`3 minutes and 24 seconds`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`34 poems`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`6 maps`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}example`),
      literal(`6 photographs`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${skos}scopeNote`),
      literal(`The number, size or duration of the information content
            unit(s) remains the same even if the information is instantiated in various carriers.
            For example, a file of 1500 words (Record Resource Extent) may have Instantiation Extent
            3kb as a Word document and 5kb as a PDF file, and instantiations may be represented on a
            CD of 700mb (Carrier Extent). Use if you don't use RecordResourceExtent class and its
            properties for handling such information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceExtent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A35 (Record Resource extent
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource Genetic Relation to one of the
            associated Record Resources.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`record resource genetic relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource Holding Relation to an Agent (as the
            holder of a Record Resource or Instantiation).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`record resource holding relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource Holding Relation to a Record Resource
            or Instantiation (that is held by an Agent).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`record resource holding relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}range`),
      blankNodes[555],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a Record Resource Genetic
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource is connected to record resource genetic relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceGeneticRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceGeneticRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource to a Record Resource
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource is connected to record resource relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource (that was instantiated) to a Record
            Resource To Instantiation Relation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource is source of record resource to instantiation
            relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is
            accumulated) to an Accumulation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[556],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is source of accumulation
            relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that documents an
            Activity) to an Activity Documentation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[557],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is source of activity
            documentation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is created,
            sent or accumulated) to an Agent Origination Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[558],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is source of agent origination
            relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is created) to
            a Creation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[559],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is source of creation relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfCreationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is created or
            accumulated by an Agent, or documents an Activity) to a Provenance
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[560],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is source of provenance relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ProvenanceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfProvenanceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (on which some
            intellectual property rights are held) to an Intellectual Property Rights
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[561],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is target of intellectual
            property rights relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}IntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is managed by
            an Agent) to a Management Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[562],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is target of management relation
        `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}ManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource or Instantiation (that is held by an
            Agent) to a Record Resource Holding Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}domain`),
      blankNodes[563],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}label`),
      literal(`record resource or instantiation is target of record resource
            holding relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource relation to one of the related Record
            Resources.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`record resource relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}comment`),
      literal(`Information about the intellectual arrangement and composition
            of a Record Resource. For Record and Record Part, it encompasses information about the
            intellectual composition of the record, the presence of record parts and their
            functions. For Record Set, it encompasses information about the methodology or criteria
            used for arranging the Record Set members or Record members within the containing Record
            Set`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}label`),
      literal(`Record Resource structure`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}structure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${skos}changeNote`),
      blankNodes[564],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${skos}example`),
      literal(`Inside each file, the records are arranged
            chronologically.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${skos}example`),
      literal(`The database has 3 related tables: names, addresses, and
            passport numbers.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${skos}example`),
      literal(`The record has 2 appendixes, comprising a full account of the
            income from car taxes and real estate taxes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${skos}example`),
      literal(`The series have the files arranged according to the alphabetical
            order of the places concerned.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceStructure`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Specialization of RiC-A40 (Structure
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource To Instantiation Relation to the
            Record Resource (that was instantiated). `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`record resource to instantiation relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Record Resource To Instantiation Relation to an
            Instantiation of the involved Record Resource. `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`record resource to instantiation relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdfs}comment`),
      literal(`Framework or standard used to represent an
            information.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdfs}label`),
      literal(`reference system`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}referenceSystem`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to a Thing that it regulates or
            regulated.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}label`),
      literal(`regulates or regulated`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRuleAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isOrWasRegulatedBy`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${skos}changeNote`),
      blankNodes[565],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}regulatesOrRegulated`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R063 ('regulates or regulated'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an n-ary Relation to any of the Things
            involved.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}label`),
      literal(`relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an n-ary Relation to a Thing that is a secondary,
            contextual entity during the existence of the Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}label`),
      literal(`relation has context `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasContext`),
      namedNode(`${skos}scopeNote`),
      literal(`The secondary entity may be, for instance, a Position or a
            Role Type.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an n-ary Relation to a Thing that is its
            source.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an n-ary Relation to a Thing that is its
            target.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdfs}comment`),
      literal(`Used to qualify the state of a Relation (e. g. present, past,
            ongoing, unknown).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdfs}label`),
      literal(`Relation state`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}relationState`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}comment`),
      literal(`Inverse of 'results or resulted in' object
            property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}label`),
      literal(`results or resulted from`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithEvent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${skos}changeNote`),
      blankNodes[566],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R061i ('results or resulted from'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Event to a Thing that results or resulted from the
            Event.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}label`),
      literal(`results or resulted in`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isEventAssociatedWith`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}resultsOrResultedFrom`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${skos}changeNote`),
      blankNodes[567],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}resultsOrResultedIn`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`RiC-R061 ('results or resulted in'
            relation)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Role Type to a Creation Relation (this Role Type
            being the specific role played by the creating Person in the context of this
            Relation).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RoleType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}label`),
      literal(`role is context of creation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}CreationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}roleIsContextOfCreationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}creationWithRole`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdfs}comment`),
      literal(`The rule or conditions that govern the existence or lifecycle of
            a Thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdfs}label`),
      literal(`rule followed`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleFollowed`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use the Rule class for handling rules.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule to a Rule Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}label`),
      literal(`rule is source of rule relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule Relation to a Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`rule relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Rule Relation to a Thing (that is associated to a
            Rule).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`rule relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdfs}comment`),
      literal(`Summary of the scope (such as time periods, geography) and
            content (such as subject matter, administrative processes) of the Record Resource. It
            should highlight the information conveyed in the Record Resource, why it was created,
            received, and/or maintained, and the Agents connected to it. Scope and Content provides
            a more complete summary of the informational content of the Record Resource. It may
            include description of relations with agents, activities, dates and places, or with
            other record resources. It is not to be confused with the History attribute which
            focuses on the origination and subsequence changes to a Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdfs}label`),
      literal(`scope and content`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}changeNote`),
      blankNodes[568],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}example`),
      literal(`Among the witnesses, the duke of Normandy.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}example`),
      literal(`Includes a detailed list of the lands and villages given by the
            King to the Abbey.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}example`),
      literal(`Letter from Vlad the Impaler (Dracula) to the Council of
            Kronstadt asking them to send military support against the Ottomans, within the
            framework of their alliance treaty.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}example`),
      literal(`Se hace referencia a construcción del Gran Hotel, iniciada en
            1899 bajo el nombre de Casa Celestino. Tras su interrupción en 1902, continuó la obra ya
            con su nombre actual.`, 'es'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${skos}example`),
      literal(`The author explains why he does not agree with the decision made
            and adds that it cannot be applied.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}scopeAndContent`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A38 (Scope and Content
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Sequential Relation to a Thing that precedes other
            Thing(s) in the sequence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}SequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`sequential relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Sequential Relation to a Thing that follows other
            Thing(s) in the sequence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}SequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`sequential relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Sibling Relation to one of the siblings
            involved.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}SiblingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`sibling relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdfs}comment`),
      literal(`Information about a source used to identify or describe an
            entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdfs}domain`),
      blankNodes[569],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdfs}label`),
      literal(`source`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}source`),
      namedNode(`${skos}scopeNote`),
      literal(`Can be used, in particular, for Records having documentary
            form type Finding Aid or Authority Record, or for Relations. Use only if you don't use
            the hasSource object property.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Sibling Relation to one of the spouses
            involved.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}SpouseRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`spouse relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdfs}comment`),
      literal(`Information about the intellectual arrangement and composition
            of a Record Resource or the physical arrangement and composition of an Instantiation.
            For Record and Record Part, it encompasses information about the intellectual
            composition of the record, the presence of record parts and their functions. For Record
            Set, it encompasses information about the methodology or criteria used for arranging the
            Record Set members or Record members within the containing Record Set. For
            Instantiation, it may comprise information about the composition of the physical
            elements of the instantiation`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdfs}domain`),
      blankNodes[570],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdfs}label`),
      literal(`structure`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${skos}changeNote`),
      blankNodes[571],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you cannot use the subproperties (particularly if
            the same free text is being used in your current metadata for describing the record
            resource and the instantiation structure).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}structure`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A40 (Structure
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Teaching Relation to a Person (who is a
            teacher).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`teaching relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Teaching Relation to a Person (who is a
            student).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`teaching relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdfs}comment`),
      literal(`Describes any relevant physical or software feature of any
            device involved in the creation or management of a Record Resource.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Mechanism`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdfs}label`),
      literal(`technical characteristics`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${skos}changeNote`),
      blankNodes[572],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${skos}example`),
      literal(`Hubble Space Telescope had until 2002 a flawed mirror that
            introduced severe spherical aberration for the images.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${skos}scopeNote`),
      literal(`Does not include references to the workflow that the Mechanism
            is involved in which is described under the Activity entity. It emphasizes those
            features that provide a better understanding of the impact of the Mechanism on the
            records.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}technicalCharacteristics`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Corresponds to RiC-A41 (Technical Characteristics
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Temporal Relation to a Thing that precedes other
            Thing(s) in time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`temporal relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Temporal Relation to a Thing that follows other
            Thing(s) in time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`temporal relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdfs}comment`),
      literal(`A textual expression of an Appellation or Date.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdfs}domain`),
      blankNodes[573],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdfs}label`),
      literal(`textual value`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}textualValue`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a n-ary Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is connected to relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isRelatedTo`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}relationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is a secondary, contextual entity during
            the existence of the Relation) to a n-ary Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is context of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsContextOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}relationHasContext`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is the source of a Relation) to a
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is source of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Sequential Relation, when this Thing
            precedes other Thing(s) in the sequence.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is source of sequential relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}SequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Temporal Relation, when this Thing
            precedes other Thing(s) in time.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is source of temporal relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Whole Part Relation, when this Thing has
            Part other Thing(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is source of whole part relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}WholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is designated by an Appellation) to an
            Appellation Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of appellation relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AppellationRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is under authority of an Agent) to an
            Authority Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of authority relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}AuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is associated with an Event) to an Event
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of event relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}EventRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is owned by a Group, a Person or a
            Position) to an Ownership Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of ownership relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}OwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is associated with a Place) to a Place
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of place relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}PlaceRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a n-ary Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsConnectedToRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is associated with a Rule) to a Rule
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of rule relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}RuleRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that follows other Thing(s) in a sequence) to
            a Sequential Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of sequential relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}SequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that follows other Thing(s) in time) to a
            Temporal Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of temporal relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TemporalRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing (that is categorized by a Type) to a Type
            Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of type relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to a Whole Part Relation, when this Thing is
            Part of another Thing.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}label`),
      literal(`thing is target of whole part relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}WholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsTargetOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}comment`),
      literal(`An identifying name of a Record Resource, Instantiation or
            Rule.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}domain`),
      blankNodes[574],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}label`),
      literal(`title`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}name`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${skos}scopeNote`),
      literal(`Use only if you don't use Title class for handling
            titles.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}title`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Specialization of RiC-A28 (Name
            attribute)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdfs}comment`),
      literal(`A term used to characterize an entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdfs}label`),
      literal(`type`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}type`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Type subclasses for handling
            categories.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Type (a category) to a Type Relation.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}label`),
      literal(`type is source of type relation `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}TypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}thingIsSourceOfRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Type Relation to the Type (that categorizes the
            involved Thing(s)).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`type relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Type Relation to a Thing (that is categorized by the
            involved Type).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}TypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`type relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdfs}comment`),
      literal(`A definite magnitude of a quantity, defined and adopted by convention or by
            law, that is used as a standard for measurement of the same kind of quantity. Can be
            spacial units (cm, m), weight (g, kg), time (s, h), storage (MB, TB) or more informal
            units used in the archival context like number of boxes, pages or words.`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdfs}label`),
      literal(`unit of measurement`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${skos}changeNote`),
      blankNodes[575],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${skos}changeNote`),
      blankNodes[576],
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}unitOfMeasurement`),
      namedNode(`${skos}scopeNote`),
      literal(`Use if you do not use the UnitOfMeasurement class for handling
            units of measurement along with Extent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date at which an Appellation was first used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}label`),
      literal(`used from date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedFromDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}comment`),
      literal(`Date until an Appellation was used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}label`),
      literal(`used to date`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${skos}scopeNote`),
      literal(`Provided for usability reasons. May be deprecated and removed
            later on. Use only if you don't use Date classes for handling dates.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}usedToDate`),
      namedNode(`${rico}RiCCMCorrespondingComponent`),
      literal(`Data property specialized implementation of
            RiC-E18 (Date entity)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Thing to the Date when it was last
            modified.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}label`),
      literal(`was last updated at date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}hasModificationDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasLastUpdatedAtDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isLastUpdateDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation to the Date from which it was
            used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}label`),
      literal(`was used from date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedFromDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isFromUseDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}comment`),
      literal(`Connects an Appellation to the Date till when it was
            used.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}label`),
      literal(`was used to date `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}isAssociatedWithDate`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wasUsedToDate`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}isToUseDateOf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Whole Part Relation to the Thing that has some
            parts.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}WholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}label`),
      literal(`whole part relation has source `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasSource`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Whole Part Relation to a Thing that is a
            part.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}WholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}label`),
      literal(`whole part relation has target `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}relationHasTarget`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}comment`),
      literal(`Horizontal dimension of an entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}label`),
      literal(`width`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}width`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}measure`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}comment`),
      literal(`Connects a Work Relation to an Agent.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${rico}WorkRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns11}ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}label`),
      literal(`work relation connects `, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}range`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${rico}workRelationConnects`),
      namedNode(`${owl}inverseOf`),
      namedNode(`${rico}agentHasWorkRelation`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${cc}license`),
      namedNode(ns13),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}contributor`),
      literal(`Aaron Rubinstein (University of Massachusetts Amherst, USA),
            member of EGAD`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}contributor`),
      literal(`Daniel Pitti (University of Virginia, USA), chair of
            EGAD`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}contributor`),
      literal(`Miia Herrala (National Archives of Finland), member of
            EGAD`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}contributor`),
      literal(`Tobias Wildi (Docuteam GmbH, Switzerland), member of
            EGAD`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}creator`),
      literal(`Florence Clavaud (Archives nationales de France), member of EGAD,
            lead of EGAD RiC-O team`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}creator`),
      literal(`International Council on Archives Expert Group on Archival
            Description (ICA EGAD)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}publisher`),
      literal(`International Council on Archives`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dc11}rights`),
      literal(`Copyright 2019-...., International Council on Archives
            (ICA)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}abstract`),
      literal(`
            <html:div xml:lang="en">
                <html:p>RiC-O (Records in Contexts-Ontology) is an OWL ontology for describing
                    archival record resources. As the second part of Records in Contexts standard,
                    it is a formal representation of Records in Contexts Conceptual Model (RiC-CM). </html:p>
                <html:p>The current official version is <html:strong>v0.2</html:strong>; it is
                    compliant with RiC-CM v0.2 full draft, that will be published in February or
                    March 2021, and that is slightly different from <html:a href="https://www.ica.org/sites/default/files/ric-cm-0.2_preview.pdf">RiC-CM
                        v0.2 preview</html:a>, that was published in December 2019.</html:p>
                <html:p>RiC-O provides a generic vocabulary and formal rules for creating RDF
                    datasets (or generating them from existing archival metadata) that describe in a
                    consistent way any kind of archival record resource. It can support publishing
                    RDF datasets as Linked Data, querying them using SPARQL, and making inferences
                    using the logic of the ontology.</html:p>
            </html:div>
        `, namedNode(`${rdf}XMLLiteral`)),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}contributor`),
      namedNode(`${ns14}0000000039584825`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}creator`),
      namedNode(`${ns15}about`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}description`),
      literal(`
            <html:div xml:lang="en" id="introduction">
                <html:h3>Introduction</html:h3>
                <html:p>RiC-O (Records in Contexts-Ontology) is an OWL ontology for describing
                    archival record resources. As the second part of Records in Contexts standard,
                    it is a formal representation of Records in Contexts Conceptual Model (RiC-CM).
                    This version, which is v0.2, is the current official release. It is compliant
                    with RiC-CM v0.2, that will be published soon after the release of RiC-O
                    v0.2.</html:p>
                <html:p>The following diagram shows the main RiC-CM v0.2 entities and a few
                    relations between them: <html:img src="https://raw.githubusercontent.com/ICA-EGAD/RiC-O/master/diagrams/diagrams_v0-2/RiC-CM-overview/diagram_RiC-CM-overview-RiC-v0-2.jpg" alt="A partial overview of RiC-CM v0.2 main entities" class="diagram"></html:img>
                </html:p>
                <html:div id="design-principles">
                    <html:h4>RiC-O design principles</html:h4>
                    <html:p>The following design principles were followed when developing
                        RiC-O.</html:p>
                    <html:p>
                        <html:strong>RiC-O is a domain or reference ontology</html:strong>.</html:p>
                    <html:p>It provides a generic vocabulary and formal rules for creating RDF
                        datasets (or generating them from existing archival metadata) that describe
                        in a consistent way any kind of archival record resource. It can support
                        publishing RDF datasets as Linked Data, querying them using SPARQL, and
                        making inferences using the logic of the ontology.</html:p>
                    <html:p>While some projects have built some specific ontologies for describing
                        archives, at this time no generic domain ontology exists for the specific
                        needs of the archival community. This is why EGAD decided to develop RiC-O
                        as the second part of RiC standard.</html:p>
                    <html:p>Apart this first, main target, RiC-O also can help archival institutions
                        and engineers to design and develop other technical implementations of
                        RiC-CM that represent record resources and their layers of contexts as
                        oriented, interconnected graphs. Of course, other technical implementations
                        may be developed later on, including XML models, or (hopefully) new versions
                        of EAD and EAC-CPF XML models.</html:p>
                    <html:p>As RiC-O is a generic, domain ontology, it does not address by itself
                        every specific need or expectation that may occur in every archival
                        institution or project. It is rather a high level framework and a project
                        can either limit itself to the use of a selection of components, or can add
                        more subcomponents where needed.</html:p>
                    <html:p>As a domain ontology, RiC-O, at this stage at least, does not borrow any
                        component from other existing ontologies (such as the cultural heritage
                        models – IFLA-LRM and CIDOC-CRM, PREMIS, or PROV-O). It should therefore be
                        easier, for an archival institution or archival project, to understand,
                        implement and maintain RiC-O within its system.</html:p>
                    <html:p>Later on, RiC-O will be aligned with these existing models. This is of
                        course essential for interconnecting RDF datasets conforming to RiC-O with
                        other datasets, or for using parts of RiC-O in other contexts than the
                        archival or records management realm.</html:p>
                    <html:p>
                        <html:strong>RiC-O must be immediately usable.</html:strong>
                    </html:p>
                    <html:p>This is a key feature for a new model. In particular, it is very
                        important that existing archival metadata, that are created or generated in
                        current information systems, can be converted to RDF conforming to RiC-O,
                        without losing any data, structural or partially implicit information. What
                        is at stake here is that metadata conforming to the previous existing ICA
                        standards can be processed successfully.</html:p>
                    <html:p>During the ongoing development process, a lot of successful testing has
                        been made, using XML/EAD finding aids and XML/EAC-CPF authority records,
                        that have been converted to RDF datasets, either by hand or using scripts. A
                        conversion software is being developed and will soon be available.</html:p>
                    <html:p>While some existing metadata sets may have a very fine level of
                        granularity and accuracy, already using, for example, controlled
                        vocabularies, or describing curation events separately, often these metadata
                        don’t have the very precise structure that RiC-CM recommends. Even then,
                        such a conversion process should remain possible. In order to allow this,
                        RiC-O sometimes provides several methods for representing information (as
                        described below). From this point of view, the current official version of
                        RiC-O may be considered a transitional ontology, in which some components
                        may be deprecated later on.</html:p>
                    <html:p> The usability of a model also depends on its documentation. That’s why
                        the current official release has been fully documented (this documentation
                        will be continously improved).</html:p>
                    <html:p>RiC-O will also soon be acompanied with examples (RDF datasets). Some
                        tutorials should also be written, and EGAD will organize practical
                        workshops.</html:p>
                    <html:p>
                        <html:strong>RiC-O has to provide a flexible
                        framework</html:strong>.</html:p>
                    <html:p>This is a very important principle too. It is related with the usability
                        principle quoted above. Moreover, archival description is flexible by
                        essence. It is quite commonly noted that the level of granularity of
                        information varies from one finding aid to another (or from one authority
                        record to another), or even within the same finding aid. Some series or
                        agents are described summarily because little is known about them and there
                        is little time for extensive research, while other series, even records, or
                        agents are described in detail; some relations (e.g. that relating to
                        provenance) may be described without any detail while others may be
                        thoroughly documented, as ISAAR(CPF) and EAC-CPF allow it.</html:p>
                    <html:p>Being generally flexible, for an OWL ontology, depends first on the
                        polyhierarchical systems of classes and properties it provides. A
                        superproperty or superclass, more general or generic than its subproperties
                        or subclasses, must exist and be available for handling information, while
                        at the same time more accurate subcomponents must be there for handling more
                        accurate description. Also, RiC-O should provide several methods for
                        expressing whether relations are well attested and certain, or are more vague,
                        as well as direct and short paths between entities alongside more complex
                        ones.</html:p>
                    <html:p>
                        <html:strong>RiC-O opens new potential for archival
                            description.</html:strong>
                    </html:p>
                    <html:p>This means that Linked Data tools and interfaces should enable end users
                        to go through RDF/RiC-O graphs, to query them using SPARQL in an efficient
                        way and to consult archival metadata and their contexts in new ways. As an example,
                        an end user should be able to ask « What are (according to your dataset) the
                        corporate bodies that succeeded to this given entity from its end of
                        existence, by 1840, to nowadays (as concerns this given activity) ?» or «
                        tell me what instantiations of this photograph exist? » « what are the
                        existing copies of this original charter?», and get a list of these
                        entities. In other words, institutions or projects that make the effort to
                        implement RiC-O will get new insight into the content and context of their
                        archives that wasn't visible with the existing ICA-standards. It should be
                        even more interesting if you can infer new assertions from the RDF datasets
                        you built, and of course link your datasets to other ressources outside of
                        your institution.</html:p>
                    <html:p>
                        <html:strong>RiC-O should be extensible</html:strong>.</html:p>
                    <html:p>Institutions are free to extend the ontology by adding new subclasses or
                        subproperties if needed. RiC-O has also the potential to be useable in other
                        contexts than purely archival ones. This implies that hierarchies of classes
                        and properties are defined and that mappings are developed with other
                        ontologies as mentioned above. It may also imply that RiC-O should provide
                        “hooks” enabling connections with, for example, existing SKOS
                        vocabularies.</html:p>
                </html:div>
                <html:div id="understanding-RiCO">
                    <html:h4>Understanding RiC-O: a quick overview of some features</html:h4>
                    <html:div id="fromRiCCM-to-RiCO">
                        <html:h5>From RiC-CM to RiC-O</html:h5>
                        <html:p>In the <html:strong>system of classes of RiC-O,</html:strong> for
                            each RiC-CM entity, you can find a corresponding class. These classes
                            are organized according to the same hierarchy as in RiC-CM. In some
                            projects, you may need very few of them (e.g. Agent, Record Resource and
                            Activity only), while in other ones, you may need more (e.g. Corporate
                            Body and Person; Record; Place; Provenance Relation).</html:p>
                        <html:p>Certain classes only exist in RiC-O and not in RiC-CM. These
                            additional classes address special needs:</html:p>
                        <html:ul>
                            <html:li>some correspond to RiC-CM attributes, when it may be considered
                                necessary to handle them as full entities. This is the case for
                                    <html:a href="#rico:Type">Type</html:a> and its subclasses, that
                                correspond to RiC-CM attributes that contain controlled values, and
                                that can help to articulate RiC-O with external RDF resources like
                                SKOS vocabularies; and also for <html:a href="#rico:Language">Language</html:a>, <html:a href="#rico:Name">Name</html:a> and
                                    <html:a href="#rico:Identifier">Identifier</html:a>, that can be
                                considered as full entities and as key linking nodes in a RDF graph.
                                All these classes have been grouped under a <html:a href="#rico:Concept">Concept</html:a> class. </html:li>
                            <html:li>some classes have been added in order to provide a more
                                accurate definition and model for some entities. <html:a href="#rico:Place">Place</html:a> thus comes along with a
                                    <html:a href="#rico:PhysicalLocation">Physical Location
                                    class</html:a>, and with a <html:a href="#rico:Coordinates">Coordinates class</html:a>. A Place is considered both a 
                                geographical and historical entity. As a historical entity, among
                                other features, it has a history, and may be preceded or succeeded
                                by other Places. A Place also may have zero to many Physical
                                Location through time (for instance, its boundaries, if it is an
                                administrative area or a country, may change). Each Physical
                                Location may be connected to zero to many Coordinates. This model is
                                quite close to the Linked Places Format (<html:a href="https://github.com/LinkedPasts/linked-places">https://github.com/LinkedPasts/linked-places</html:a>). Another
                                example of such an addition is the <html:a href="#rico:Proxy">Proxy
                                    class</html:a>, that represents (stands for) a Record Resource
                                as it exists in a specific Record Set.</html:li>
                            <html:li>finally, a system of classes helps to implement the Relations
                                section of RiC-CM.<html:br></html:br> While these relations also are
                                represented as simple, binary object properties (e.g. <html:a href="#rico:hasProvenance">‘hasProvenance’</html:a> that
                                corresponds to RiC-R026 relation), you may need to assign different
                                attributes to a relation, e.g. a date, certainty or description, as
                                it is already possible, and quite often done, in a XML/EAC-CPF file.
                                One of the standard available methods for representing such a
                                documented relation in RDF for now is to use a class. RDF* and
                                SPARQL* specification, which is being developed by the W3C RDF-DEV
                                Community Group, provides a far simpler method (allowing to consider
                                a triple as the subject or object of another triple; see <html:a href="https://w3c.github.io/rdf-star/">https://w3c.github.io/rdf-star/</html:a>) and is already being
                                used by some tools; however it is not yet a W3C standard. Thus, for
                                example, in RiC-O an <html:a href="#rico:AgentOriginationRelation">AgentOriginationRelation class</html:a> exists. This class may
                                connect one to many Agents to one to many created or accumulated
                                Record Resources or Instantiations, and has some specific object
                                properties (certainty, date, description, source). Back to the
                                ‘hasProvenance’ object property, let us add that it is formally
                                defined in RiC-O, using OWL 2 property chain axiom (see <html:a href="https://www.w3.org/TR/owl2-new-features/">https://www.w3.org/TR/owl2-new-features/</html:a>, as a
                                ‘shortcut’ for the longer path
                                ‘recordResourceOrInstantiationIsSourceOfAgentOriginationRelation/agentOriginationRelationHasTarget’,
                                where the intermediate node is an instance of Agent Origination Relation:<html:br></html:br>
                                <html:code> <owl:propertyChainAxiom
                                    rdf:parseType="Collection"> <html:br></html:br> <rdf:Description
                                    rdf:about="https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfAgentOriginationRelation"/>
                                    <html:br></html:br> <rdf:Description
                                    rdf:about="https://www.ica.org/standards/RiC/ontology#agentOriginationRelationHasTarget"/>
                                    <html:br></html:br> </owl:propertyChainAxiom> </html:code>
                                <html:br></html:br>A triplestore, with the appropriate configuration, may
                                thus infer the direct ‘hasProvenance’ assertion from this long
                                path.</html:li>
                        </html:ul>
                        <html:p>Most of the <html:strong>datatype properties in RiC-O
                            </html:strong>correspond to RiC-CM attributes that contain free, plain
                            text. See for example <html:a href="#rico:descriptiveNote">rico:descriptiveNote</html:a>, <html:a href="#rico:history">rico:history</html:a> and <html:a href="#scopeAndContent">rico:scopeAndContent</html:a>.</html:p>
                        <html:p>In addition to these datatype properties, the Name and Identifier
                            RiC-CM attributes also have corresponding classes (subclasses of <html:a href="#rico:Appellation">rico:Appellation</html:a>). A resource may
                            have several Identifiers and each comes with different attributes (e.g.
                            archival reference code, system number, digital object identifier), in
                            this case the identifiers will be modelled in a class. In many simpler
                            usecases it's sufficent to just use the <html:a href="#rico:identifier">identifier datatype property</html:a>, typically for the archival
                            reference code.</html:p>
                        <html:p>The Location RiC-CM attribute also has a <html:a href="#rico:PhysicalLocation">rico:Physical Location corresponding
                                class</html:a> (for users who want to use Place, Physical Location
                            and Coordinates for handling places).</html:p>
                        <html:p>As already said too, every RiC-CM attribute that has ‘controlled
                            value’ or ‘rule-based’ as a schema value, has a class as corresponding
                            component in RiC-O. For these CM attributes that correspond to a RiC-O
                            class, as it is necessary to provide an immediately usable ontology, two
                            supplementary datatype properties exist that allow not to use the
                            classes, at least for a while, if you want to implement RiC-O and create
                            RiC-O/RDF datasets from existing archival metadata without being able to
                            handle URIs for the information you have.</html:p>
                        <html:p>For example, you may not be able to handle and maintain URIs for
                            some controlled values you use in EAD finding aids for carrier types:
                            maybe your information system does not use a vocabulary for this, and
                            you cannot for a while consider these carrier types as full entities.
                            Nevertheless you want to produce RiC-O datasets where every piece of
                            information is kept, and you want to avoid blank nodes. If RiC-O would
                            only provide the Carrier Type class, it would be an issue for you. So
                            RiC-O provides a <html:a href="#rico:type">rico:type datatype
                                property</html:a>, with range rdfs:literal, which allows you to move
                            forward.</html:p>
                        <html:p>Therefore, for the RiC-CM *Type attributes, you have a corresponding
                                <html:a href="#rico:type">rico:type datatype property</html:a>. For
                            RiC-CM Coordinates attribute, you also have <html:a href="#rico:geographicalCoordinates">rico:geographicalCoordinates
                                datatype property</html:a>.</html:p>
                        <html:p>These datatype properties have a skos:scopeNote which says (for
                            example) "Provided for usability reasons. May be made deprecated or
                            removed later on. Use only if you don't use Physical Location and
                            Coordinates classes with Place."</html:p>
                        <html:p>The same key design principle (RiC-O must be immediately usable) led
                            us to define some datatype properties that would enable users to use
                            RiC-O in simple usecases where they do not want to consider dates and
                            rules as full entities. Thus, there of course is Date and Rule classes
                            in RiC-O (since there are Date and Rule entities in RiC-CM). And you
                            also have 'date' datatype properties; plus a <html:a href="#rico:ruleFollowed">rico:ruleFollowed datatype
                                property</html:a>. The same analysis led us to keep the <html:a href="#rico:history">rico:history</html:a> datatype property in
                            RiC-O (same as RiC-CM history attribute), while RiC-CM and RiC-O also
                            provide the <html:a href="#rico:Event">Event class</html:a>, and using a
                            series of Events may of course be a better method, easier to query, link
                            and display, than simply using a history prose discourse. The two
                            methods may be used in parallel within the same dataset by an
                            institution that, for example, would decide to emphasize only the
                            accession, appraisal and description events among the whole history of
                            Record resources.</html:p>
                        <html:p>These datatype properties have the same kind of skos:scopeNote as
                            above.</html:p>
                        <html:p>Finally, we have introduced a few datatype properties that do not
                            correspond to any RiC-CM attribute.</html:p>
                        <html:p>Some are superproperties, and thus group datatype properties
                                (<html:a href="#rico:physicalOrLogicalExtent">rico:physicalOrLogicalExtent</html:a>, with rico:carrierExtent,
                            rico:instantiationExtent and rico:recordResourceExtent as subproperties
                            ; <html:a href="#rico:textualValue">rico:textualValue</html:a>, with
                            rico:expressedDate and rico:normalizedValue as subproperties; <html:a href="#rico:measure">rico:measure</html:a> (and its subproperties);
                                <html:a href="#rico:referenceSystem">rico:referenceSystem</html:a>,
                            superproperty of rico:dateStandard (and of other datatype properties
                            that do not exist in RiC-CM.)</html:p>
                        <html:p>Some are simply more specific properties : <html:a href="#rico:accrualStatus">rico:accrualStatus</html:a> ; <html:a href="#rico:recordResourceStructure">rico:recordResourceStructure</html:a> and <html:a href="#rico:instantiationStructure">rico:instantiationStructure</html:a>, subproperties of
                            rico:structure ; <html:a href="#rico:title">rico:title</html:a>
                            (subproperty of rico:name) ; rico:altitude, rico:latitude,
                            rico:longitude (subproperties of rico:measure), rico:geodesicSystem and
                            rico:altimetricSystem (subproperties of rico:referenceSystem).</html:p>
                        <html:p>In order to connect all the classes created, <html:strong>a
                                significant number of object properties have been
                                defined</html:strong>. While their 'flat' list is a long one, they
                            are grouped hierarchically, so that one can use the upper to
                            intermediate level ones for simplicity sake, or choose the most accurate
                            and expressive ones, or extend the system adding a subproperty easily.
                            It is expected that, in most use cases, a subset of these properties
                            only will be needed. As already said above, some of the object
                            properties are also formally defined as shortcuts.</html:p>
                        <html:p>Finally, let us mention that we added to RiC-O six individuals,
                            considering that they would address current and frequent needs:</html:p>
                        <html:ul>
                            <html:li>Two (<html:a href="#FindingAid">FindingAid</html:a> and <html:a href="#AuthorityRecord">AuthorityRecord</html:a>) are 
                                instances of both RiC-O Documentary Form Type and SKOS Concept.
                                They can be used for categorizing Records, finding aids and
                                authority records being considered as Records. A Record that would
                                have ‘Finding Aid’ as a Documentary Form Type, can be connected to
                                one to many Record Resources using 'rico:describes’ object
                                property.</html:li>
                            <html:li>Four (<html:a href="#Fonds">Fonds</html:a>, <html:a href="#Series">Series</html:a>, <html:a href="#File">File</html:a>, and <html:a href="#Collection">Collection</html:a>) are both instances of the Record Set Type
                                class, and of skos:Concept. Their definition is taken from the
                                ISAD(G) glossary. They can be used for categorizing Record
                                Sets.</html:li>
                        </html:ul>
                        <html:p>In the future, we can imagine that many other categories of the kind
                            will be defined by the archival community, forming at least rich SKOS
                            (hopefully multilingual) vocabularies. Considering the concepts thus
                            defined as being also instances of some RiC-O classes may be of great
                            interest for producing a richer description (for example, an instance of
                            the <html:a href="#rico:DocumentaryFormType">Documentary Form Type
                                class</html:a> may have a history and some temporal relations to
                            other documentary form types).</html:p>
                    </html:div>
                    <html:div id="RiCO-documentation">
                        <html:h5>RiC-O documentation and annotation properties</html:h5>
                        <html:p>Each class or property has at least an English label (rdfs:label)
                            and description (rdfs:comment). Some have a skos:scopeNote or a
                            skos:example.</html:p>
                        <html:p>When a RiC-O class or property corresponds in a way to a RiC-CM
                            component, its description and scope note are, either the same as, or
                            derived from, their definition and scope note in RiC-CM.</html:p>
                        <html:p>We have created two annotation properties, subproperties of
                            rdfs:comment, for handling:</html:p>
                        <html:ul>
                            <html:li>Information about the corresponding RiC-CM component when
                                appliable (<html:a href="#rico:RiCCMCorrespondingComponent">rico:RiCCMCorrespondingComponent</html:a>). Various phrasings
                                are used in this property depending on the rule applied for defining
                                the RiC-CM component.</html:li>
                            <html:li>Information, most often in prose text for now, about possible
                                mappings with other models or ontologies (<html:a href="#rico:closeTo">rico:closeTo</html:a>, rarely used in this
                                0.1 version)).</html:li>
                        </html:ul>
                        <html:p>Finally, in this official 0.2 release, any change in the definition
                            of a class or property, since December 2019, is documented using a
                            skos:changeNote.</html:p>
                    </html:div>
                </html:div>
                <html:div id="next-steps">
                    <html:h4>Next steps</html:h4>
                    <html:p>The following is a non exhaustive list of known issues, topics or tasks
                        on which EGAD has begun to work and will continue to work in the next
                        months:</html:p>
                    <html:ul>
                        <html:li>providing more examples of known implementations of RiC-O in
                            different institutions and contexts. The goal is to show different
                            practices on how RiC-O is being implemented. We have begun to release
                            such examples in the <html:a href="https://github.com/ICA-EGAD/RiC-O">public RiC-O repository on GitHub</html:a>. One can also have a
                            look at the <html:a href="https://ica-egad.github.io/RiC-O/projects-and-tools.html">Projects and tools page on RiC-O website</html:a>.</html:li>
                        <html:li>finishing the system of relations (where some subclasses are still
                            missing)</html:li>
                        <html:li>assessing, and changing in some cases, the tense of the verbs in
                            some object properties (e.g. for the properties that correspond to some
                            RiC-CM relations). This has been done, following RiC-CM v0.2 updates,
                            where many relations have changed name so that they can be used for
                            recording both past and present situations.</html:li>
                        <html:li>articulating the Event and Activity classes, and the Relation
                            system of classes</html:li>
                        <html:li>improving the names of object properties. This has been done,
                            following RiC-CM v0.2 updates and applying a few naming rules, so that,
                            for example, the same verb is used for naming a relation and the inverse
                            relation when it exists.</html:li>
                        <html:li>adding suggestions of mappings (in rico:closeTo) and OWL
                            equivalences between some classes or properties and components in other
                            models (among which - this is not an exhaustive list- CIDOC-CRM,
                            IFLA-LRM, PREMIS, PROV-O, Wikidata and Schema.org)</html:li>
                        <html:li>documenting RiC-O in French and Spanish</html:li>
                        <html:li>providing users with some SPARQL constructs for
                            inferring.</html:li>
                    </html:ul>
                </html:div>
            </html:div>
        `, namedNode(`${rdf}XMLLiteral`)),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}publisher`),
      namedNode(`${ns16}Q1421986`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${dcterms}title`),
      literal(`International Council on Archives Records in Contexts Ontology
            (ICA RiC-O) version 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${vann}preferredNamespacePrefix`),
      literal(`rico`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${vann}preferredNamespaceUri`),
      literal(`https://www.ica.org/standards/RiC/ontology#`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${rdf}type`),
      namedNode(`${ns8}Vocabulary`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${rdfs}label`),
      literal(`International Council on Archives Records in Contexts Ontology
            (ICA RiC-O) version 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${owl}priorVersion`),
      namedNode(`${ns11}RiC-O_v0-1.rdf`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${owl}versionInfo`),
      literal(`Version 0.2 - 2021-02-12.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns11}ontology`),
      namedNode(`${skos}historyNote`),
      literal(`
            <html:div xml:lang="en">
                <html:p>A first beta version of RiC-O was developed in 2017 and used by the National
                    Archives of France for building a proof of concept (<html:a href="https://piaaf.demo.logilab.fr">https://piaaf.demo.logilab.fr</html:a>).</html:p>
                <html:p>EGAD then continued to develop the ontology, and this process entered a very
                    active period in 2019, while RiC-CM v0.2 was being designed and edited. From
                    December 2018 to November 2019, about 65 persons that had applied to a call for
                    reviewers, received successive beta versions of RiC-O and sent a few first
                    comments. While EGAD RiC-O team could not answer to each of these comments, each
                    was taken into account. In particular, it was decided to prepare and publish,
                    along with RiC-O v0.1, a preview of RiC-CM v0.2. The goal of the preview release
                    of RiC-CM v0.2 is to provide context for the classes, properties, and overall
                    logic of RiC-O in support of the ontology’s first public release. RiC-O v0.1 was
                    released on December 2019, 12.</html:p>
                <html:p>The Git repository that is used for handling RiC-O was made public in March
                    2020 (see <html:a href="https://github.com/ICA-EGAD/RiC-O">https://github.com/ICA-EGAD/RiC-O</html:a>), so that creating issues or
                    comments, forking and making pull requests was made possible.</html:p>
                <html:p>In 2020, RiC-CM v0.2 preview was significantly updated: the textual
                    definitions of many entities were changed, as well as the specifications of many
                    attributes; and a lot of relations changed name, in order to take into account
                    past situations and to adopt some simple naming rules. As a consequence, RiC-O
                    had to be updated in order to remain compliant with RiC-CM. These changes could
                    not be made before the end of 2020, when RiC-CM could be considered stable.
                    EGAD also decided to make other changes in RiC-O, among which the most important
                    are mentioned in bold in the following list.</html:p>
                <html:p>RiC-O 0.2 results from these updates and changes. It has been released a few
                    weeks before RiC-CM 0.2 full draft, and is fully compliant with it.</html:p>
                <html:p>The following is a list of the changes made to RiC-O (this current version
                    being RiC-O v0.2) since the release of RiC-O v0.1 in December 2019. The most
                    important changes are mentioned in bold. Note that from October 2020 any change
                    on a component is described and dated in the specification of this component,
                    using skos:changeNote.</html:p>
                <html:ul>
                    <html:li>Fixed a bug in the documentation of rico:PerformanceRelation and its
                        object properties.</html:li>
                    <html:li>Renamed the file and updated the ontology metadata.</html:li>
                    <html:li>OccupationType made a subclass of ActivityType.</html:li>
                    <html:li>Changed the domain and range of rico:hasOriginal and rico:hasDraft (it
                        is now Record or Record Part); same for their inverse properties.</html:li>
                    <html:li>Fixed a bug in the definition of rico:provenanceRelationHasTarget
                        (removed the owl:propertyChainAxiom).</html:li>
                    <html:li>Changed the name of rico:leadBy object property (grammatical mistake)
                        to rico:ledBy. </html:li>
                    <html:li>2020, October 19: Added a vann:preferredNamespaceUri and
                        vann:preferredNamespacePrefix property to the ontology metadata</html:li>
                    <html:li>2020, October 19 : created RuleType and IdentifierType classes, along
                        with the associated object properties.</html:li>
                    <html:li>2020, October 23: <html:strong>updated the text definition and/or scope
                            note of 33 classes, that correspond to RiC-CM entities or attributes, in
                            order to make them compliant with RiC-CM v0.2</html:strong>. Added a few
                        owl:disjointWith properties.</html:li>
                    <html:li>2020, November 1: <html:strong>updated the text definition and/or scope
                            note of, and/or added examples for, 27 datatype properties, that
                            correspond to RiC-CM attributes, in order to make them compliant with
                            RiC-CM v0.2</html:strong>.</html:li>
                    <html:li>2020, November 20: <html:strong>created new classes and properties for
                            handling an accurate description of instantation and record resource
                            extent</html:strong>: Extent, Carrier Extent, Instantiation Extent,
                        Record Resource Extent, Unit of measurement, Extent Type classes; unit of
                        measurement and quantity datatype properties; has Extent, is Extent Of, has
                        Extent Type, is Extent Type Of, has Unit Of Measurement, is Unit of
                        Measurement Of, object properties.</html:li>
                    <html:li>2020, December 28: changed the IRIs and definition of
                        RecordResourceState class and of the associated object properties;
                            <html:strong>changed the domain or ranges and textual definitions of
                            properties associated with Language, LegalStatus, ContentType,
                            DocumentaryFormType; added new object properties for handling the
                            description of some or all members of Record Set</html:strong>. Added
                        the corresponding change notes.</html:li>
                    <html:li>2020, December 29: deleted the isSuperiorTo and isInferiorTo object
                        properties, as well as the AgentSubordinationRelation and its object
                        properties (as the RiC-R043 relation has been removed from RiC-CM 0.2).
                        Added the hasAuthor/isAuthorOf object properties, plus an AuthorshipRelation
                        class and its specific object properties (as the RiC-R079 relation has been
                        added to RiC-CM 0.2). Added the corresponding change notes.</html:li>
                    <html:li>2021, January 22: <html:strong>changed the IRI, label, and/or
                            superproperties or inverse property IRI, and/or textual definition,
                            and/or domain or range, of 152 object properties. Among them, changed
                            the IRI of 119 object properties; 85 correspond to RiC-CM relations
                            whose name has been changed in RiC-CM 0.2</html:strong>. Added the
                        corresponding change notes.</html:li>
                    <html:li>2021, January 27: added an rdfs:isDefinedBy to the specification of
                        each RiC-O class and property and made the last changes to the ontology
                        metadata (mainly in the history note).</html:li>
                    <html:li>2021, February 1: last small changes in the ontology metadata (mainly
                        in the abstract).</html:li>
                    <html:li>2021, February 1: 'hasOrHadPhysicalLocation' made a subproperty of
                        'isPlaceAssociatedWith'; 'isOrWasPhysicalLocationOf' made a subproperty of
                        'isAssociatedWithPlace'.</html:li>
                    <html:li>2021, February 1: reordered everything with Protégé without changing
                        the content</html:li>
                    <html:li>2021, February 4: checked and fixed the language of the
                        examples.</html:li>
                    <html:li>2021, February 8: removed a few Restriction classes
                        (rdfs:subClassOf/owl:Restriction) in the definition of classes; completed
                        the textual definition and scope note of the Relation class.</html:li>
                    <html:li>2021, February 9: added a link to RiC-CM 0.2 diagram overview in the introduction; fixed some typos.</html:li>
                    <html:li>2021, February 11: added an @xml:lang='en' on a few labels; updated the definition (rdfs:comment) and scope note of the Rule class, as they were recently changed in RiC-CM 0.2 full draft.</html:li>
                    
                </html:ul>
            </html:div>
        `, namedNode(`${rdf}XMLLiteral`)),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${rdfs}label`),
      literal(`Authority record`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${skos}definition`),
      literal(`This category can be used for records that describe an
            entity.`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}AuthorityRecord`),
      namedNode(`${skos}prefLabel`),
      literal(`Authority record`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}DocumentaryFormType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${rdfs}label`),
      literal(`Finding aid`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${skos}definition`),
      literal(`This documentary form type can be used for records that
            aggregate and organizes metadata on some record(s) or record set(s).`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns17}FindingAid`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${dc11}creator`),
      literal(`International Coucil on Archives Expert Group on Archival
            Description (ICA EGAD)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${dc11}title`),
      literal(`International Council on Archives Records in Contexts Vocabulary for
            Documentary Form Types`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}ConceptScheme`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${rdfs}label`),
      literal(`Documentary Form Types`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}documentaryFormTypes`),
      namedNode(`${skos}definition`),
      literal(`A vocabulary that includes documentary form
            types`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${rdfs}label`),
      literal(`collection`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${skos}definition`),
      literal(`An artificial assemblage of documents accumulated on the
            basis of some common characteristic without regard to the provenance of those documents.
            Not to be confused with an archival fonds. (From ICA ISAD(G))`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}recordSetTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Collection`),
      namedNode(`${skos}prefLabel`),
      literal(`collection`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${rdfs}label`),
      literal(`file`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${skos}definition`),
      literal(`An organized unit of documents grouped together either for
            current use by the creator or in the process of archival arrangement, because they
            relate to the same subject, activity, or transaction. A file is usually the basic unit
            within a record series. (From ICA ISAD(G))`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}recordSetTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}File`),
      namedNode(`${skos}prefLabel`),
      literal(`file`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${rdfs}label`),
      literal(`fonds`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${skos}definition`),
      literal(`The whole of the records, regardless of form or medium,
            organically created and/or accumulated and used by a particular person, family, or
            corporate body in the course of that creator's activities and functions. (From ICA
            ISAD(G))`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}recordSetTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Fonds`),
      namedNode(`${skos}prefLabel`),
      literal(`fonds`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${rdf}type`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${rdfs}label`),
      literal(`series`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${skos}definition`),
      literal(`Documents arranged in accordance with a filing system or
            maintained as a unit because they result from the same accumulation or filing process,
            or the same activity; have a particular form; or because of some other relationship
            arising out of their creation, receipt, or use. A series is also known as a records
            series. (From ICA ISAD(G))`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${skos}inScheme`),
      namedNode(`${ns18}recordSetTypes`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns19}Series`),
      namedNode(`${skos}prefLabel`),
      literal(`series`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${dc11}creator`),
      literal(`International Coucil on Archives Expert Group on Archival
            Description (ICA EGAD)`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${dc11}title`),
      literal(`International Council on Archives Records in Contexts Vocabulary for
            Record Set Types`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}NamedIndividual`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}ConceptScheme`),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${rdfs}label`),
      literal(`Record Set Types`, 'en'),
      namedNode(rico)
    ),
    quad(
      namedNode(`${ns18}recordSetTypes`),
      namedNode(`${skos}definition`),
      literal(`A vocabulary on Record Set types`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[298],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupIsTargetOfLeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[298],
      namedNode(`${rdf}rest`),
      blankNodes[577],
      namedNode(rico)
    ),
    quad(
      blankNodes[526],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[526],
      namedNode(`${owl}unionOf`),
      blankNodes[578],
      namedNode(rico)
    ),
    quad(
      blankNodes[81],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[81],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[81],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[81],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[406],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[406],
      namedNode(`${rdf}value`),
      literal(`Object property added along with the Extent Type
                    class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[125],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[125],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[125],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[125],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[417],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[417],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition and corresponding CM component (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "affectedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[78],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[78],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Scope note: updated and made several
                    paragraphs. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[403],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[403],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[579],
      namedNode(`${rdf}first`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[579],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[45],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[45],
      namedNode(`${owl}maxQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[45],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}SingleDate`),
      namedNode(rico)
    ),
    quad(
      blankNodes[45],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasBeginningDate`),
      namedNode(rico)
    ),
    quad(
      blankNodes[264],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[264],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasAgentName").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[418],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[418],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "isAgentNameOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[317],
      namedNode(`${dc11}date`),
      literal(`2021-02-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[317],
      namedNode(`${rdf}value`),
      literal(`Property made a subproperty of
                    'isPlaceAssociatedWith".`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[25],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[25],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[25],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[25],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[471],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[471],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "occupiedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[560],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[560],
      namedNode(`${owl}unionOf`),
      blankNodes[580],
      namedNode(rico)
    ),
    quad(
      blankNodes[347],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[347],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[333],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[333],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasStudent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[228],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[228],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition and corresponding CM component (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "accumulatedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[110],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[110],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[110],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[110],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[128],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[128],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[581],
      namedNode(`${rdf}first`),
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[581],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[507],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[507],
      namedNode(`${owl}unionOf`),
      blankNodes[582],
      namedNode(rico)
    ),
    quad(
      blankNodes[225],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[225],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[376],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[376],
      namedNode(`${owl}unionOf`),
      blankNodes[583],
      namedNode(rico)
    ),
    quad(
      blankNodes[68],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[68],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[68],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[68],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[26],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[26],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[26],
      namedNode(`${owl}onClass`),
      blankNodes[584],
      namedNode(rico)
    ),
    quad(
      blankNodes[26],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[491],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[491],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRIs (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isSubdivisionOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[483],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[483],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "isPlaceTypeOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[284],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[284],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, textual definition (changed made in
                    order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "hasCorrespondent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[70],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[70],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[70],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[70],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[444],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[444],
      namedNode(`${owl}unionOf`),
      blankNodes[585],
      namedNode(rico)
    ),
    quad(
      blankNodes[89],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[89],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[89],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[89],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[119],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[119],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[119],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[119],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[586],
      namedNode(`${rdf}first`),
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[586],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[66],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[66],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Family`),
      namedNode(rico)
    ),
    quad(
      blankNodes[66],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isFamilyTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[511],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[511],
      namedNode(`${owl}unionOf`),
      blankNodes[587],
      namedNode(rico)
    ),
    quad(
      blankNodes[431],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[431],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (the name of this property in RiC-O 0.1 was
                    "isCoordinatesOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[300],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[300],
      namedNode(`${owl}unionOf`),
      blankNodes[588],
      namedNode(rico)
    ),
    quad(
      blankNodes[527],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsTargetOfMigrationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[527],
      namedNode(`${rdf}rest`),
      blankNodes[589],
      namedNode(rico)
    ),
    quad(
      blankNodes[328],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[328],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[369],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[369],
      namedNode(`${owl}unionOf`),
      blankNodes[590],
      namedNode(rico)
    ),
    quad(
      blankNodes[465],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[465],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI, textual definition (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isManagerOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[21],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[21],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[21],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[21],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[572],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[572],
      namedNode(`${rdf}value`),
      literal(`Scope note and examples added. Objective: to make RiC-O
                    compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[74],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[74],
      namedNode(`${rdf}value`),
      literal(`Class added along with hasIdentifierType and
                    isIdentifierTypeOf object properties.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[591],
      namedNode(`${rdf}first`),
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[591],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[274],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[274],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasAuthorityOver").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[187],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[187],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[227],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[227],
      namedNode(`${rdf}rest`),
      blankNodes[592],
      namedNode(rico)
    ),
    quad(
      blankNodes[379],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[379],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition and corresponding CM component (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "accumulates").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[404],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[404],
      namedNode(`${owl}unionOf`),
      blankNodes[593],
      namedNode(rico)
    ),
    quad(
      blankNodes[180],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[180],
      namedNode(`${owl}unionOf`),
      blankNodes[594],
      namedNode(rico)
    ),
    quad(
      blankNodes[349],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[349],
      namedNode(`${rdf}rest`),
      blankNodes[595],
      namedNode(rico)
    ),
    quad(
      blankNodes[596],
      namedNode(`${rdf}first`),
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[596],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[463],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[463],
      namedNode(`${owl}unionOf`),
      blankNodes[597],
      namedNode(rico)
    ),
    quad(
      blankNodes[598],
      namedNode(`${rdf}first`),
      namedNode(`${rico}positionToGroupRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[598],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[409],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsConnectedToFunctionalEquivalenceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[409],
      namedNode(`${rdf}rest`),
      blankNodes[599],
      namedNode(rico)
    ),
    quad(
      blankNodes[485],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[485],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[600],
      namedNode(`${rdf}first`),
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[600],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[601],
      namedNode(`${rdf}first`),
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[601],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[140],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[140],
      namedNode(`${rdf}value`),
      literal(`Changed a bit the definition and added change
                    notes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[213],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[213],
      namedNode(`${rdf}value`),
      literal(`changed the inverse property IRI, the superproperty IRI and
                    the corresponding CML component name`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[502],
      namedNode(`${rdf}first`),
      namedNode(`${rico}placeIsSourceOfPlaceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[502],
      namedNode(`${rdf}rest`),
      blankNodes[602],
      namedNode(rico)
    ),
    quad(
      blankNodes[251],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[251],
      namedNode(`${owl}unionOf`),
      blankNodes[603],
      namedNode(rico)
    ),
    quad(
      blankNodes[149],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[149],
      namedNode(`${rdf}value`),
      literal(`comment: updated. Scope note: updated and made several
                    paragraphs. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[604],
      namedNode(`${rdf}first`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[604],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[185],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[185],
      namedNode(`${owl}unionOf`),
      blankNodes[605],
      namedNode(rico)
    ),
    quad(
      blankNodes[536],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[536],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, text definition (changed made in
                    order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "overlaps").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[475],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[475],
      namedNode(`${rdf}rest`),
      blankNodes[606],
      namedNode(rico)
    ),
    quad(
      blankNodes[467],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[467],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isMemberOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[79],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[79],
      namedNode(`${rdf}value`),
      literal(`Changed a bit the definition and added change
                    notes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[432],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[432],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (the name of this property in RiC-O 0.1 was
                    "isCorporateBodyTypeOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[423],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[423],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[410],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[410],
      namedNode(`${rdf}value`),
      literal(`changed the scope note.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[173],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[173],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Type`),
      namedNode(rico)
    ),
    quad(
      blankNodes[173],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}typeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[173],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[265],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[265],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[27],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[27],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[182],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[182],
      namedNode(`${owl}unionOf`),
      blankNodes[607],
      namedNode(rico)
    ),
    quad(
      blankNodes[40],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[40],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[40],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[40],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}correspondenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[492],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[492],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property URI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isSubEventOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[566],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[566],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "resultsFrom").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[84],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[84],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[84],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[84],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[237],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[237],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[248],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[248],
      namedNode(`${rdf}value`),
      literal(`changed the superproperties IRIs.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[133],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[133],
      namedNode(`${rdf}value`),
      literal(`Removed the Restriction.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[479],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[479],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "performedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[569],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[569],
      namedNode(`${owl}unionOf`),
      blankNodes[608],
      namedNode(rico)
    ),
    quad(
      blankNodes[411],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[411],
      namedNode(`${rdf}value`),
      literal(`Object property added along with IdentifierType class and
                    hasIdentifierType object property. `, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[609],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[609],
      namedNode(`${owl}unionOf`),
      blankNodes[610],
      namedNode(rico)
    ),
    quad(
      blankNodes[370],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[370],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "includes").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[87],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[87],
      namedNode(`${rdf}value`),
      literal(`Scope note from RiC-CM : deleted.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[231],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[231],
      namedNode(`${rdf}value`),
      literal(`added a scope note`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[351],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[351],
      namedNode(`${owl}unionOf`),
      blankNodes[611],
      namedNode(rico)
    ),
    quad(
      blankNodes[385],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[385],
      namedNode(`${rdf}rest`),
      blankNodes[581],
      namedNode(rico)
    ),
    quad(
      blankNodes[510],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[510],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[612],
      namedNode(`${rdf}first`),
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[612],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[613],
      namedNode(`${rdf}first`),
      namedNode(`${rico}performanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[613],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[614],
      namedNode(`${rdf}first`),
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[614],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[205],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[205],
      namedNode(`${owl}unionOf`),
      blankNodes[615],
      namedNode(rico)
    ),
    quad(
      blankNodes[230],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[230],
      namedNode(`${owl}unionOf`),
      blankNodes[616],
      namedNode(rico)
    ),
    quad(
      blankNodes[193],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfMandateRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[193],
      namedNode(`${rdf}rest`),
      blankNodes[617],
      namedNode(rico)
    ),
    quad(
      blankNodes[257],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personHasFamilyRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[257],
      namedNode(`${rdf}rest`),
      blankNodes[579],
      namedNode(rico)
    ),
    quad(
      blankNodes[618],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[618],
      namedNode(`${rdf}rest`),
      blankNodes[619],
      namedNode(rico)
    ),
    quad(
      blankNodes[466],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsTargetOfMembershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[466],
      namedNode(`${rdf}rest`),
      blankNodes[620],
      namedNode(rico)
    ),
    quad(
      blankNodes[92],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[92],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[92],
      namedNode(`${owl}onClass`),
      blankNodes[621],
      namedNode(rico)
    ),
    quad(
      blankNodes[92],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[564],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[564],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[334],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupIsSourceOfGroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[334],
      namedNode(`${rdf}rest`),
      blankNodes[622],
      namedNode(rico)
    ),
    quad(
      blankNodes[623],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[623],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[624],
      namedNode(`${rdf}first`),
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[624],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[285],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[285],
      namedNode(`${owl}unionOf`),
      blankNodes[625],
      namedNode(rico)
    ),
    quad(
      blankNodes[50],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[50],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[50],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}derivationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[50],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[309],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[309],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasName").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[535],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[535],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "occupies").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[155],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[155],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[155],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isRepresentationTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[2],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[2],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[2],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasPerformedBy`),
      namedNode(rico)
    ),
    quad(
      blankNodes[315],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[315],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasPart").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[326],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[326],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[626],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[626],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[627],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      blankNodes[627],
      namedNode(`${rdf}rest`),
      blankNodes[628],
      namedNode(rico)
    ),
    quad(
      blankNodes[196],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[196],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[115],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[115],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Coordinates`),
      namedNode(rico)
    ),
    quad(
      blankNodes[115],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasOrHadCoordinates`),
      namedNode(rico)
    ),
    quad(
      blankNodes[524],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfKnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[524],
      namedNode(`${rdf}rest`),
      blankNodes[629],
      namedNode(rico)
    ),
    quad(
      blankNodes[353],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[353],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[514],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[514],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[319],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[319],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasPlaceName").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[4],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[4],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and updated.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[367],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[367],
      namedNode(`${rdf}value`),
      literal(`Domains updated. Examples added. Objective: to make RiC-O
                    compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[236],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[236],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[617],
      namedNode(`${rdf}first`),
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[617],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[67],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[67],
      namedNode(`${rdf}value`),
      literal(`Comment: slighty changed.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[630],
      namedNode(`${rdf}first`),
      namedNode(`${rico}managementRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[630],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[575],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[575],
      namedNode(`${rdf}value`),
      literal(`Datatype property created along with quantity, Extent and
                    UnitOfMeasurement classes, in order to provide methods for handling extent
                    accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[313],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[313],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "ownedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[356],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[356],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isRepliedToBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[218],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[218],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "existsIn").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[90],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[90],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[90],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[90],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[170],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[170],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[170],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[170],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[412],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[412],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[427],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[427],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[434],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[434],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, range (the name of this property in RiC-O 0.1 was
                    "isDemographicGroupOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[58],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[58],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[58],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      blankNodes[58],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[631],
      namedNode(`${rdf}first`),
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[631],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[194],
      namedNode(`${rdf}first`),
      namedNode(`${rico}mandateIsSourceOfMandateRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[194],
      namedNode(`${rdf}rest`),
      blankNodes[632],
      namedNode(rico)
    ),
    quad(
      blankNodes[279],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[279],
      namedNode(`${rdf}rest`),
      blankNodes[633],
      namedNode(rico)
    ),
    quad(
      blankNodes[156],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[156],
      namedNode(`${rdf}value`),
      literal(`Comment and scope note: updated. Objective: to make RiC-O
                    compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[402],
      namedNode(`${rdf}first`),
      namedNode(`${rico}eventIsSourceOfEventRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[402],
      namedNode(`${rdf}rest`),
      blankNodes[596],
      namedNode(rico)
    ),
    quad(
      blankNodes[22],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[22],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[22],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[22],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}appellationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[214],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[214],
      namedNode(`${owl}unionOf`),
      blankNodes[634],
      namedNode(rico)
    ),
    quad(
      blankNodes[168],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[168],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[168],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[168],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}teachingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[373],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[373],
      namedNode(`${owl}unionOf`),
      blankNodes[635],
      namedNode(rico)
    ),
    quad(
      blankNodes[473],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfOwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[473],
      namedNode(`${rdf}rest`),
      blankNodes[636],
      namedNode(rico)
    ),
    quad(
      blankNodes[93],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[93],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[93],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[93],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}managementRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[490],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupIsTargetOfGroupSubdivisionRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[490],
      namedNode(`${rdf}rest`),
      blankNodes[623],
      namedNode(rico)
    ),
    quad(
      blankNodes[542],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsSourceOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[542],
      namedNode(`${rdf}rest`),
      blankNodes[637],
      namedNode(rico)
    ),
    quad(
      blankNodes[638],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[638],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[505],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAgentOriginationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[505],
      namedNode(`${rdf}rest`),
      blankNodes[638],
      namedNode(rico)
    ),
    quad(
      blankNodes[480],
      namedNode(`${dc11}date`),
      literal(`2021-02-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[480],
      namedNode(`${rdf}value`),
      literal(`Property made a subproperty of
                    'isAssociatedWithPlace".`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[318],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[318],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasPhysicalLocation").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[44],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[44],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[329],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[329],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[51],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[51],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[51],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[51],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[401],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[401],
      namedNode(`${owl}unionOf`),
      blankNodes[639],
      namedNode(rico)
    ),
    quad(
      blankNodes[91],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[91],
      namedNode(`${owl}maxQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[91],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[91],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}leadershipWithPosition`),
      namedNode(rico)
    ),
    quad(
      blankNodes[189],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[189],
      namedNode(`${owl}unionOf`),
      blankNodes[640],
      namedNode(rico)
    ),
    quad(
      blankNodes[314],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsSourceOfWholePartRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[314],
      namedNode(`${rdf}rest`),
      blankNodes[631],
      namedNode(rico)
    ),
    quad(
      blankNodes[253],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[253],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[116],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[116],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      blankNodes[116],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasPhysicalLocationOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[162],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[162],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[162],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasRuleTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[438],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[438],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "enforcedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[641],
      namedNode(`${rdf}first`),
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[641],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[86],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[86],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[86],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[86],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[642],
      namedNode(`${rdf}first`),
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[642],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[186],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[186],
      namedNode(`${owl}unionOf`),
      blankNodes[643],
      namedNode(rico)
    ),
    quad(
      blankNodes[636],
      namedNode(`${rdf}first`),
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[636],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[494],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[494],
      namedNode(`${rdf}rest`),
      blankNodes[644],
      namedNode(rico)
    ),
    quad(
      blankNodes[451],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[451],
      namedNode(`${owl}unionOf`),
      blankNodes[645],
      namedNode(rico)
    ),
    quad(
      blankNodes[52],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[52],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[52],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[52],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[270],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[270],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[442],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[442],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI and text definition (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isHolderOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[72],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[72],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}IdentifierType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[72],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasIdentifierType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[389],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[389],
      namedNode(`${rdf}value`),
      literal(`Changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[31],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[31],
      namedNode(`${rdf}value`),
      literal(`Scope note: updated (quite the same as RiC-CM definition).
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[439],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[439],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "expressedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[131],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[131],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      blankNodes[131],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}proxyIn`),
      namedNode(rico)
    ),
    quad(
      blankNodes[131],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[339],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[339],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (changed made
                    in order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "isHierarchicallySuperiorTo").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[549],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[549],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[646],
      namedNode(`${rdf}first`),
      namedNode(`${rico}derivationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[646],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[147],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[147],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[147],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[147],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[224],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[224],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "follows").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[455],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfLeadershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[455],
      namedNode(`${rdf}rest`),
      blankNodes[647],
      namedNode(rico)
    ),
    quad(
      blankNodes[181],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[181],
      namedNode(`${owl}unionOf`),
      blankNodes[648],
      namedNode(rico)
    ),
    quad(
      blankNodes[649],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationToInstantiationRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[649],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[520],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[520],
      namedNode(`${rdf}value`),
      literal(`changed the inverse property IRI and the text
                    definition.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[15],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[15],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[15],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[15],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[176],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[176],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[176],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[176],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}wholePartRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[501],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[501],
      namedNode(`${owl}unionOf`),
      blankNodes[650],
      namedNode(rico)
    ),
    quad(
      blankNodes[75],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[75],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RepresentationType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[75],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasRepresentationType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[220],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[220],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "expresses").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[64],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[64],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and some
                    changes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[63],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[63],
      namedNode(`${rdf}value`),
      literal(`Added to specify the dimension that is being
                    measured`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[107],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[107],
      namedNode(`${rdf}value`),
      literal(`scope note: added.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[651],
      namedNode(`${rdf}first`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[651],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[447],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[447],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "identifies").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[652],
      namedNode(`${rdf}first`),
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[652],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[37],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[37],
      namedNode(`${rdf}value`),
      literal(`Removed the cardinality Restrictions when the range is a
                    datatype property`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[407],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[407],
      namedNode(`${rdf}value`),
      literal(`Added a rdfs:comment.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[269],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[269],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[474],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[474],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isOwnerOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[343],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[343],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasTitle").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[653],
      namedNode(`${rdf}first`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[653],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[108],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[108],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[108],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[108],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}ownershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[448],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[448],
      namedNode(`${owl}unionOf`),
      blankNodes[654],
      namedNode(rico)
    ),
    quad(
      blankNodes[28],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[28],
      namedNode(`${rdf}value`),
      literal(`Class added in order to handle an accurate description of a
                    carrier extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[233],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[233],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRIs.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[158],
      namedNode(`${dc11}date`),
      literal(`2021-02-11`),
      namedNode(rico)
    ),
    quad(
      blankNodes[158],
      namedNode(`${rdf}value`),
      literal(`Updated the definition (rdfs:comment) and scope note, as they were recently changed in RiC-CM 0.2 full draft.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[337],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[337],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasSubject").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[435],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[435],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "describedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[55],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[55],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Scope note: made several paragraphs.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[567],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[567],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "resultsIn").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[123],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[123],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[123],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[123],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}positionHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[655],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[655],
      namedNode(`${rdf}rest`),
      blankNodes[627],
      namedNode(rico)
    ),
    quad(
      blankNodes[512],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[512],
      namedNode(`${rdf}value`),
      literal(`Changed the IRI, label, textual definition and range
                    (Record Resource removed, replaced by Record or Record Part).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[488],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[488],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property URI (the name of this property in RiC-O 0.1 was
                    "isRuleTypeOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[118],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[118],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Scope note: updated and made several
                    paragraphs. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[95],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[95],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and updated.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[30],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[30],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[30],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isCarrierTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[288],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[288],
      namedNode(`${rdf}rest`),
      blankNodes[656],
      namedNode(rico)
    ),
    quad(
      blankNodes[637],
      namedNode(`${rdf}first`),
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[637],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[204],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[204],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[259],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[259],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[472],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[472],
      namedNode(`${owl}unionOf`),
      blankNodes[657],
      namedNode(rico)
    ),
    quad(
      blankNodes[559],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[559],
      namedNode(`${owl}unionOf`),
      blankNodes[658],
      namedNode(rico)
    ),
    quad(
      blankNodes[352],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[352],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "receivedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[59],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[59],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[59],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[59],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}eventRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[516],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[516],
      namedNode(`${owl}unionOf`),
      blankNodes[659],
      namedNode(rico)
    ),
    quad(
      blankNodes[120],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[120],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      blankNodes[120],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[120],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[460],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[460],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[41],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[41],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[41],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[41],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}creationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[346],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[346],
      namedNode(`${owl}unionOf`),
      blankNodes[660],
      namedNode(rico)
    ),
    quad(
      blankNodes[517],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[517],
      namedNode(`${owl}unionOf`),
      blankNodes[661],
      namedNode(rico)
    ),
    quad(
      blankNodes[550],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[550],
      namedNode(`${rdf}value`),
      literal(`Datatype property created along with unitOfMeasurement,
                    Extent and UnitOfMeasurement classes, in order to provide methods for handling
                    extent accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[340],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsTargetOfTeachingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[340],
      namedNode(`${rdf}rest`),
      blankNodes[662],
      namedNode(rico)
    ),
    quad(
      blankNodes[32],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[32],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[32],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[32],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[663],
      namedNode(`${rdf}first`),
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[663],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[387],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[387],
      namedNode(`${rdf}rest`),
      blankNodes[664],
      namedNode(rico)
    ),
    quad(
      blankNodes[258],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[258],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, textual definition (changed made in
                    order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "hasFamilyLinkWith").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[273],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[273],
      namedNode(`${rdf}rest`),
      blankNodes[653],
      namedNode(rico)
    ),
    quad(
      blankNodes[23],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[23],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[23],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[23],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorityRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[327],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[327],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[366],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[366],
      namedNode(`${owl}unionOf`),
      blankNodes[665],
      namedNode(rico)
    ),
    quad(
      blankNodes[135],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[135],
      namedNode(`${rdf}value`),
      literal(`Removed the Restriction.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[553],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[553],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[497],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[497],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "isTitleOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[235],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordIsSourceOfAuthorshipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[235],
      namedNode(`${rdf}rest`),
      blankNodes[666],
      namedNode(rico)
    ),
    quad(
      blankNodes[132],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[132],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[132],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}proxyFor`),
      namedNode(rico)
    ),
    quad(
      blankNodes[132],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[234],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[234],
      namedNode(`${owl}unionOf`),
      blankNodes[667],
      namedNode(rico)
    ),
    quad(
      blankNodes[668],
      namedNode(`${rdf}first`),
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[668],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[515],
      namedNode(`${rdf}first`),
      namedNode(`${rico}ruleIsSourceOfRuleRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[515],
      namedNode(`${rdf}rest`),
      blankNodes[669],
      namedNode(rico)
    ),
    quad(
      blankNodes[296],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[296],
      namedNode(`${owl}unionOf`),
      blankNodes[670],
      namedNode(rico)
    ),
    quad(
      blankNodes[198],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[198],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[134],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[134],
      namedNode(`${rdf}value`),
      literal(`Scope note: updated and made several paragraphs. Objective:
                    to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[486],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[486],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (changed made
                    in order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "regulatedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[11],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[11],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[11],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[11],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[260],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[260],
      namedNode(`${rdf}value`),
      literal(`Object property added along with IdentifierType class and
                    isIdentifierTypeOf object property. `, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[183],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[183],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition and corresponding CM component (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "affects").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[200],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[200],
      namedNode(`${owl}unionOf`),
      blankNodes[671],
      namedNode(rico)
    ),
    quad(
      blankNodes[364],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[364],
      namedNode(`${rdf}value`),
      literal(`changed the IRI and label (changed made in order to make
                    RiC-O compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isAntecedentOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[240],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[240],
      namedNode(`${owl}unionOf`),
      blankNodes[672],
      namedNode(rico)
    ),
    quad(
      blankNodes[141],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[141],
      namedNode(`${rdf}value`),
      literal(`Class added in order to handle an accurate description of a
                    record resource extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[57],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[57],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and some
                    changes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[589],
      namedNode(`${rdf}first`),
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[589],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[291],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[291],
      namedNode(`${owl}unionOf`),
      blankNodes[673],
      namedNode(rico)
    ),
    quad(
      blankNodes[482],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[482],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "isPlaceNameOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[82],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[82],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[82],
      namedNode(`${owl}onClass`),
      blankNodes[674],
      namedNode(rico)
    ),
    quad(
      blankNodes[82],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[60],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[60],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      blankNodes[60],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isEventTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[416],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[416],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, textual definition (changed made in
                    order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "isAdjacentTo").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[538],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfPerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[538],
      namedNode(`${rdf}rest`),
      blankNodes[652],
      namedNode(rico)
    ),
    quad(
      blankNodes[675],
      namedNode(`${rdf}first`),
      namedNode(`${rico}childRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[675],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[656],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[656],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[307],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupIsSourceOfMembershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[307],
      namedNode(`${rdf}rest`),
      blankNodes[676],
      namedNode(rico)
    ),
    quad(
      blankNodes[152],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[152],
      namedNode(`${rdf}value`),
      literal(`IRI and label changed (RecordResourceState to RecordState),
                    as well as textual definition.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[111],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[111],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[111],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[111],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}performanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[576],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[576],
      namedNode(`${rdf}value`),
      literal(`Added a scope note.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[361],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[361],
      namedNode(`${owl}unionOf`),
      blankNodes[677],
      namedNode(rico)
    ),
    quad(
      blankNodes[275],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfTypeRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[275],
      namedNode(`${rdf}rest`),
      blankNodes[600],
      namedNode(rico)
    ),
    quad(
      blankNodes[390],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[390],
      namedNode(`${rdf}value`),
      literal(`changed the IRI and label (changed made in order to make
                    RiC-O compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "hasParent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[521],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[521],
      namedNode(`${rdf}value`),
      literal(`Object property created along with Extent and
                    UnitOfMeasurement classes, in order to provide methods for handling extent
                    accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[219],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[219],
      namedNode(`${rdf}value`),
      literal(`examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[0],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}onClass`),
      blankNodes[678],
      namedNode(rico)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[226],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[226],
      namedNode(`${owl}unionOf`),
      blankNodes[679],
      namedNode(rico)
    ),
    quad(
      blankNodes[523],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personHasKnowingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[523],
      namedNode(`${rdf}rest`),
      blankNodes[680],
      namedNode(rico)
    ),
    quad(
      blankNodes[303],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[303],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasMainSubject").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[3],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[3],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}ActivityType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[3],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasActivityType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[209],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[209],
      namedNode(`${rdf}value`),
      literal(`examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[453],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[453],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[629],
      namedNode(`${rdf}first`),
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[629],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[249],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[249],
      namedNode(`${owl}unionOf`),
      blankNodes[681],
      namedNode(rico)
    ),
    quad(
      blankNodes[428],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[428],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[179],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[179],
      namedNode(`${rdf}value`),
      literal(`scope note : updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[682],
      namedNode(`${rdf}first`),
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[682],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[557],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[557],
      namedNode(`${owl}unionOf`),
      blankNodes[683],
      namedNode(rico)
    ),
    quad(
      blankNodes[606],
      namedNode(`${rdf}first`),
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[606],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[12],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[12],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[12],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[12],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[266],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[266],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[101],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[101],
      namedNode(`${owl}maxQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[101],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[101],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}membershipWithPosition`),
      namedNode(rico)
    ),
    quad(
      blankNodes[563],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[563],
      namedNode(`${owl}unionOf`),
      blankNodes[684],
      namedNode(rico)
    ),
    quad(
      blankNodes[478],
      namedNode(`${rdf}first`),
      namedNode(`${rico}activityIsSourceOfPerformanceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[478],
      namedNode(`${rdf}rest`),
      blankNodes[613],
      namedNode(rico)
    ),
    quad(
      blankNodes[539],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[539],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "performs").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[96],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[96],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[96],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Mandate`),
      namedNode(rico)
    ),
    quad(
      blankNodes[96],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}mandateRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[498],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfAuthorityRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[498],
      namedNode(`${rdf}rest`),
      blankNodes[604],
      namedNode(rico)
    ),
    quad(
      blankNodes[355],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[355],
      namedNode(`${rdf}value`),
      literal(`Changed the IRI (hasRecordResourceState changed to
                    hasRecordState), label, textual definition and domain (RecordResource replaced
                    by Record or Record Part).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[164],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[164],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[164],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[164],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[238],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfChildRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[238],
      namedNode(`${rdf}rest`),
      blankNodes[675],
      namedNode(rico)
    ),
    quad(
      blankNodes[481],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[481],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "isPhysicalLocationOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[513],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[513],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "repliesTo").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[368],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[368],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[454],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[454],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[281],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[281],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasCoordinates").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[203],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[203],
      namedNode(`${owl}unionOf`),
      blankNodes[685],
      namedNode(rico)
    ),
    quad(
      blankNodes[570],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[570],
      namedNode(`${owl}unionOf`),
      blankNodes[686],
      namedNode(rico)
    ),
    quad(
      blankNodes[336],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[336],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "hasSubEvent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[592],
      namedNode(`${rdf}first`),
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[592],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[452],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[452],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "isLanguageOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[687],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[687],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[1],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}accumulationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[534],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfPositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[534],
      namedNode(`${rdf}rest`),
      blankNodes[688],
      namedNode(rico)
    ),
    quad(
      blankNodes[680],
      namedNode(`${rdf}first`),
      namedNode(`${rico}knowingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[680],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[256],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[256],
      namedNode(`${rdf}value`),
      literal(`Object property added along with the Extent Type
                    class.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[169],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[169],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[169],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[169],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[689],
      namedNode(`${rdf}first`),
      namedNode(`${rico}eventRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[689],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[126],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[126],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[126],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[126],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}positionToGroupRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[662],
      namedNode(`${rdf}first`),
      namedNode(`${rico}teachingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[662],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[210],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[210],
      namedNode(`${rdf}value`),
      literal(`examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[293],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[293],
      namedNode(`${rdf}rest`),
      blankNodes[651],
      namedNode(rico)
    ),
    quad(
      blankNodes[325],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[325],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[174],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[174],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[174],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[174],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}typeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[354],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[354],
      namedNode(`${owl}unionOf`),
      blankNodes[690],
      namedNode(rico)
    ),
    quad(
      blankNodes[322],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[322],
      namedNode(`${rdf}value`),
      literal(`Object property added along with RuleType class and
                    isRuleTypeOf object property. `, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[5],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[5],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[5],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[5],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}activityDocumentationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[56],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[56],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}EventType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[56],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasEventType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[676],
      namedNode(`${rdf}first`),
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[676],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[671],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      blankNodes[671],
      namedNode(`${rdf}rest`),
      blankNodes[691],
      namedNode(rico)
    ),
    quad(
      blankNodes[359],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personHasSiblingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[359],
      namedNode(`${rdf}rest`),
      blankNodes[641],
      namedNode(rico)
    ),
    quad(
      blankNodes[190],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[190],
      namedNode(`${owl}unionOf`),
      blankNodes[692],
      namedNode(rico)
    ),
    quad(
      blankNodes[263],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[263],
      namedNode(`${rdf}value`),
      literal(`changed the inverse property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[53],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[53],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[53],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[53],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[332],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfTeachingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[332],
      namedNode(`${rdf}rest`),
      blankNodes[624],
      namedNode(rico)
    ),
    quad(
      blankNodes[243],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[243],
      namedNode(`${rdf}value`),
      literal(`changed the text definition and superproperty
                    IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[445],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfIntellectualPropertyRightsRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[445],
      namedNode(`${rdf}rest`),
      blankNodes[693],
      namedNode(rico)
    ),
    quad(
      blankNodes[290],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[290],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "identifiedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[16],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[16],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[16],
      namedNode(`${owl}onClass`),
      blankNodes[694],
      namedNode(rico)
    ),
    quad(
      blankNodes[16],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentOriginationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[529],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsSourceOfMigrationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[529],
      namedNode(`${rdf}rest`),
      blankNodes[682],
      namedNode(rico)
    ),
    quad(
      blankNodes[6],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[6],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[6],
      namedNode(`${owl}onClass`),
      blankNodes[695],
      namedNode(rico)
    ),
    quad(
      blankNodes[6],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}activityDocumentationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[17],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[17],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[17],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[17],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[250],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[250],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[310],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[310],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasOccupationOfType").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[696],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[696],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[175],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[175],
      namedNode(`${rdf}value`),
      literal(`Class added in order to be able to handle units of
                    measurement as full entities.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[546],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[546],
      namedNode(`${rdf}value`),
      literal(`Examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[554],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[554],
      namedNode(`${rdf}value`),
      literal(`Updated the scope note, as a RecordResourceExtent class has
                    been created.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[540],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[540],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[433],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[433],
      namedNode(`${owl}unionOf`),
      blankNodes[697],
      namedNode(rico)
    ),
    quad(
      blankNodes[222],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[222],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[698],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      blankNodes[698],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[374],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[374],
      namedNode(`${rdf}value`),
      literal(`Scope note and examples added. Objective: to make RiC-O
                    compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[42],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[42],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RoleType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[42],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}creationWithRole`),
      namedNode(rico)
    ),
    quad(
      blankNodes[7],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[7],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[7],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isActivityTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[157],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[157],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RuleType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[157],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasOrHadRuleType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[525],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[525],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[383],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfEventRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[383],
      namedNode(`${rdf}rest`),
      blankNodes[689],
      namedNode(rico)
    ),
    quad(
      blankNodes[221],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[221],
      namedNode(`${rdf}rest`),
      blankNodes[699],
      namedNode(rico)
    ),
    quad(
      blankNodes[188],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[188],
      namedNode(`${owl}unionOf`),
      blankNodes[700],
      namedNode(rico)
    ),
    quad(
      blankNodes[302],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[302],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasLocation").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[565],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[565],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (changed made
                    in order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "regulates").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[29],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[29],
      namedNode(`${rdf}value`),
      literal(`Changed a bit the definition and added change
                    notes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[69],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[69],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs plus very few changes.
                    Disjoint with: enriched.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[106],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[106],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[106],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasOccupationTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[701],
      namedNode(`${rdf}first`),
      namedNode(`${rico}sequentialRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[701],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[446],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[446],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was
                    "hasIntellectualPropertyRightsOn").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[647],
      namedNode(`${rdf}first`),
      namedNode(`${rico}leadershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[647],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[102],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[102],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[102],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[102],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[632],
      namedNode(`${rdf}first`),
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[632],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[469],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[469],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "isOccupationTypeOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[345],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[345],
      namedNode(`${owl}unionOf`),
      blankNodes[702],
      namedNode(rico)
    ),
    quad(
      blankNodes[541],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[541],
      namedNode(`${owl}unionOf`),
      blankNodes[703],
      namedNode(rico)
    ),
    quad(
      blankNodes[33],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[33],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[33],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[33],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}childRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[172],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[172],
      namedNode(`${rdf}value`),
      literal(`made separate paragraphs in the scope note.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[199],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[199],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[223],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[223],
      namedNode(`${rdf}rest`),
      blankNodes[704],
      namedNode(rico)
    ),
    quad(
      blankNodes[705],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Extent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[705],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[335],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[335],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRIs (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "hasSubdivision").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[377],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[377],
      namedNode(`${owl}unionOf`),
      blankNodes[706],
      namedNode(rico)
    ),
    quad(
      blankNodes[397],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[397],
      namedNode(`${rdf}value`),
      literal(`change the inverse property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[9],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[9],
      namedNode(`${rdf}value`),
      literal(`removed the Restrictions`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[380],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[380],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[518],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[518],
      namedNode(`${owl}unionOf`),
      blankNodes[707],
      namedNode(rico)
    ),
    quad(
      blankNodes[321],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[321],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "hasPosition").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[109],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[109],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[109],
      namedNode(`${owl}onClass`),
      blankNodes[708],
      namedNode(rico)
    ),
    quad(
      blankNodes[109],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}ownershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[312],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfOwnershipRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[312],
      namedNode(`${rdf}rest`),
      blankNodes[663],
      namedNode(rico)
    ),
    quad(
      blankNodes[331],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[331],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "hasSpouse").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[305],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsTargetOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[305],
      namedNode(`${rdf}rest`),
      blankNodes[591],
      namedNode(rico)
    ),
    quad(
      blankNodes[73],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[73],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Identifier`),
      namedNode(rico)
    ),
    quad(
      blankNodes[73],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isIdentifierTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[292],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[292],
      namedNode(`${owl}unionOf`),
      blankNodes[709],
      namedNode(rico)
    ),
    quad(
      blankNodes[8],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[8],
      namedNode(`${rdf}value`),
      literal(`Scope note: updated (different from RiC-CM scope note).
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[276],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[276],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (the name of this property in RiC-O 0.1 was
                    "belongsToCategory").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[267],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[267],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[178],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[178],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[178],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[178],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}workRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[165],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[165],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[165],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[165],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[710],
      namedNode(`${rdf}first`),
      namedNode(`${rico}appellationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[710],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[464],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfManagementRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[464],
      namedNode(`${rdf}rest`),
      blankNodes[630],
      namedNode(rico)
    ),
    quad(
      blankNodes[306],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[306],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "managedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[163],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[163],
      namedNode(`${rdf}value`),
      literal(`Class added along with hasRuleType and isRuleTypeOf object
                    properties.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[13],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[13],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[13],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[13],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[508],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[508],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "receives").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[65],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[65],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[65],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[65],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}familyRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[239],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[239],
      namedNode(`${rdf}value`),
      literal(`changed the inverse property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[555],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[555],
      namedNode(`${owl}unionOf`),
      blankNodes[711],
      namedNode(rico)
    ),
    quad(
      blankNodes[712],
      namedNode(`${rdf}first`),
      namedNode(`${rico}knowingOfRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[712],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[308],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[308],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasMember").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[320],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[320],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasPlaceType").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[129],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[129],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[129],
      namedNode(`${owl}onClass`),
      blankNodes[713],
      namedNode(rico)
    ),
    quad(
      blankNodes[129],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}provenanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[262],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceIsSourceOfRecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[262],
      namedNode(`${rdf}rest`),
      blankNodes[687],
      namedNode(rico)
    ),
    quad(
      blankNodes[85],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[85],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[85],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[85],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}knowingOfRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[143],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[143],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[143],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[143],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceHoldingRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[208],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[208],
      namedNode(`${owl}unionOf`),
      blankNodes[714],
      namedNode(rico)
    ),
    quad(
      blankNodes[493],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[493],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isSubjectOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[429],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfAgentControlRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[429],
      namedNode(`${rdf}rest`),
      blankNodes[715],
      namedNode(rico)
    ),
    quad(
      blankNodes[633],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentControlRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[633],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[341],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[341],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasTeacher").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[153],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[153],
      namedNode(`${rdf}value`),
      literal(`scope note: updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[206],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[206],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[88],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[88],
      namedNode(`${rdf}value`),
      literal(`Changed the definition (skos:comment annotation); so that
                    it conforms to the RiC-CM one.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[543],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[543],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[184],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[184],
      namedNode(`${owl}unionOf`),
      blankNodes[716],
      namedNode(rico)
    ),
    quad(
      blankNodes[142],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[142],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[142],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[142],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceGeneticRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[212],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[212],
      namedNode(`${owl}unionOf`),
      blankNodes[717],
      namedNode(rico)
    ),
    quad(
      blankNodes[495],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[495],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (changed made
                    in order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "isHierarchicallyInferiorTo").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[271],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfAppellationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[271],
      namedNode(`${rdf}rest`),
      blankNodes[710],
      namedNode(rico)
    ),
    quad(
      blankNodes[425],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[425],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isConstituentOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[718],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Date`),
      namedNode(rico)
    ),
    quad(
      blankNodes[718],
      namedNode(`${rdf}rest`),
      blankNodes[705],
      namedNode(rico)
    ),
    quad(
      blankNodes[136],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[136],
      namedNode(`${rdf}value`),
      literal(`comment: updated. Scope note: made several paragraphs.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[54],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[54],
      namedNode(`${owl}allValuesFrom`),
      blankNodes[609],
      namedNode(rico)
    ),
    quad(
      blankNodes[54],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isDocumentaryFormTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[500],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[500],
      namedNode(`${owl}unionOf`),
      blankNodes[719],
      namedNode(rico)
    ),
    quad(
      blankNodes[76],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[76],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}ProductionTechniqueType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[76],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasProductionTechniqueType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[192],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[192],
      namedNode(`${rdf}value`),
      literal(`examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[384],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsTargetOfPlaceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[384],
      namedNode(`${rdf}rest`),
      blankNodes[720],
      namedNode(rico)
    ),
    quad(
      blankNodes[297],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[297],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasLanguage").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[151],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[151],
      namedNode(`${rdf}value`),
      literal(`scope note: updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[117],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[117],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[117],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasOrHadPhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[338],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfAgentHierarchicalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[338],
      namedNode(`${rdf}rest`),
      blankNodes[696],
      namedNode(rico)
    ),
    quad(
      blankNodes[721],
      namedNode(`${rdf}first`),
      namedNode(`${rico}descendanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[721],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[371],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[371],
      namedNode(`${rdf}value`),
      literal(`Scope note updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[167],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[167],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[167],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[167],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}spouseRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[722],
      namedNode(`${rdf}first`),
      namedNode(`${rico}descendanceRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[722],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[436],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[436],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[413],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsConnectedToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[413],
      namedNode(`${rdf}rest`),
      blankNodes[649],
      namedNode(rico)
    ),
    quad(
      blankNodes[408],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[408],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[36],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[36],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}PhysicalLocation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[36],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasCoordinatesOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[14],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[14],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[14],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[14],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentHierarchicalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[424],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[424],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isComponentOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[277],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[277],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasComponent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[622],
      namedNode(`${rdf}first`),
      namedNode(`${rico}groupSubdivisionRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[622],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[10],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[10],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Scope note: updated and made several
                    paragraphs. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[459],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[459],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[568],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[568],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[191],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[191],
      namedNode(`${owl}unionOf`),
      blankNodes[723],
      namedNode(rico)
    ),
    quad(
      blankNodes[34],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[34],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[34],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isContentTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[388],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[388],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[299],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[299],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "ledBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[150],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[150],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      blankNodes[150],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isRecordSetTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[530],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[530],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label and inverse property IRI (changed
                    made in order to make RiC-O compliant with RiC-CM 0.2; the name of this property
                    in RiC-O 0.1 was "isMigratedIntoInstantiation").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[395],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[395],
      namedNode(`${owl}unionOf`),
      blankNodes[724],
      namedNode(rico)
    ),
    quad(
      blankNodes[215],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[215],
      namedNode(`${rdf}rest`),
      blankNodes[642],
      namedNode(rico)
    ),
    quad(
      blankNodes[154],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[154],
      namedNode(`${rdf}value`),
      literal(`Removed the restrictions; completed the definition and
                    scope note.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[558],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[558],
      namedNode(`${owl}unionOf`),
      blankNodes[725],
      namedNode(rico)
    ),
    quad(
      blankNodes[399],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[399],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[547],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[547],
      namedNode(`${owl}unionOf`),
      blankNodes[726],
      namedNode(rico)
    ),
    quad(
      blankNodes[363],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[363],
      namedNode(`${rdf}rest`),
      blankNodes[727],
      namedNode(rico)
    ),
    quad(
      blankNodes[127],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[127],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[127],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isProductionTechniqueTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[77],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[77],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}CarrierType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[77],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasCarrierType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[97],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[97],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[97],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[97],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}mandateRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[342],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[342],
      namedNode(`${owl}unionOf`),
      blankNodes[728],
      namedNode(rico)
    ),
    quad(
      blankNodes[121],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[121],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Place`),
      namedNode(rico)
    ),
    quad(
      blankNodes[121],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasPlaceTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[457],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[457],
      namedNode(`${owl}unionOf`),
      blankNodes[729],
      namedNode(rico)
    ),
    quad(
      blankNodes[216],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[216],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, superproperty IRI, corresponding CM
                    component name (changed made in order to make RiC-O compliant with RiC-CM 0.2;
                    the name of this property in RiC-O 0.1 was "isDocumentationOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[533],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[533],
      namedNode(`${owl}unionOf`),
      blankNodes[730],
      namedNode(rico)
    ),
    quad(
      blankNodes[372],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[372],
      namedNode(`${rdf}value`),
      literal(`Text definition fixed. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[462],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[462],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI, textual definition (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isMainSubjectOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[98],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[98],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[98],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[98],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}asConcernsActivity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[241],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[241],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property and super property
                    IRI, text definition, domain (changed made in order to make RiC-O compliant with
                    RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "collectedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[382],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsConnectedToAgentRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[382],
      namedNode(`${rdf}rest`),
      blankNodes[731],
      namedNode(rico)
    ),
    quad(
      blankNodes[252],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[252],
      namedNode(`${owl}unionOf`),
      blankNodes[732],
      namedNode(rico)
    ),
    quad(
      blankNodes[83],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[83],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[83],
      namedNode(`${owl}onClass`),
      blankNodes[733],
      namedNode(rico)
    ),
    quad(
      blankNodes[83],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[71],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[71],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[71],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}groupSubdivisionRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[71],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[138],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[138],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs plus very few
                    changes.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[531],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[531],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Examples added. Objective: to make
                    RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[207],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[207],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name ; added a scope note (changed made
                    in order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "contains").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[295],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[295],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasJurisdiction").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[421],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[421],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (the name of this property in RiC-O 0.1 was
                    "isCategoryOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[551],
      namedNode(`${dc11}date`),
      literal(`2020-11-21`),
      namedNode(rico)
    ),
    quad(
      blankNodes[551],
      namedNode(`${rdf}value`),
      literal(`Added a scope note.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[245],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[245],
      namedNode(`${rdf}value`),
      literal(`changed the IRI and label (changed made in order to make
                    RiC-O compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "createdBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[449],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[449],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "includedIn").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[519],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[519],
      namedNode(`${rdf}rest`),
      blankNodes[734],
      namedNode(rico)
    ),
    quad(
      blankNodes[476],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[476],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isPartOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[704],
      namedNode(`${rdf}first`),
      namedNode(`${rico}sequentialRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[704],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[720],
      namedNode(`${rdf}first`),
      namedNode(`${rico}placeRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[720],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[595],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentOriginationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[595],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[440],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[440],
      namedNode(`${owl}unionOf`),
      blankNodes[735],
      namedNode(rico)
    ),
    quad(
      blankNodes[344],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[344],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, text definition (changed made in
                    order to make RiC-O compliant with RiC-CM 0.2; the name of this property in
                    RiC-O 0.1 was "hasWorkRelationWith").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[99],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[99],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[99],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorizingAgent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[400],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[400],
      namedNode(`${owl}unionOf`),
      blankNodes[736],
      namedNode(rico)
    ),
    quad(
      blankNodes[688],
      namedNode(`${rdf}first`),
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[688],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[528],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[528],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "createdByMigrationFromInstantiation").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[350],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[350],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (the name of
                    this property in RiC-O 0.1 was "publishedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[544],
      namedNode(`${rdf}first`),
      namedNode(`${rico}thingIsSourceOfSequentialRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[544],
      namedNode(`${rdf}rest`),
      blankNodes[701],
      namedNode(rico)
    ),
    quad(
      blankNodes[311],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[311],
      namedNode(`${owl}unionOf`),
      blankNodes[737],
      namedNode(rico)
    ),
    quad(
      blankNodes[316],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[316],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "involves").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[556],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[556],
      namedNode(`${owl}unionOf`),
      blankNodes[738],
      namedNode(rico)
    ),
    quad(
      blankNodes[381],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[381],
      namedNode(`${owl}unionOf`),
      blankNodes[739],
      namedNode(rico)
    ),
    quad(
      blankNodes[489],
      namedNode(`${dc11}date`),
      literal(`2020-10-19`),
      namedNode(rico)
    ),
    quad(
      blankNodes[489],
      namedNode(`${rdf}value`),
      literal(`Object property added along with RuleType class and
                    hasRuleType object property. `, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[148],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[148],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}RecordSetType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[148],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasRecordSetType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[441],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsSourceOfRecordResourceHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[441],
      namedNode(`${rdf}rest`),
      blankNodes[740],
      namedNode(rico)
    ),
    quad(
      blankNodes[386],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[386],
      namedNode(`${owl}unionOf`),
      blankNodes[741],
      namedNode(rico)
    ),
    quad(
      blankNodes[104],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[104],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[104],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}migrationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[104],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[458],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[458],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "isLegalStatusOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[378],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfAccumulationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[378],
      namedNode(`${rdf}rest`),
      blankNodes[742],
      namedNode(rico)
    ),
    quad(
      blankNodes[287],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[287],
      namedNode(`${owl}unionOf`),
      blankNodes[743],
      namedNode(rico)
    ),
    quad(
      blankNodes[130],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[130],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[130],
      namedNode(`${owl}onClass`),
      blankNodes[744],
      namedNode(rico)
    ),
    quad(
      blankNodes[130],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}provenanceRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[405],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[405],
      namedNode(`${rdf}value`),
      literal(`Object property created along with the Extent class and its
                    subclasses, in order to provide methods for handling extent
                    accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[470],
      namedNode(`${rdf}first`),
      namedNode(`${rico}positionIsTargetOfPositionHoldingRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[470],
      namedNode(`${rdf}rest`),
      blankNodes[614],
      namedNode(rico)
    ),
    quad(
      blankNodes[548],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[548],
      namedNode(`${owl}unionOf`),
      blankNodes[745],
      namedNode(rico)
    ),
    quad(
      blankNodes[620],
      namedNode(`${rdf}first`),
      namedNode(`${rico}membershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[620],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[664],
      namedNode(`${rdf}first`),
      namedNode(`${rico}authorshipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[664],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[522],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsTargetOfKnowingOfRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[522],
      namedNode(`${rdf}rest`),
      blankNodes[712],
      namedNode(rico)
    ),
    quad(
      blankNodes[602],
      namedNode(`${rdf}first`),
      namedNode(`${rico}placeRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[602],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[268],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[268],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[244],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[244],
      namedNode(`${owl}unionOf`),
      blankNodes[746],
      namedNode(rico)
    ),
    quad(
      blankNodes[398],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[398],
      namedNode(`${owl}unionOf`),
      blankNodes[747],
      namedNode(rico)
    ),
    quad(
      blankNodes[280],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[280],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "controlledBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[734],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentTemporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[734],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[38],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[38],
      namedNode(`${rdf}value`),
      literal(`scope note: updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[414],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsTargetOfRecordResourceToInstantiationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[414],
      namedNode(`${rdf}rest`),
      blankNodes[748],
      namedNode(rico)
    ),
    quad(
      blankNodes[137],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[137],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[137],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasInstantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[727],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[727],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[365],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[365],
      namedNode(`${rdf}value`),
      literal(`Object property created along with Extent and
                    UnitOfMeasurement classes, in order to provide methods for handling extent
                    accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[39],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[39],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}CorporateBody`),
      namedNode(rico)
    ),
    quad(
      blankNodes[39],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}isOrWasCorporateBodyTypeOf`),
      namedNode(rico)
    ),
    quad(
      blankNodes[503],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[503],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[229],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[229],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[246],
      namedNode(`${rdf}first`),
      namedNode(`${rico}instantiationIsSourceOfDerivationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[246],
      namedNode(`${rdf}rest`),
      blankNodes[646],
      namedNode(rico)
    ),
    quad(
      blankNodes[669],
      namedNode(`${rdf}first`),
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[669],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[420],
      namedNode(`${rdf}first`),
      namedNode(`${rico}typeIsSourceOfTypeRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[420],
      namedNode(`${rdf}rest`),
      blankNodes[601],
      namedNode(rico)
    ),
    quad(
      blankNodes[693],
      namedNode(`${rdf}first`),
      namedNode(`${rico}intellectualPropertyRightsRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[693],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[18],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[18],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[18],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[18],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentTemporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[139],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[139],
      namedNode(`${rdf}value`),
      literal(`Removed one Restriction.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[360],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[360],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[160],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[160],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[160],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[160],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}ruleRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[242],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[242],
      namedNode(`${owl}unionOf`),
      blankNodes[749],
      namedNode(rico)
    ),
    quad(
      blankNodes[430],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[430],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "controls").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[330],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personHasSpouseRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[330],
      namedNode(`${rdf}rest`),
      blankNodes[668],
      namedNode(rico)
    ),
    quad(
      blankNodes[348],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[348],
      namedNode(`${owl}unionOf`),
      blankNodes[750],
      namedNode(rico)
    ),
    quad(
      blankNodes[124],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[124],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[124],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[124],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}positionHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[577],
      namedNode(`${rdf}first`),
      namedNode(`${rico}leadershipRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[577],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[48],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[48],
      namedNode(`${rdf}value`),
      literal(`Removed the Restriction.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[201],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[201],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[255],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[255],
      namedNode(`${rdf}value`),
      literal(`Object property created along with the Extent class and its
                    subclasses, in order to provide methods for handling extent
                    accurately.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[211],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[211],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "describes").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[43],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[43],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[43],
      namedNode(`${owl}onClass`),
      blankNodes[751],
      namedNode(rico)
    ),
    quad(
      blankNodes[43],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}creationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[113],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[113],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and updated. Disjoint
                    with: enriched. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[715],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentControlRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[715],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[415],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[415],
      namedNode(`${rdf}value`),
      literal(`changed the IRI and label (changed made in order to make
                    RiC-O compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "instantiates").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[468],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[468],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "isNameOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[197],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[197],
      namedNode(`${owl}unionOf`),
      blankNodes[752],
      namedNode(rico)
    ),
    quad(
      blankNodes[393],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[393],
      namedNode(`${owl}unionOf`),
      blankNodes[753],
      namedNode(rico)
    ),
    quad(
      blankNodes[286],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[286],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, domain (the name of this property in RiC-O 0.1 was
                    "belongsToDemographicGroup").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[100],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[100],
      namedNode(`${rdf}value`),
      literal(`scope note: made separate paragraphs. Disjoint with:
                    enriched.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[289],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[289],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "heldBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[80],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[80],
      namedNode(`${rdf}value`),
      literal(`Class added in order to handle an accurate description of
                    an instantiation extent`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[171],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[171],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[171],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[171],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}temporalRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[644],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentHierarchicalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[644],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[323],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[323],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, super property IRI (the name of this property in RiC-O 0.1 was
                    "hasRuleType").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[358],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[358],
      namedNode(`${owl}unionOf`),
      blankNodes[754],
      namedNode(rico)
    ),
    quad(
      blankNodes[496],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[496],
      namedNode(`${owl}unionOf`),
      blankNodes[755],
      namedNode(rico)
    ),
    quad(
      blankNodes[122],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[122],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and updated. Disjoint
                    with: enriched. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[396],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentIsTargetOfCreationRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[396],
      namedNode(`${rdf}rest`),
      blankNodes[612],
      namedNode(rico)
    ),
    quad(
      blankNodes[144],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[144],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[144],
      namedNode(`${owl}onClass`),
      blankNodes[756],
      namedNode(rico)
    ),
    quad(
      blankNodes[144],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[394],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[394],
      namedNode(`${rdf}value`),
      literal(`changed the text definition and super property
                    IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[232],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsTargetOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[232],
      namedNode(`${rdf}rest`),
      blankNodes[722],
      namedNode(rico)
    ),
    quad(
      blankNodes[282],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[282],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasCorporateBodyType").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[177],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[177],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[177],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}wholePartRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[177],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[49],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[49],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Scope note: updated and made several
                    paragraphs. Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[599],
      namedNode(`${rdf}first`),
      namedNode(`${rico}functionalEquivalenceRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[599],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[504],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[504],
      namedNode(`${owl}unionOf`),
      blankNodes[757],
      namedNode(rico)
    ),
    quad(
      blankNodes[456],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[456],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, super
                    property IRI, textual definition (changed made in order to make RiC-O compliant
                    with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isLeaderOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[484],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[484],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[450],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[450],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isJurisdictionOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[477],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[477],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "involvedIn").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[443],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[443],
      namedNode(`${owl}unionOf`),
      blankNodes[758],
      namedNode(rico)
    ),
    quad(
      blankNodes[166],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[166],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[166],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[166],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}siblingRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[422],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[422],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[509],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceIsConnectedToRecordResourceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[509],
      namedNode(`${rdf}rest`),
      blankNodes[626],
      namedNode(rico)
    ),
    quad(
      blankNodes[217],
      namedNode(`${rdf}first`),
      namedNode(`${rico}positionIsSourceOfPositionToGroupRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[217],
      namedNode(`${rdf}rest`),
      blankNodes[598],
      namedNode(rico)
    ),
    quad(
      blankNodes[202],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[202],
      namedNode(`${rdf}value`),
      literal(`Text definition and scope note updated. Examples added.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[304],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[304],
      namedNode(`${owl}unionOf`),
      blankNodes[759],
      namedNode(rico)
    ),
    quad(
      blankNodes[545],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[545],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "precedes").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[46],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[46],
      namedNode(`${owl}maxQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[46],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}SingleDate`),
      namedNode(rico)
    ),
    quad(
      blankNodes[46],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasEndDate`),
      namedNode(rico)
    ),
    quad(
      blankNodes[272],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[272],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasAppellation").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[740],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceHoldingRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[740],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[47],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[47],
      namedNode(`${rdf}value`),
      literal(`Comment: updated. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[19],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[19],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[19],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}asConcernsActivity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[562],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[562],
      namedNode(`${owl}unionOf`),
      blankNodes[760],
      namedNode(rico)
    ),
    quad(
      blankNodes[20],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[20],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`2`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[20],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[20],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[731],
      namedNode(`${rdf}first`),
      namedNode(`${rico}agentRelationConnects`),
      namedNode(rico)
    ),
    quad(
      blankNodes[731],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[461],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[461],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isLocationOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[62],
      namedNode(`${dc11}date`),
      literal(`2020-10-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[62],
      namedNode(`${rdf}value`),
      literal(`Class added together with three subclasses and hasExtent
                    and isExtentOf Object properties`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[24],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[24],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[24],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[24],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorityRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[574],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[574],
      namedNode(`${owl}unionOf`),
      blankNodes[761],
      namedNode(rico)
    ),
    quad(
      blankNodes[426],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[426],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "containedBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[437],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[437],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[35],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[35],
      namedNode(`${rdf}value`),
      literal(`Scope note: added (quite the same as RiC-CM
                    definition).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[112],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[112],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}OccupationType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[112],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}hasOrHadOccupationOfType`),
      namedNode(rico)
    ),
    quad(
      blankNodes[762],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[762],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[697],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[697],
      namedNode(`${rdf}rest`),
      blankNodes[762],
      namedNode(rico)
    ),
    quad(
      blankNodes[159],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[159],
      namedNode(`${rdf}value`),
      literal(`Scope note: made separate paragraphs and updated.
                    Objective: to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[763],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[763],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[625],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[625],
      namedNode(`${rdf}rest`),
      blankNodes[763],
      namedNode(rico)
    ),
    quad(
      blankNodes[691],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      blankNodes[691],
      namedNode(`${rdf}rest`),
      blankNodes[764],
      namedNode(rico)
    ),
    quad(
      blankNodes[764],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[764],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[619],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Event`),
      namedNode(rico)
    ),
    quad(
      blankNodes[619],
      namedNode(`${rdf}rest`),
      blankNodes[655],
      namedNode(rico)
    ),
    quad(
      blankNodes[765],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[765],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[608],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[608],
      namedNode(`${rdf}rest`),
      blankNodes[765],
      namedNode(rico)
    ),
    quad(
      blankNodes[766],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[766],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[707],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[707],
      namedNode(`${rdf}rest`),
      blankNodes[766],
      namedNode(rico)
    ),
    quad(
      blankNodes[767],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Relation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[767],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[294],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[294],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was
                    "intellectualPropertyRightsHeldBy").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[677],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[677],
      namedNode(`${rdf}rest`),
      blankNodes[767],
      namedNode(rico)
    ),
    quad(
      blankNodes[723],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[723],
      namedNode(`${rdf}rest`),
      blankNodes[768],
      namedNode(rico)
    ),
    quad(
      blankNodes[768],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[768],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[769],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[769],
      namedNode(`${rdf}rest`),
      blankNodes[770],
      namedNode(rico)
    ),
    quad(
      blankNodes[770],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[770],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[711],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[711],
      namedNode(`${rdf}rest`),
      blankNodes[771],
      namedNode(rico)
    ),
    quad(
      blankNodes[771],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[771],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[772],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[772],
      namedNode(`${rdf}rest`),
      blankNodes[773],
      namedNode(rico)
    ),
    quad(
      blankNodes[678],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[678],
      namedNode(`${owl}unionOf`),
      blankNodes[772],
      namedNode(rico)
    ),
    quad(
      blankNodes[773],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[773],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[506],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[506],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI (the name of
                    this property in RiC-O 0.1 was "publishes").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[759],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[759],
      namedNode(`${rdf}rest`),
      blankNodes[774],
      namedNode(rico)
    ),
    quad(
      blankNodes[774],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[774],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[583],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[583],
      namedNode(`${rdf}rest`),
      blankNodes[775],
      namedNode(rico)
    ),
    quad(
      blankNodes[775],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[775],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[684],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[684],
      namedNode(`${rdf}rest`),
      blankNodes[776],
      namedNode(rico)
    ),
    quad(
      blankNodes[776],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[776],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[679],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[679],
      namedNode(`${rdf}rest`),
      blankNodes[777],
      namedNode(rico)
    ),
    quad(
      blankNodes[777],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[777],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[739],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[739],
      namedNode(`${rdf}rest`),
      blankNodes[778],
      namedNode(rico)
    ),
    quad(
      blankNodes[778],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[778],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[537],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[537],
      namedNode(`${owl}unionOf`),
      blankNodes[779],
      namedNode(rico)
    ),
    quad(
      blankNodes[780],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[780],
      namedNode(`${rdf}rest`),
      blankNodes[781],
      namedNode(rico)
    ),
    quad(
      blankNodes[756],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[756],
      namedNode(`${owl}unionOf`),
      blankNodes[780],
      namedNode(rico)
    ),
    quad(
      blankNodes[781],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[781],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[703],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[703],
      namedNode(`${rdf}rest`),
      blankNodes[782],
      namedNode(rico)
    ),
    quad(
      blankNodes[782],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[782],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[783],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[783],
      namedNode(`${rdf}rest`),
      blankNodes[784],
      namedNode(rico)
    ),
    quad(
      blankNodes[713],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[713],
      namedNode(`${owl}unionOf`),
      blankNodes[783],
      namedNode(rico)
    ),
    quad(
      blankNodes[784],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[784],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[580],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[580],
      namedNode(`${rdf}rest`),
      blankNodes[785],
      namedNode(rico)
    ),
    quad(
      blankNodes[785],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[785],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[573],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[573],
      namedNode(`${owl}unionOf`),
      blankNodes[786],
      namedNode(rico)
    ),
    quad(
      blankNodes[362],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[362],
      namedNode(`${owl}unionOf`),
      blankNodes[787],
      namedNode(rico)
    ),
    quad(
      blankNodes[634],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[634],
      namedNode(`${rdf}rest`),
      blankNodes[788],
      namedNode(rico)
    ),
    quad(
      blankNodes[788],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[788],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[789],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[789],
      namedNode(`${rdf}rest`),
      blankNodes[790],
      namedNode(rico)
    ),
    quad(
      blankNodes[695],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[695],
      namedNode(`${owl}unionOf`),
      blankNodes[789],
      namedNode(rico)
    ),
    quad(
      blankNodes[790],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[790],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[761],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[761],
      namedNode(`${rdf}rest`),
      blankNodes[791],
      namedNode(rico)
    ),
    quad(
      blankNodes[791],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[791],
      namedNode(`${rdf}rest`),
      blankNodes[792],
      namedNode(rico)
    ),
    quad(
      blankNodes[792],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[792],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[793],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[793],
      namedNode(`${rdf}rest`),
      blankNodes[794],
      namedNode(rico)
    ),
    quad(
      blankNodes[694],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[694],
      namedNode(`${owl}unionOf`),
      blankNodes[793],
      namedNode(rico)
    ),
    quad(
      blankNodes[324],
      namedNode(`${dc11}date`),
      literal(`2020-12-28`),
      namedNode(rico)
    ),
    quad(
      blankNodes[324],
      namedNode(`${rdf}value`),
      literal(`Object property added for handling the case where a Record
                    Set is described as having all or some members that belong to some category (see
                    RiC-CM 0.2 attributes section, #4.4 on Record Set, Record and Record Part
                    attributes).`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[794],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[794],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[725],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[725],
      namedNode(`${rdf}rest`),
      blankNodes[795],
      namedNode(rico)
    ),
    quad(
      blankNodes[795],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[795],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[635],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[635],
      namedNode(`${rdf}rest`),
      blankNodes[796],
      namedNode(rico)
    ),
    quad(
      blankNodes[796],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[796],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[582],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[582],
      namedNode(`${rdf}rest`),
      blankNodes[797],
      namedNode(rico)
    ),
    quad(
      blankNodes[797],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[797],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[597],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[597],
      namedNode(`${rdf}rest`),
      blankNodes[798],
      namedNode(rico)
    ),
    quad(
      blankNodes[798],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[798],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[738],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[738],
      namedNode(`${rdf}rest`),
      blankNodes[799],
      namedNode(rico)
    ),
    quad(
      blankNodes[742],
      namedNode(`${rdf}first`),
      namedNode(`${rico}accumulationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[742],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[799],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[799],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[672],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[672],
      namedNode(`${rdf}rest`),
      blankNodes[800],
      namedNode(rico)
    ),
    quad(
      blankNodes[800],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[800],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[717],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[717],
      namedNode(`${rdf}rest`),
      blankNodes[801],
      namedNode(rico)
    ),
    quad(
      blankNodes[801],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[801],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[611],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[611],
      namedNode(`${rdf}rest`),
      blankNodes[802],
      namedNode(rico)
    ),
    quad(
      blankNodes[802],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[802],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[803],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[803],
      namedNode(`${rdf}rest`),
      blankNodes[804],
      namedNode(rico)
    ),
    quad(
      blankNodes[804],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[804],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[714],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[714],
      namedNode(`${rdf}rest`),
      blankNodes[805],
      namedNode(rico)
    ),
    quad(
      blankNodes[254],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[254],
      namedNode(`${owl}unionOf`),
      blankNodes[806],
      namedNode(rico)
    ),
    quad(
      blankNodes[805],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[805],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[807],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[807],
      namedNode(`${rdf}rest`),
      blankNodes[808],
      namedNode(rico)
    ),
    quad(
      blankNodes[733],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[733],
      namedNode(`${owl}unionOf`),
      blankNodes[807],
      namedNode(rico)
    ),
    quad(
      blankNodes[808],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[808],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[594],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[594],
      namedNode(`${rdf}rest`),
      blankNodes[809],
      namedNode(rico)
    ),
    quad(
      blankNodes[809],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[809],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[585],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[585],
      namedNode(`${rdf}rest`),
      blankNodes[810],
      namedNode(rico)
    ),
    quad(
      blankNodes[810],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[810],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[811],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[811],
      namedNode(`${rdf}rest`),
      blankNodes[812],
      namedNode(rico)
    ),
    quad(
      blankNodes[751],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[751],
      namedNode(`${owl}unionOf`),
      blankNodes[811],
      namedNode(rico)
    ),
    quad(
      blankNodes[145],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[145],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[145],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[145],
      namedNode(`${owl}qualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[812],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[812],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[686],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[686],
      namedNode(`${rdf}rest`),
      blankNodes[813],
      namedNode(rico)
    ),
    quad(
      blankNodes[813],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[813],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[806],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[806],
      namedNode(`${rdf}rest`),
      blankNodes[814],
      namedNode(rico)
    ),
    quad(
      blankNodes[814],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[814],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[640],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[640],
      namedNode(`${rdf}rest`),
      blankNodes[815],
      namedNode(rico)
    ),
    quad(
      blankNodes[815],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[815],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[593],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[593],
      namedNode(`${rdf}rest`),
      blankNodes[816],
      namedNode(rico)
    ),
    quad(
      blankNodes[816],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[816],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[760],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[760],
      namedNode(`${rdf}rest`),
      blankNodes[817],
      namedNode(rico)
    ),
    quad(
      blankNodes[161],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[161],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[161],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Thing`),
      namedNode(rico)
    ),
    quad(
      blankNodes[161],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}ruleRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[817],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[817],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[743],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[743],
      namedNode(`${rdf}rest`),
      blankNodes[818],
      namedNode(rico)
    ),
    quad(
      blankNodes[818],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[818],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[750],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[750],
      namedNode(`${rdf}rest`),
      blankNodes[819],
      namedNode(rico)
    ),
    quad(
      blankNodes[819],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[819],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[726],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[726],
      namedNode(`${rdf}rest`),
      blankNodes[820],
      namedNode(rico)
    ),
    quad(
      blankNodes[820],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[820],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[728],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[728],
      namedNode(`${rdf}rest`),
      blankNodes[821],
      namedNode(rico)
    ),
    quad(
      blankNodes[821],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[821],
      namedNode(`${rdf}rest`),
      blankNodes[822],
      namedNode(rico)
    ),
    quad(
      blankNodes[822],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[822],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[499],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[499],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "isUnderAuthorityOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[673],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[673],
      namedNode(`${rdf}rest`),
      blankNodes[823],
      namedNode(rico)
    ),
    quad(
      blankNodes[823],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[823],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[683],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[683],
      namedNode(`${rdf}rest`),
      blankNodes[824],
      namedNode(rico)
    ),
    quad(
      blankNodes[824],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[824],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[685],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[685],
      namedNode(`${rdf}rest`),
      blankNodes[825],
      namedNode(rico)
    ),
    quad(
      blankNodes[825],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[825],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[757],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[757],
      namedNode(`${rdf}rest`),
      blankNodes[826],
      namedNode(rico)
    ),
    quad(
      blankNodes[826],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[826],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[615],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[615],
      namedNode(`${rdf}rest`),
      blankNodes[827],
      namedNode(rico)
    ),
    quad(
      blankNodes[827],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[827],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[146],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[146],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[146],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[146],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[724],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[724],
      namedNode(`${rdf}rest`),
      blankNodes[828],
      namedNode(rico)
    ),
    quad(
      blankNodes[828],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[828],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[578],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[578],
      namedNode(`${rdf}rest`),
      blankNodes[829],
      namedNode(rico)
    ),
    quad(
      blankNodes[829],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[829],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[616],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[616],
      namedNode(`${rdf}rest`),
      blankNodes[830],
      namedNode(rico)
    ),
    quad(
      blankNodes[830],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[830],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[831],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[831],
      namedNode(`${rdf}rest`),
      blankNodes[832],
      namedNode(rico)
    ),
    quad(
      blankNodes[621],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[621],
      namedNode(`${owl}unionOf`),
      blankNodes[831],
      namedNode(rico)
    ),
    quad(
      blankNodes[832],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[832],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[658],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[658],
      namedNode(`${rdf}rest`),
      blankNodes[833],
      namedNode(rico)
    ),
    quad(
      blankNodes[357],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[357],
      namedNode(`${rdf}value`),
      literal(`changed the super property IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[833],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[833],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[755],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[755],
      namedNode(`${rdf}rest`),
      blankNodes[834],
      namedNode(rico)
    ),
    quad(
      blankNodes[834],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[834],
      namedNode(`${rdf}rest`),
      blankNodes[835],
      namedNode(rico)
    ),
    quad(
      blankNodes[835],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[835],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[754],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[754],
      namedNode(`${rdf}rest`),
      blankNodes[836],
      namedNode(rico)
    ),
    quad(
      blankNodes[836],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[836],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[659],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[659],
      namedNode(`${rdf}rest`),
      blankNodes[837],
      namedNode(rico)
    ),
    quad(
      blankNodes[837],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[837],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[746],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[746],
      namedNode(`${rdf}rest`),
      blankNodes[838],
      namedNode(rico)
    ),
    quad(
      blankNodes[838],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[838],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[487],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[487],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition, corresponding CM component name (changed made in order to make RiC-O
                    compliant with RiC-CM 0.2; the name of this property in RiC-O 0.1 was
                    "isResponsibleForEnforcing").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[735],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[735],
      namedNode(`${rdf}rest`),
      blankNodes[839],
      namedNode(rico)
    ),
    quad(
      blankNodes[839],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[839],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[648],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[648],
      namedNode(`${rdf}rest`),
      blankNodes[840],
      namedNode(rico)
    ),
    quad(
      blankNodes[840],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[840],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[706],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[706],
      namedNode(`${rdf}rest`),
      blankNodes[841],
      namedNode(rico)
    ),
    quad(
      blankNodes[841],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[841],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[842],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[842],
      namedNode(`${rdf}rest`),
      blankNodes[843],
      namedNode(rico)
    ),
    quad(
      blankNodes[843],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[843],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[643],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[643],
      namedNode(`${rdf}rest`),
      blankNodes[842],
      namedNode(rico)
    ),
    quad(
      blankNodes[844],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[844],
      namedNode(`${rdf}rest`),
      blankNodes[845],
      namedNode(rico)
    ),
    quad(
      blankNodes[419],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[419],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, text
                    definition (the name of this property in RiC-O 0.1 was
                    "isAppellationOf").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[532],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[532],
      namedNode(`${rdf}value`),
      literal(`Examples added. Objective: to make RiC-O compliant with
                    RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[845],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[845],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[716],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[716],
      namedNode(`${rdf}rest`),
      blankNodes[844],
      namedNode(rico)
    ),
    quad(
      blankNodes[846],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[846],
      namedNode(`${rdf}rest`),
      blankNodes[847],
      namedNode(rico)
    ),
    quad(
      blankNodes[847],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[847],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[779],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[779],
      namedNode(`${rdf}rest`),
      blankNodes[846],
      namedNode(rico)
    ),
    quad(
      blankNodes[848],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[848],
      namedNode(`${rdf}rest`),
      blankNodes[849],
      namedNode(rico)
    ),
    quad(
      blankNodes[849],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[849],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[850],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[850],
      namedNode(`${rdf}rest`),
      blankNodes[848],
      namedNode(rico)
    ),
    quad(
      blankNodes[851],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[851],
      namedNode(`${rdf}rest`),
      blankNodes[852],
      namedNode(rico)
    ),
    quad(
      blankNodes[852],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[852],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[195],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[195],
      namedNode(`${rdf}value`),
      literal(`fixed the CM corresponding component name.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[605],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[605],
      namedNode(`${rdf}rest`),
      blankNodes[851],
      namedNode(rico)
    ),
    quad(
      blankNodes[853],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[853],
      namedNode(`${rdf}rest`),
      blankNodes[854],
      namedNode(rico)
    ),
    quad(
      blankNodes[854],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[854],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[737],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[737],
      namedNode(`${rdf}rest`),
      blankNodes[853],
      namedNode(rico)
    ),
    quad(
      blankNodes[855],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[855],
      namedNode(`${rdf}rest`),
      blankNodes[856],
      namedNode(rico)
    ),
    quad(
      blankNodes[856],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[856],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[857],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[857],
      namedNode(`${rdf}rest`),
      blankNodes[855],
      namedNode(rico)
    ),
    quad(
      blankNodes[674],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[674],
      namedNode(`${owl}unionOf`),
      blankNodes[857],
      namedNode(rico)
    ),
    quad(
      blankNodes[858],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[858],
      namedNode(`${rdf}rest`),
      blankNodes[859],
      namedNode(rico)
    ),
    quad(
      blankNodes[859],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[859],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[561],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[561],
      namedNode(`${owl}unionOf`),
      blankNodes[769],
      namedNode(rico)
    ),
    quad(
      blankNodes[657],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[657],
      namedNode(`${rdf}rest`),
      blankNodes[858],
      namedNode(rico)
    ),
    quad(
      blankNodes[860],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[860],
      namedNode(`${rdf}rest`),
      blankNodes[861],
      namedNode(rico)
    ),
    quad(
      blankNodes[861],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[861],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[741],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[741],
      namedNode(`${rdf}rest`),
      blankNodes[860],
      namedNode(rico)
    ),
    quad(
      blankNodes[862],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[862],
      namedNode(`${rdf}rest`),
      blankNodes[863],
      namedNode(rico)
    ),
    quad(
      blankNodes[863],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[863],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[864],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[864],
      namedNode(`${rdf}rest`),
      blankNodes[862],
      namedNode(rico)
    ),
    quad(
      blankNodes[584],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[584],
      namedNode(`${owl}unionOf`),
      blankNodes[864],
      namedNode(rico)
    ),
    quad(
      blankNodes[865],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[865],
      namedNode(`${rdf}rest`),
      blankNodes[866],
      namedNode(rico)
    ),
    quad(
      blankNodes[866],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[866],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[278],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[278],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI, textual
                    definition (changed made in order to make RiC-O compliant with RiC-CM 0.2; the
                    name of this property in RiC-O 0.1 was "hasConstituent").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[667],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[667],
      namedNode(`${rdf}rest`),
      blankNodes[865],
      namedNode(rico)
    ),
    quad(
      blankNodes[867],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[867],
      namedNode(`${rdf}rest`),
      blankNodes[868],
      namedNode(rico)
    ),
    quad(
      blankNodes[868],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[868],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[752],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[752],
      namedNode(`${rdf}rest`),
      blankNodes[867],
      namedNode(rico)
    ),
    quad(
      blankNodes[869],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[869],
      namedNode(`${rdf}rest`),
      blankNodes[870],
      namedNode(rico)
    ),
    quad(
      blankNodes[870],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[870],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[758],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[758],
      namedNode(`${rdf}rest`),
      blankNodes[869],
      namedNode(rico)
    ),
    quad(
      blankNodes[871],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[871],
      namedNode(`${rdf}rest`),
      blankNodes[872],
      namedNode(rico)
    ),
    quad(
      blankNodes[872],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[872],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[873],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[873],
      namedNode(`${rdf}rest`),
      blankNodes[871],
      namedNode(rico)
    ),
    quad(
      blankNodes[666],
      namedNode(`${rdf}first`),
      namedNode(`${rico}authorshipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[666],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[708],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[708],
      namedNode(`${owl}unionOf`),
      blankNodes[873],
      namedNode(rico)
    ),
    quad(
      blankNodes[874],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[874],
      namedNode(`${rdf}rest`),
      blankNodes[875],
      namedNode(rico)
    ),
    quad(
      blankNodes[875],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Position`),
      namedNode(rico)
    ),
    quad(
      blankNodes[875],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[709],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Group`),
      namedNode(rico)
    ),
    quad(
      blankNodes[709],
      namedNode(`${rdf}rest`),
      blankNodes[874],
      namedNode(rico)
    ),
    quad(
      blankNodes[747],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[747],
      namedNode(`${rdf}rest`),
      blankNodes[876],
      namedNode(rico)
    ),
    quad(
      blankNodes[876],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[876],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[639],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[639],
      namedNode(`${rdf}rest`),
      blankNodes[877],
      namedNode(rico)
    ),
    quad(
      blankNodes[877],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[877],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[736],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[736],
      namedNode(`${rdf}rest`),
      blankNodes[878],
      namedNode(rico)
    ),
    quad(
      blankNodes[878],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[878],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[375],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[375],
      namedNode(`${owl}unionOf`),
      blankNodes[850],
      namedNode(rico)
    ),
    quad(
      blankNodes[732],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[732],
      namedNode(`${rdf}rest`),
      blankNodes[879],
      namedNode(rico)
    ),
    quad(
      blankNodes[879],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[879],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[610],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[610],
      namedNode(`${rdf}rest`),
      blankNodes[880],
      namedNode(rico)
    ),
    quad(
      blankNodes[880],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[880],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[587],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[587],
      namedNode(`${rdf}rest`),
      blankNodes[881],
      namedNode(rico)
    ),
    quad(
      blankNodes[881],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[881],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[690],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[690],
      namedNode(`${rdf}rest`),
      blankNodes[882],
      namedNode(rico)
    ),
    quad(
      blankNodes[882],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[882],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[660],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[660],
      namedNode(`${rdf}rest`),
      blankNodes[883],
      namedNode(rico)
    ),
    quad(
      blankNodes[883],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[883],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[247],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personIsSourceOfDescendanceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[247],
      namedNode(`${rdf}rest`),
      blankNodes[721],
      namedNode(rico)
    ),
    quad(
      blankNodes[650],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[650],
      namedNode(`${rdf}rest`),
      blankNodes[884],
      namedNode(rico)
    ),
    quad(
      blankNodes[884],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[884],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[654],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[654],
      namedNode(`${rdf}rest`),
      blankNodes[885],
      namedNode(rico)
    ),
    quad(
      blankNodes[885],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      blankNodes[885],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[749],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[749],
      namedNode(`${rdf}rest`),
      blankNodes[886],
      namedNode(rico)
    ),
    quad(
      blankNodes[886],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[886],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[603],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[603],
      namedNode(`${rdf}rest`),
      blankNodes[887],
      namedNode(rico)
    ),
    quad(
      blankNodes[887],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[887],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[719],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[719],
      namedNode(`${rdf}rest`),
      blankNodes[888],
      namedNode(rico)
    ),
    quad(
      blankNodes[888],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[888],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[699],
      namedNode(`${rdf}first`),
      namedNode(`${rico}temporalRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[699],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[590],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[590],
      namedNode(`${rdf}rest`),
      blankNodes[889],
      namedNode(rico)
    ),
    quad(
      blankNodes[889],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordSet`),
      namedNode(rico)
    ),
    quad(
      blankNodes[889],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[702],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[702],
      namedNode(`${rdf}rest`),
      blankNodes[890],
      namedNode(rico)
    ),
    quad(
      blankNodes[890],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[890],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[681],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[681],
      namedNode(`${rdf}rest`),
      blankNodes[891],
      namedNode(rico)
    ),
    quad(
      blankNodes[891],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[891],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[753],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[753],
      namedNode(`${rdf}rest`),
      blankNodes[892],
      namedNode(rico)
    ),
    quad(
      blankNodes[892],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[892],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[744],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[744],
      namedNode(`${owl}unionOf`),
      blankNodes[893],
      namedNode(rico)
    ),
    quad(
      blankNodes[893],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[893],
      namedNode(`${rdf}rest`),
      blankNodes[894],
      namedNode(rico)
    ),
    quad(
      blankNodes[392],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[392],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property and super property
                    IRI, text definition, domain (changed made in order to make RiC-O compliant with
                    RiC-CM 0.2; the name of this property in RiC-O 0.1 was "collects").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[894],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[894],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[786],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[786],
      namedNode(`${rdf}rest`),
      blankNodes[718],
      namedNode(rico)
    ),
    quad(
      blankNodes[730],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Appellation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[730],
      namedNode(`${rdf}rest`),
      blankNodes[698],
      namedNode(rico)
    ),
    quad(
      blankNodes[700],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[700],
      namedNode(`${rdf}rest`),
      blankNodes[895],
      namedNode(rico)
    ),
    quad(
      blankNodes[895],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[895],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[665],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[665],
      namedNode(`${rdf}rest`),
      blankNodes[618],
      namedNode(rico)
    ),
    quad(
      blankNodes[745],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Activity`),
      namedNode(rico)
    ),
    quad(
      blankNodes[745],
      namedNode(`${rdf}rest`),
      blankNodes[896],
      namedNode(rico)
    ),
    quad(
      blankNodes[896],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[896],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[897],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[897],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[787],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[787],
      namedNode(`${rdf}rest`),
      blankNodes[897],
      namedNode(rico)
    ),
    quad(
      blankNodes[114],
      namedNode(`${dc11}date`),
      literal(`2021-02-08`),
      namedNode(rico)
    ),
    quad(
      blankNodes[114],
      namedNode(`${rdf}value`),
      literal(`Removed one Restriction.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[898],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[898],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[661],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[661],
      namedNode(`${rdf}rest`),
      blankNodes[898],
      namedNode(rico)
    ),
    quad(
      blankNodes[899],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[899],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[900],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[900],
      namedNode(`${rdf}rest`),
      blankNodes[899],
      namedNode(rico)
    ),
    quad(
      blankNodes[729],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[729],
      namedNode(`${rdf}rest`),
      blankNodes[900],
      namedNode(rico)
    ),
    quad(
      blankNodes[901],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[901],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[902],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[902],
      namedNode(`${rdf}rest`),
      blankNodes[901],
      namedNode(rico)
    ),
    quad(
      blankNodes[645],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[645],
      namedNode(`${rdf}rest`),
      blankNodes[902],
      namedNode(rico)
    ),
    quad(
      blankNodes[903],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[903],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[904],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[904],
      namedNode(`${rdf}rest`),
      blankNodes[903],
      namedNode(rico)
    ),
    quad(
      blankNodes[552],
      namedNode(`${dc11}date`),
      literal(`2020-12-29`),
      namedNode(rico)
    ),
    quad(
      blankNodes[552],
      namedNode(`${rdf}value`),
      literal(`Created following the addition of RiC-R079 relation in
                    RiC-CM 0.2`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[571],
      namedNode(`${dc11}date`),
      literal(`2020-11-01`),
      namedNode(rico)
    ),
    quad(
      blankNodes[571],
      namedNode(`${rdf}value`),
      literal(`Text definition updated. Objective: to make RiC-O compliant
                    with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[588],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[588],
      namedNode(`${rdf}rest`),
      blankNodes[904],
      namedNode(rico)
    ),
    quad(
      blankNodes[905],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordPart`),
      namedNode(rico)
    ),
    quad(
      blankNodes[905],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[906],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Record`),
      namedNode(rico)
    ),
    quad(
      blankNodes[906],
      namedNode(`${rdf}rest`),
      blankNodes[905],
      namedNode(rico)
    ),
    quad(
      blankNodes[670],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[670],
      namedNode(`${rdf}rest`),
      blankNodes[906],
      namedNode(rico)
    ),
    quad(
      blankNodes[907],
      namedNode(`${rdf}first`),
      namedNode(`${rico}Rule`),
      namedNode(rico)
    ),
    quad(
      blankNodes[907],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[628],
      namedNode(`${rdf}first`),
      namedNode(`${rico}RecordResource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[628],
      namedNode(`${rdf}rest`),
      blankNodes[907],
      namedNode(rico)
    ),
    quad(
      blankNodes[908],
      namedNode(`${rdf}first`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[908],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[692],
      namedNode(`${rdf}first`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[692],
      namedNode(`${rdf}rest`),
      blankNodes[908],
      namedNode(rico)
    ),
    quad(
      blankNodes[909],
      namedNode(`${rdf}first`),
      namedNode(`${rico}MandateRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[909],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[607],
      namedNode(`${rdf}first`),
      namedNode(`${rico}AgentTemporalRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[607],
      namedNode(`${rdf}rest`),
      blankNodes[909],
      namedNode(rico)
    ),
    quad(
      blankNodes[94],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[94],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${rico}Agent`),
      namedNode(rico)
    ),
    quad(
      blankNodes[94],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}authorizes`),
      namedNode(rico)
    ),
    quad(
      blankNodes[103],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[103],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[103],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Person`),
      namedNode(rico)
    ),
    quad(
      blankNodes[103],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}membershipRelationHasTarget`),
      namedNode(rico)
    ),
    quad(
      blankNodes[301],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[301],
      namedNode(`${rdf}value`),
      literal(`changed the IRI, label, inverse property IRI and textual
                    definition (the name of this property in RiC-O 0.1 was
                    "hasLegalStatus").`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[261],
      namedNode(`${dc11}date`),
      literal(`2021-01-22`),
      namedNode(rico)
    ),
    quad(
      blankNodes[261],
      namedNode(`${rdf}value`),
      literal(`changed the superproperty IRI.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[61],
      namedNode(`${dc11}date`),
      literal(`2020-10-23`),
      namedNode(rico)
    ),
    quad(
      blankNodes[61],
      namedNode(`${rdf}value`),
      literal(`Scope note: updated and made several paragraphs. Objective:
                    to make RiC-O compliant with RiC-CM v0.2.`, 'en'),
      namedNode(rico)
    ),
    quad(
      blankNodes[391],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(rico)
    ),
    quad(
      blankNodes[391],
      namedNode(`${owl}unionOf`),
      blankNodes[803],
      namedNode(rico)
    ),
    quad(
      blankNodes[283],
      namedNode(`${rdf}first`),
      namedNode(`${rico}personHasCorrespondenceRelation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[283],
      namedNode(`${rdf}rest`),
      blankNodes[586],
      namedNode(rico)
    ),
    quad(
      blankNodes[748],
      namedNode(`${rdf}first`),
      namedNode(`${rico}recordResourceToInstantiationRelationHasSource`),
      namedNode(rico)
    ),
    quad(
      blankNodes[748],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(rico)
    ),
    quad(
      blankNodes[105],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(rico)
    ),
    quad(
      blankNodes[105],
      namedNode(`${owl}minQualifiedCardinality`),
      literal(`1`, namedNode(`${xsd}nonNegativeInteger`)),
      namedNode(rico)
    ),
    quad(
      blankNodes[105],
      namedNode(`${owl}onClass`),
      namedNode(`${rico}Instantiation`),
      namedNode(rico)
    ),
    quad(
      blankNodes[105],
      namedNode(`${owl}onProperty`),
      namedNode(`${rico}migrationRelationHasTarget`),
      namedNode(rico)
    ),

  ]
}

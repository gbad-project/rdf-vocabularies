/* This file was automatically generated. Do not edit by hand. */

const {
  geo,
  rdf,
  rdfs,
  owl,
  ns5,
  ns6,
  skos,
  ns8,
  ns9,
  ns10,
  ns11,
  ns12,
  xsd,
  ns14,
  ns15,
  ns16,
  ns17,
  ns18,
  ns19,
  ns20,
  dcterms,
  ns22,
  ns23,
  ns24
} = {
  'geo': 'http://www.opengis.net/ont/geosparql#',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'ns5': 'http://www.opengis.net/spec/geosparql/1.0/req/core/',
  'ns6': 'http://www.opengis.net/spec/geosparql/1.1/req/core/',
  'skos': 'http://www.w3.org/2004/02/skos/core#',
  'ns8': 'http://www.opengis.net/spec/geosparql/1.1/specification.html#',
  'ns9': 'http://www.opengis.net/spec/geosparql/1.0/req/geometry-extension/',
  'ns10': 'http://www.opengis.net/spec/geosparql/1.1/req/geometry-extension/',
  'ns11': 'https://tools.ietf.org/html/',
  'ns12': 'https://www.ogc.org/standards/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'ns14': 'http://www.opengis.net/doc/AS/dggs/',
  'ns15': 'http://dbpedia.org/resource/',
  'ns16': 'https://portal.ogc.org/files/',
  'ns17': 'http://www.opengis.net/spec/geosparql/1.0/req/topology-vocab-extension/',
  'ns18': 'http://www.opengis.net/spec/geosparql/1.1/req/topology-vocab-extension/',
  'ns19': 'https://www.ogc.org/standards/kml/',
  'ns20': 'http://www.opengis.net/ont/',
  'dcterms': 'http://purl.org/dc/terms/',
  'ns22': 'http://www.opengis.net/ont/geosparql/',
  'ns23': 'http://www.opengis.net/doc/IS/geosparql/',
  'ns24': 'https://schema.org/'
}

export default ({ blankNode, literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  const blankNodes: import('rdf-js').BlankNode[] = []
  for (let i = 0; i < 12; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns5}feature-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns6}feature-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${owl}disjointWith`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}definition`),
      literal(`A discrete spatial phenomenon in a universe of discourse.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.5`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.7`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.8`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.9`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}note`),
      literal(`A Feature represents a uniquely identifiable phenomenon, for example a river or an apple. While such phenomena (and therefore the Features used to represent them) are bounded, their boundaries may be crisp (e.g., the declared boundaries of a state), vague (e.g., the delineation of a valley versus its neighboring mountains), and change with time (e.g., a storm front). While discrete in nature, Features may be created from continuous observations, such as an isochrone that determines the region that can be reached by ambulance within 5 minutes.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Feature`),
      namedNode(`${skos}prefLabel`),
      literal(`Feature`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns6}feature-collection-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[0],
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${skos}definition`),
      literal(`A collection of individual Features.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}FeatureCollection`),
      namedNode(`${skos}prefLabel`),
      literal(`Feature Collection`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}definition`),
      literal(`A coherent set of direct positions in space. The positions are held within a Spatial Reference System (SRS).`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.5`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.8`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}note`),
      literal(`Geometry can be used as a representation of the shape, extent or location of a Feature and may exist as a self-contained entity.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}Geometry`),
      namedNode(`${skos}prefLabel`),
      literal(`Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns6}geometry-collection-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[1],
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${skos}definition`),
      literal(`A collection of individual Geometries.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.7`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}GeometryCollection`),
      namedNode(`${skos}prefLabel`),
      literal(`Geometry Collection`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns5}spatial-object-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns6}spatial-object-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${skos}definition`),
      literal(`Anything spatial (being or having a shape, position or an extent).`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.1.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.1.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${skos}note`),
      literal(`Subclasses of this class are expected to be used for instance data.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObject`),
      namedNode(`${skos}prefLabel`),
      literal(`Spatial Object`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns6}spatial-object-collection-class`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${rdfs}Container`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${rdfs}subClassOf`),
      blankNodes[2],
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${skos}definition`),
      literal(`A collection of individual Spatial Objects.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${skos}note`),
      literal(`This is the superclass of Feature Collection and Geometry Collection.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}SpatialObjectCollection`),
      namedNode(`${skos}prefLabel`),
      literal(`Spatial Object Collection`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-as-dggs-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}dggsLiteral`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSerialization`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${skos}definition`),
      literal(`The Discrete Global Grid System (DGGS) serialization of a Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asDGGS`),
      namedNode(`${skos}prefLabel`),
      literal(`as DGGS`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-as-gml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-as-gml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}gmlLiteral`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSerialization`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${skos}definition`),
      literal(`The GML serialization of a Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGML`),
      namedNode(`${skos}prefLabel`),
      literal(`as GML`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-as-geojson-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns11}rfc7946`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSerialization`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${skos}definition`),
      literal(`The GeoJSON serialization of a Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asGeoJSON`),
      namedNode(`${skos}prefLabel`),
      literal(`as GeoJSON`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-as-kml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}kmlLiteral`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns12}kml`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSerialization`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${skos}definition`),
      literal(`The KML serialization of a Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asKML`),
      namedNode(`${skos}prefLabel`),
      literal(`as KML`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-as-wkt-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-as-wkt-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}wktLiteral`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSerialization`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}definition`),
      literal(`The WKT serialization of a Geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.5`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.8`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.2.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.2.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}asWKT`),
      namedNode(`${skos}prefLabel`),
      literal(`as WKT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${skos}definition`),
      literal(`The number of measurements or axes needed to describe the position of this Geometry in a coordinate system.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}coordinateDimension`),
      namedNode(`${skos}prefLabel`),
      literal(`coordinate dimension`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${skos}definition`),
      literal(`The default Geometry to be used in spatial calculations. It is usually the most detailed Geometry.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.2.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${skos}note`),
      literal(`Duplicate properties defaultGeometry and hasDefaultGeometry exist because of an inconsistency between ontology and documentation in GeoSPARQL 1.0. Only hasDefaultGeometry is described in the documention.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}defaultGeometry`),
      namedNode(`${skos}prefLabel`),
      literal(`default geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Datatype`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}dggs-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns14}2.0`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${skos}definition`),
      literal(`A textual serialization of a Discrete Global Grid (DGGS) Geometry object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${skos}example`),
      literal(` "<https://w3id.org/dggs/auspix> OrdinateList (R3234)"^^<http://www.opengis.net/ont/geosparql#dggsLiteral>`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${skos}prefLabel`),
      literal(`DGGS Literal`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dggsLiteral`),
      namedNode(`${skos}scopeNote`),
      literal(`This datatype is not expected to be used directly but to serve as an abstract datatype for a series of specific DGGS literal types, for specific DGGS implementations`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${skos}definition`),
      literal(`The topological dimension of this geometric object, which must be less than or equal to the coordinate dimension. In non-homogeneous collections, this will return the largest topological dimension of the contained objects.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}dimension`),
      namedNode(`${skos}prefLabel`),
      literal(`dimension`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially contains the object SpatialObject. DE-9IM: T*TFF*FF*`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehContains`),
      namedNode(`${skos}prefLabel`),
      literal(`contains`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially covered by the object SpatialObject. DE-9IM: TFF*TFT**`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCoveredBy`),
      namedNode(`${skos}prefLabel`),
      literal(`covered by`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially covers the object SpatialObject. DE-9IM: T*TFT*FF*`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehCovers`),
      namedNode(`${skos}prefLabel`),
      literal(`covers`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}sfDisjoint`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially disjoint from the object SpatialObject. DE-9IM: FF*FF****`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehDisjoint`),
      namedNode(`${skos}prefLabel`),
      literal(`disjoint`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}sfEquals`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially equals the object SpatialObject. DE-9IM: TFFFTFFFT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehEquals`),
      namedNode(`${skos}prefLabel`),
      literal(`equals`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially inside the object SpatialObject. DE-9IM: TFF*FFT**`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehInside`),
      namedNode(`${skos}prefLabel`),
      literal(`inside`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}sfTouches`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially meets the object SpatialObject. DE-9IM: FT******* ^ F**T***** ^ F***T****`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehMeet`),
      namedNode(`${skos}prefLabel`),
      literal(`meet`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}eh-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially overlaps the object SpatialObject. DE-9IM: T*T***T**`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}ehOverlap`),
      namedNode(`${skos}prefLabel`),
      literal(`overlap`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Datatype`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geojson-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns11}rfc7946`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${skos}definition`),
      literal(`A GeoJSON serialization of a Geometry object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}geoJSONLiteral`),
      namedNode(`${skos}prefLabel`),
      literal(`GeoJSON Literal`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Datatype`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}gml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}gml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns16}?artifact_id=20509`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${skos}definition`),
      literal(`A GML serialization of a Geometry object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}gmlLiteral`),
      namedNode(`${skos}prefLabel`),
      literal(`GML Literal`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${skos}definition`),
      literal(`The area of a Spatial Object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasArea`),
      namedNode(`${skos}prefLabel`),
      literal(`has area`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${skos}definition`),
      literal(`The minimum or smallest bounding or enclosing box of a given Feature.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${skos}prefLabel`),
      literal(`has bounding box`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasBoundingBox`),
      namedNode(`${skos}scopeNote`),
      literal(`The target is a Geometry that defines a rectilinear region whose edges are aligned with the axes of the coordinate reference system, which exactly contains the Feature, for example an instance of http://www.opengis.net/ont/sf#envelope.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${skos}definition`),
      literal(`The arithmetic mean position of all the Geometry points of a given Feature.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${skos}prefLabel`),
      literal(`has centroid`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasCentroid`),
      namedNode(`${skos}scopeNote`),
      literal(`The target Geometry shall describe a point, for example an instance of http://www.opengis.net/ont/sf#Point.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}defaultGeometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${skos}definition`),
      literal(`The default Geometry to be used in spatial calculations. It is usually the most detailed Geometry.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${skos}note`),
      literal(`Duplicate properties defaultGeometry and hasDefaultGeometry exist because of an inconsistency between ontology and documentation in GeoSPARQL 1.0. Only hasDefaultGeometry is described in the documention.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasDefaultGeometry`),
      namedNode(`${skos}prefLabel`),
      literal(`has default geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}definition`),
      literal(`A spatial representation for a given Feature.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.5`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.8`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasGeometry`),
      namedNode(`${skos}prefLabel`),
      literal(`has geometry`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${skos}definition`),
      literal(`The length of a Spatial Object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.7`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasLength`),
      namedNode(`${skos}prefLabel`),
      literal(`has length`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasMetricSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}definition`),
      literal(`The area of a Spatial Object in square meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.9`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.3.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricArea`),
      namedNode(`${skos}prefLabel`),
      literal(`has area in square meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasMetricSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${skos}definition`),
      literal(`The length of a Spatial Object in meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricLength`),
      namedNode(`${skos}prefLabel`),
      literal(`has length in meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasMetricSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${skos}definition`),
      literal(`The length of the perimeter of a Spatial Object in meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.1.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricPerimeterLength`),
      namedNode(`${skos}prefLabel`),
      literal(`has perimeter length in meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${skos}definition`),
      literal(`Subproperties of this property are used to indicate the size of a Spatial Object, as a measurement or estimate of one or more dimensions of the Spatial Object's spatial presence. Units are always metric (meter, square meter or cubic meter).`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSize`),
      namedNode(`${skos}prefLabel`),
      literal(`has metric size`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${skos}definition`),
      literal(`The positional accuracy of the coordinates of a Geometry in meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${skos}note`),
      literal(`Spatial accuracy is applicable when a Geometry is used to represent a Feature. It is expressed as a distance that indicates the truthfullness of the positions (coordinates) that define the Geometry. In this case accuracy defines a zone surrounding each coordinate within wich the real positions are known to be. The accuracy value defines this zone as a distance from the coordinate(s) in all directions (e.g. a line, a circle or a sphere, depending on spatial dimension).`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialAccuracy`),
      namedNode(`${skos}prefLabel`),
      literal(`has spatial accuracy in meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${skos}definition`),
      literal(`The spatial resolution of a Geometry in meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.6`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${skos}note`),
      literal(`Spatial resolution specifies the level of detail of a Geometry. It the smallest dinstinguishable distance between spatially adjacent coordinates.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricSpatialResolution`),
      namedNode(`${skos}prefLabel`),
      literal(`has spatial resolution in meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}double`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasMetricSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${skos}definition`),
      literal(`The volume of a Spatial Object in cubic meters.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.2.9`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasMetricVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`has volume in cubic meters`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${skos}definition`),
      literal(`The length of the perimeter of a Spatial Object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.1.1.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasPerimeterLength`),
      namedNode(`${skos}prefLabel`),
      literal(`has perimeter length`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${skos}definition`),
      literal(`Connects a Geometry object with its text-based serialization.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSerialization`),
      namedNode(`${skos}prefLabel`),
      literal(`has serialization`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${skos}definition`),
      literal(`Subproperties of this property are used to indicate the size of a Spatial Object as a measurement or estimate of one or more dimensions of the Spatial Object's spatial presence.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${skos}note`),
      literal(`The recommended way to specify size is by using a subproperty of hasMetricSize. Subproperties of hasSize can be used if more complex expressions are necessary, for example if the unit of length can not be converted to meter, or if additional data are needed to describe the measurement or estimate.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSize`),
      namedNode(`${skos}prefLabel`),
      literal(`has size`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${skos}definition`),
      literal(`The positional accuracy of the coordinates of a Geometry.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${skos}note`),
      literal(`Spatial accuracy is applicable when a Geometry is used to represent a Feature. It is expressed as a distance that indicates the truthfullness of the positions (coordinates) that define the Geometry. In this case accuracy defines a zone surrounding each coordinate within wich the real positions are known to be. The accuracy value defines this zone as a distance from the coordinate(s) in all directions (e.g. a line, a circle or a sphere, depending on spatial dimension).`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialAccuracy`),
      namedNode(`${skos}prefLabel`),
      literal(`has spatial accuracy`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}feature-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${skos}definition`),
      literal(`The spatial resolution of a Geometry.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${skos}note`),
      literal(`Spatial resolution specifies the level of detail of a Geometry. It the smallest distinguishable distance between spatially adjacent coordinates.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasSpatialResolution`),
      namedNode(`${skos}prefLabel`),
      literal(`has spatial resolution`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}spatial-object-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${geo}hasSize`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${skos}definition`),
      literal(`The volume of a three-dimensional Spatial Object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}hasVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`has volume`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}boolean`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${skos}definition`),
      literal(`(true) if this geometric object is the empty Geometry. If true, then this geometric object represents the empty point set for the coordinate space.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isEmpty`),
      namedNode(`${skos}prefLabel`),
      literal(`is empty`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}boolean`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns16}?artifact_id=25355`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${skos}definition`),
      literal(`(true) if this geometric object has no anomalous geometric points, such as self intersection or self tangency.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}isSimple`),
      namedNode(`${skos}prefLabel`),
      literal(`is simple`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Datatype`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}kml-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(ns19),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${skos}definition`),
      literal(`A KML serialization of a Geometry object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.4`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}kmlLiteral`),
      namedNode(`${skos}prefLabel`),
      literal(`KML Literal`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially disjoint from the object SpatialObject. DE-9IM: FFTFFTTTT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8dc`),
      namedNode(`${skos}prefLabel`),
      literal(`disconnected`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially meets the object SpatialObject. DE-9IM: FFTFTTTTT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ec`),
      namedNode(`${skos}prefLabel`),
      literal(`externally connected`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially equals the object SpatialObject. DE-9IM: TFFFTFFFT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8eq`),
      namedNode(`${skos}prefLabel`),
      literal(`equals`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially inside the object SpatialObject. DE-9IM: TFFTFFTTT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntpp`),
      namedNode(`${skos}prefLabel`),
      literal(`non-tangential proper part`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially contains the object SpatialObject. DE-9IM: TTTFFTFFT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8ntppi`),
      namedNode(`${skos}prefLabel`),
      literal(`non-tangential proper part inverse`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially overlaps the object SpatialObject. DE-9IM: TTTTTTTTT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8po`),
      namedNode(`${skos}prefLabel`),
      literal(`partially overlapping`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially covered by the object SpatialObject. DE-9IM: TFFTTFTTT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tpp`),
      namedNode(`${skos}prefLabel`),
      literal(`tangential proper part`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially covers the object SpatialObject. DE-9IM: TTTFTTFFT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}rcc8tppi`),
      namedNode(`${skos}prefLabel`),
      literal(`tangential proper part inverse`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}rcc8-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially contains the object SpatialObject. DE-9IM: T*****FF*`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfContains`),
      namedNode(`${skos}prefLabel`),
      literal(`contains`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially crosses the object SpatialObject. DE-9IM: T*T******`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfCrosses`),
      namedNode(`${skos}prefLabel`),
      literal(`crosses`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}ehDisjoint`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially disjoint from the object SpatialObject. DE-9IM: FF*FF****`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfDisjoint`),
      namedNode(`${skos}prefLabel`),
      literal(`disjoint`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}ehEquals`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially equals the object SpatialObject. DE-9IM: TFFFTFFFT`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfEquals`),
      namedNode(`${skos}prefLabel`),
      literal(`equals`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is not spatially disjoint from the object SpatialObject. DE-9IM: T******** ^ *T******* ^ ***T***** ^ ****T****`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfIntersects`),
      namedNode(`${skos}prefLabel`),
      literal(`intersects`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially overlaps the object SpatialObject. DE-9IM: T*T***T**`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfOverlaps`),
      namedNode(`${skos}prefLabel`),
      literal(`overlaps`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${owl}equivalentProperty`),
      namedNode(`${geo}ehMeet`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject spatially touches the object SpatialObject. DE-9IM: FT******* ^ F**T***** ^ F***T****`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfTouches`),
      namedNode(`${skos}prefLabel`),
      literal(`touches`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}ObjectProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns17}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}sf-spatial-relations`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}range`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns15}DE-9IM`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${skos}definition`),
      literal(`States that the subject SpatialObject is spatially within the object SpatialObject. DE-9IM: T*F**F***`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}sfWithin`),
      namedNode(`${skos}prefLabel`),
      literal(`within`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}DatatypeProperty`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdfs}domain`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}geometry-properties`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${skos}definition`),
      literal(`The number of measurements or axes needed to describe the spatial position of this Geometry in a coordinate system.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.1.2.3`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}spatialDimension`),
      namedNode(`${skos}prefLabel`),
      literal(`spatial dimension`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Datatype`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(geo),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns9}wkt-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns10}wkt-literal`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns16}?artifact_id=25355`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${skos}definition`),
      literal(`A Well-known Text serialization of a Geometry object.`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${skos}example`),
      namedNode(`${ns8}B.2.2.2`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${geo}wktLiteral`),
      namedNode(`${skos}prefLabel`),
      literal(`Well-known Text Literal`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[3],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[4],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[5],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[6],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[7],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[8],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[9],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}contributor`),
      blankNodes[10],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}created`),
      literal(`2020-09-09`, namedNode(`${xsd}date`)),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}creator`),
      literal(`OGC GeoSPARQL Standards Working Group`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}description`),
      literal(`An RDF/OWL vocabulary for representing spatial information`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}license`),
      literal(`https://www.ogc.org/license`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}modified`),
      literal(`2021-10-27`, namedNode(`${xsd}date`)),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}publisher`),
      blankNodes[11],
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}replaces`),
      namedNode(`${ns22}1.0`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}rights`),
      literal(`(c) 2021 Open Geospatial Consortium`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}source`),
      literal(`OGC GeoSPARQL - A Geographic Query Language for RDF Data OGC 11-052r5`, 'en'),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns23}1.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${dcterms}title`),
      literal(`GeoSPARQL Ontology`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns23}1.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${owl}versionIRI`),
      namedNode(`${ns22}1.1`),
      namedNode(geo)
    ),
    quad(
      namedNode(`${ns20}geosparql`),
      namedNode(`${owl}versionInfo`),
      literal(`OGC GeoSPARQL 1.1`),
      namedNode(geo)
    ),
    quad(
      blankNodes[2],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(geo)
    ),
    quad(
      blankNodes[2],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${geo}SpatialObject`),
      namedNode(geo)
    ),
    quad(
      blankNodes[2],
      namedNode(`${owl}onProperty`),
      namedNode(`${rdfs}member`),
      namedNode(geo)
    ),
    quad(
      blankNodes[3],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[3],
      namedNode(`${ns24}affiliation`),
      literal(`CSIRO Australia`),
      namedNode(geo)
    ),
    quad(
      blankNodes[3],
      namedNode(`${ns24}email`),
      literal(`simon.cox@csiro.au`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[3],
      namedNode(`${ns24}name`),
      literal(`Simon J D Cox`),
      namedNode(geo)
    ),
    quad(
      blankNodes[3],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0002-3884-3420`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[4],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[4],
      namedNode(`${ns24}affiliation`),
      literal(`Oracle Corporation`),
      namedNode(geo)
    ),
    quad(
      blankNodes[4],
      namedNode(`${ns24}email`),
      literal(`matthew.perry@oracle.com`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[4],
      namedNode(`${ns24}name`),
      literal(`Matthew Perry`),
      namedNode(geo)
    ),
    quad(
      blankNodes[4],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0003-1988-462X`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[5],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[5],
      namedNode(`${ns24}affiliation`),
      literal(`Geoscape Australia`),
      namedNode(geo)
    ),
    quad(
      blankNodes[5],
      namedNode(`${ns24}email`),
      literal(`joseph.abhayaratna@geoscape.com.au`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[5],
      namedNode(`${ns24}name`),
      literal(`Joseph Abhayaratna`),
      namedNode(geo)
    ),
    quad(
      blankNodes[5],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0001-5075-6234`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${ns24}affiliation`),
      literal(`Australian National University`),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${ns24}affiliation`),
      literal(`SURROUND Australia Pty Ltd`),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${ns24}email`),
      literal(`nicholas.car@surroundaustralia.com`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${ns24}name`),
      literal(`Nicholas J. Car`),
      namedNode(geo)
    ),
    quad(
      blankNodes[6],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0002-8742-7730`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[7],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[7],
      namedNode(`${ns24}affiliation`),
      literal(`Mainz University Of Applied Sciences`),
      namedNode(geo)
    ),
    quad(
      blankNodes[7],
      namedNode(`${ns24}email`),
      literal(`timo.homburg@hs-mainz.de`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[7],
      namedNode(`${ns24}name`),
      literal(`Timo Homburg`),
      namedNode(geo)
    ),
    quad(
      blankNodes[7],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0002-9499-5840`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[8],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[8],
      namedNode(`${ns24}affiliation`),
      literal(`Oracle Corporation`),
      namedNode(geo)
    ),
    quad(
      blankNodes[8],
      namedNode(`${ns24}email`),
      literal(`john.herring@oracle.com`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[8],
      namedNode(`${ns24}name`),
      literal(`John Herring`),
      namedNode(geo)
    ),
    quad(
      blankNodes[0],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(geo)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${geo}Feature`),
      namedNode(geo)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}onProperty`),
      namedNode(`${rdfs}member`),
      namedNode(geo)
    ),
    quad(
      blankNodes[1],
      namedNode(`${rdf}type`),
      namedNode(`${owl}Restriction`),
      namedNode(geo)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}allValuesFrom`),
      namedNode(`${geo}Geometry`),
      namedNode(geo)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}onProperty`),
      namedNode(`${rdfs}member`),
      namedNode(geo)
    ),
    quad(
      blankNodes[9],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[9],
      namedNode(`${ns24}email`),
      literal(`fjknibbe@gmail.com`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[9],
      namedNode(`${ns24}name`),
      literal(`Frans Knibbe`),
      namedNode(geo)
    ),
    quad(
      blankNodes[9],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0003-3789-2260`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[11],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Organization`),
      namedNode(geo)
    ),
    quad(
      blankNodes[11],
      namedNode(`${ns24}name`),
      literal(`Open Geospatial Consortium`),
      namedNode(geo)
    ),
    quad(
      blankNodes[11],
      namedNode(`${ns24}url`),
      literal(`https://www.ogc.org`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${rdf}type`),
      namedNode(`${ns24}Person`),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${ns24}affiliation`),
      literal(`KU Leuven`),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${ns24}affiliation`),
      literal(`Neanex Technologies`),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${ns24}email`),
      literal(`mathias.bonduel@neanex.com`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${ns24}name`),
      literal(`Mathias Bonduel`),
      namedNode(geo)
    ),
    quad(
      blankNodes[10],
      namedNode(`${ns24}url`),
      literal(`https://orcid.org/0000-0002-3313-924X`, namedNode(`${xsd}anyURI`)),
      namedNode(geo)
    ),

  ]
}

/* This file was automatically generated. Do not edit by hand. */

const {
  ns1,
  rdfs,
  ns3,
  quantitykind,
  dcterms,
  qudt,
  unit,
  qkdv,
  xsd,
  rdf,
  skos,
  vaem,
  owl,
  ns14,
  prov,
  ns16,
  constant,
  ns18,
  ns19,
  ns20,
  ns21,
  ns22,
  dc11,
  ns24
} = {
  'ns1': 'http://qudt.org/2.1/vocab/',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns3': 'http://qudt.org/vocab/',
  'quantitykind': 'http://qudt.org/vocab/quantitykind/',
  'dcterms': 'http://purl.org/dc/terms/',
  'qudt': 'http://qudt.org/schema/qudt/',
  'unit': 'http://qudt.org/vocab/unit/',
  'qkdv': 'http://qudt.org/vocab/dimensionvector/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'skos': 'http://www.w3.org/2004/02/skos/core#',
  'vaem': 'http://www.linkedmodel.org/schema/vaem#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'ns14': 'http://dbpedia.org/resource/',
  'prov': 'http://www.w3.org/ns/prov#',
  'ns16': 'http://qudt.org/2.1/vocab/quantitykind/',
  'constant': 'http://qudt.org/vocab/constant/',
  'ns18': 'https://data.agrimetrics.co.uk/ontologies/',
  'ns19': 'https://www.gigahertz-optik.com/en-us/service-and-support/knowledge-base/measurement-of-par/#',
  'ns20': 'https://www.dormgrow.com/',
  'ns21': 'http://qudt.org/2.1/schema/facade/',
  'ns22': 'http://voag.linkedmodel.org/schema/voag#',
  'dc11': 'http://purl.org/dc/elements/1.1/',
  'ns24': 'http://voag.linkedmodel.org/voag/'
}

export default ({ literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  return [
    quad(
      namedNode(`${ns1}quantitykind`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${dcterms}description`),
      literal(`The "Absolute Activity" is the exponential of the ratio of the chemical potential to \\(RT\\) where \\(R\\) is the gas constant and \\(T\\) the thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-SEC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/A00019.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\lambda_B = e^{\\frac{\\mu_B}{RT}}\\), where \\(\\mu_B\\) is the chemical potential of substance \\(B\\), \\(R\\) is the molar gas constant, and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${rdfs}label`),
      literal(`Absolute Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteActivity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${dcterms}description`),
      literal(`"Absolute Humidity" is an amount of water vapor, usually discussed per unit volume. Absolute humidity in air ranges from zero to roughly 30 grams per cubic meter when the air is saturated at \\(30 ^\\circ C\\). The absolute humidity changes as air temperature or pressure changes. This is very inconvenient for chemical engineering calculations, e.g. for clothes dryers, where temperature can vary considerably. As a result, absolute humidity is generally defined in chemical engineering as mass of water vapor per unit mass of dry air, also known as the mass mixing ratio, which is much more rigorous for heat and mass balance calculations. Mass of water per unit volume as in the equation above would then be defined as volumetric humidity. Because of the potential confusion.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Humidity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Humidity#Absolute_humidity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(AH = \\frac{\\mathcal{M}_\\omega}{\\vee_{net}}\\),
where \\(\\mathcal{M}_\\omega\\) is the mass of water vapor per unit volume of total air and \\(\\vee_{net}\\) is water vapor mixture.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${qudt}symbol`),
      literal(`AH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${rdfs}label`),
      literal(`Absolute Humidity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${dcterms}description`),
      literal(`"Absorbed Dose" (also known as Total Ionizing Dose, TID) is a measure of the energy deposited in a medium by ionizing radiation. It is equal to the energy deposited per unit mass of medium, and so has the unit \\(J/kg\\), which is given the special name Gray (\\(Gy\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGRAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGRAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Absorbed_dose`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Absorbed_dose`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(D = \\frac{d\\bar{\\varepsilon}}{dm}\\), where \\(d\\bar{\\varepsilon}\\) is the mean energy imparted by ionizing radiation to an element of irradiated matter with the mass \\(dm\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${rdfs}comment`),
      literal(`Note that the absorbed dose is not a good indicator of the likely biological effect. 1 Gy of alpha radiation would be much more biologically damaging than 1 Gy of photon radiation for example. Appropriate weighting factors can be applied reflecting the different relative biological effects to find the equivalent dose. The risk of stoctic effects due to radiation exposure can be quantified using the effective dose, which is a weighted average of the equivalent dose to each organ depending upon its radiosensitivity. When ionising radiation is used to treat cancer, the doctor will usually prescribe the radiotherapy treatment in Gy. When risk from ionising radiation is being discussed, a related unit, the Sievert is used.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${rdfs}label`),
      literal(`Absorbed Dose`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDose`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-GM-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/absorbed-dose-rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\dot{D} = \\frac{dD}{dt}\\), where \\(dD\\) is the increment of absorbed dose during time interval with duration \\(dt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\dot{D}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Absorbed Dose Rate" is the absorbed dose of ionizing radiation imparted at a given location per unit of time (second, minute, hour, or day).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AbsorbedDoseRate`),
      namedNode(`${rdfs}label`),
      literal(`Absorbed Dose Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Absorbance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Absorptance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.researchgate.net/post/Absorptance_or_absorbance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha = \\frac{\\Phi_a}{\\Phi_m}\\), where \\(\\Phi_a\\) is the absorbed radiant flux or the absorbed luminous flux, and \\(\\Phi_m\\) is the radiant flux or luminous flux of the incident radiation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Absorptance is the ratio of the radiation absorbed by a surface to that incident upon it. Also known as absorbance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Absorptance`),
      namedNode(`${rdfs}label`),
      literal(`Absorptance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${dcterms}description`),
      literal(`Acceleration is the (instantaneous) rate of change of velocity. Acceleration may be either linear acceleration, or angular acceleration. It is a vector quantity with dimension \\(length/time^{2}\\) for linear acceleration, or in the case of angular acceleration, with dimension \\(angle/time^{2}\\). In SI units, linear acceleration is measured in \\(meters/second^{2}\\) (\\(m \\cdot s^{-2}\\)) and angular acceleration is measured in \\(radians/second^{2}\\). In physics, any increase or decrease in speed is referred to as acceleration and similarly, motion in a circle at constant speed is also an acceleration, since the direction component of the velocity is changing.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GALILEO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Acceleration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acceleration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${rdfs}label`),
      literal(`Acceleration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acceleration`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GALILEO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The acceleration of freely falling bodies under the influence of terrestrial gravity, equal to approximately 9.81 meters (32 feet) per second per second.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${rdfs}label`),
      literal(`Acceleration Of Gravity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AccelerationOfGravity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Acceptor Density" is the number per volume of acceptor levels.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${rdfs}label`),
      literal(`Acceptor Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${dcterms}description`),
      literal(`"Acceptor Ionization Energy" is the ionization energy of an acceptor.`, namedNode(`${rdf}HTML`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionization_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Acceptor Ionization Energy" is the ionization energy of an acceptor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Acceptor Ionization Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Acid`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/PH`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Chemicals or substances having a pH less than 7 are said to be acidic; lower pH means higher acidity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${rdfs}label`),
      literal(`Acidity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Acidity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acoustic_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z_a= \\frac{p}{q} = \\frac{p}{vS}\\), where \\(p\\) is the sound pressure, \\(q\\) is the sound volume velocity, \\(v\\) is sound particle velocity, and \\(S\\) is the surface area through which an acoustic wave of frequence \\(f\\) propagates.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Acoustic Impediance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Action_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S = \\int Ldt\\), where \\(L\\) is the Lagrange function and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An action is usually an integral over time. But for action pertaining to fields, it may be integrated over spatial variables as well. In some cases, the action is integrated along the path followed by the physical system.  If the action is represented as an integral over time, taken a the path of the system between the initial time and the final time of the development of the system.
The evolution of a physical system between two states is determined by requiring the action be minimized or, more generally, be stationary for small perturbations about the true evolution. This requirement leads to differential equations that describe the true evolution. Conversely, an action principle is a method for reformulating differential equations of motion for a physical system as an equivalent integral equation. Although several variants have been defined (see below), the most commonly used action principle is Hamilton's principle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Action`),
      namedNode(`${rdfs}label`),
      literal(`Action`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${rdfs}comment`),
      literal(`Action Time (sec) `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActionTime`),
      namedNode(`${rdfs}label`),
      literal(`Action Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}abbreviation`),
      literal(`active-energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=601-01-19`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(W = \\int_{t_1}^{t_2} p dt\\), where \\(p\\) is instantaneous power and the integral interval is the time interval from \\(t_1\\) to \\(t_2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Active Energy" is the electrical energy transformable into some other form of energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Active Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActiveEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${dcterms}description`),
      literal(`\\(Active Power\\) is, under periodic conditions, the mean value, taken over one period \\(T\\), of the instantaneous power \\(p\\). In complex notation, \\(P = \\mathbf{Re} \\; \\underline{S}\\), where \\(\\underline{S}\\) is \\(\\textit{complex power}\\)".`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-42`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(P = \\frac{1}{T}\\int_{0}^{T} pdt\\), where \\(T\\) is the period and \\(p\\) is instantaneous power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdfs}label`),
      literal(`Active Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivePower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${dcterms}description`),
      literal(`"Activity" is the number of decays per unit time of a radioactive sample, the term used to characterise the number of nuclei which disintegrate in a radioactive substance per unit time. Activity is usually measured in Becquerels (\\(Bq\\)), where 1 \\(Bq\\) is 1 disintegration per second, in honor of the scientist Henri Becquerel.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Ci`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBQ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBQ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBQ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBQ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroCi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliCi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Radioactive_decay`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radioactive_decay`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radioactive_decay#Radioactive_decay_rates`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A = Z + N\\), where \\(Z\\) is the atomic number and \\(N\\) is the neutron number.

Variation \\(dN\\) of spontaneous number of nuclei \\(N\\) in a particular energy state, in a sample of radionuclide, due to spontaneous nuclear transitions from this state during an infinitesimal time interval, divided by its duration \\(dt\\), thus \\(A = -\\frac{dN}{dt}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${rdfs}label`),
      literal(`Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Activity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Activity_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(f_B = \\frac{\\lambda_B}{(\\lambda_B^*x_B)}\\), where \\(\\lambda_B\\) the absolute activity of substance \\(B\\), \\(\\lambda_B^*\\) is the absolute activity of the pure substance \\(B\\) at the same temperature and pressure, and \\(x_B\\) is the amount-of-substance fraction of substance \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An "Activity Coefficient" is a factor used in thermodynamics to account for deviations from ideal behaviour in a mixture of chemical substances. In an ideal mixture, the interactions between each pair of chemical species are the same (or more formally, the enthalpy change of solution is zero) and, as a result, properties of the mixtures can be expressed directly in terms of simple concentrations or partial pressures of the substances present e.g. Raoult's law. Deviations from ideality are accommodated by modifying the concentration by an activity coefficient. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`f_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Activity Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBQ-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBQ-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoBQ-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.euronuclear.org/info/encyclopedia/activityconcentration.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(c_A = \\frac{A}{V}\\), where \\(A\\) is the activity of a sample and \\(V\\) is its volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Activity Concentration", also known as volume activity, and activity density, is .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${qudt}symbol`),
      literal(`c_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityConcentration`),
      namedNode(`${rdfs}label`),
      literal(`Activity Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_t}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Activity Thresholds" are thresholds of sensitivity for radioactivity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ActivityThresholds`),
      namedNode(`${rdfs}label`),
      literal(`Activity Thresholds`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Neural_adaptation#Visual`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Adaptation" is the recovery of visual ability following exposure to light (dark adaptation).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Adaptation`),
      namedNode(`${rdfs}label`),
      literal(`Adaptation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${dcterms}description`),
      literal(`"Admittance" is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of the impedance (\\(Z\\)). `, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Admittance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-51`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Y = \\frac{1}{Z}\\), where \\(Z\\) is impedance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(Y\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${rdfs}label`),
      literal(`Admittance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Admittance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${dcterms}description`),
      literal(`The "Alpha Disintegration Energy" is the sum of the kinetic energy of the \\(\\alpha\\)-particle produced in the disintegration process and the recoil energy of the product atom in the reference frame in which the emitting nucleus is at rest before its disintegration.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(Q_a\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Alpha Disintegration Energy" is the sum of the kinetic energy of the alpha-particle produced in the disintegration process and the recoil energy of the product atom in the reference frame in which the emitting nucleus is at rest before its disintegration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Alpha Disintegration Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AlphaDisintegrationEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Altitude`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Altitude or height is defined based on the context in which it is used (aviation, geometry, geographical survey, sport, and more). As a general definition, altitude is a distance measurement, usually in the vertical or "up" direction, between a reference datum and a point or object. The reference datum also often varies according to the context. [Wikipedia]`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${rdfs}label`),
      literal(`Altitude`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Altitude`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${dcterms}description`),
      literal(`The ambient pressure on an object is the pressure of the surrounding medium, such as a gas or liquid, which comes into contact with the object.
The SI unit of pressure is the pascal (Pa), which is a very small unit relative to atmospheric pressure on Earth, so kilopascals (\\(kPa\\)) are more commonly used in this context. `, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${qudt}symbol`),
      literal(`p_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${rdfs}label`),
      literal(`Ambient Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmbientPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${dcterms}description`),
      literal(`"Amount of Substance" is a standards-defined quantity that measures the size of an ensemble of elementary entities, such as atoms, molecules, electrons, and other particles. It is sometimes referred to as chemical amount. The International System of Units (SI) defines the amount of substance to be proportional to the number of elementary entities present. The SI unit for amount of substance is \\(mole\\). It has the unit symbol \\(mol\\). The mole is defined as the amount of substance that contains an equal number of elementary entities as there are atoms in 0.012kg of the isotope carbon-12. This number is called Avogadro's number and has the value \\(6.02214179(30) \\times 10^{23}\\). The only other unit of amount of substance in current use is the \\(pound-mole\\) with the symbol \\(lb-mol\\), which is sometimes used in chemical engineering in the United States. One \\(pound-mole\\) is exactly \\(453.59237 mol\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Amount_of_substance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Amount_of_substance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Amount of Substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Amount_of_substance_concentration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C_B = \\frac{n_B}{V}\\), where \\(n_B\\) is the amount of substance \\(B\\) and \\(V\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Amount of Substance of Concentration of B" is defined as the amount of a constituent divided by the volume of the mixture.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${qudt}symbol`),
      literal(`C_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceConcentrationOfB`),
      namedNode(`${rdfs}label`),
      literal(`Amount of Substance of Concentration of B`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Amount_fraction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(x_B = \\frac{n_B}{n}\\), where \\(n_B\\) is the amount of substance \\(B\\) and \\(n\\) is the total amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Amount of Substance of Fraction of B" is defined as tthe amount of a constituent divided by the total amount of all constituents in a mixture.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${qudt}symbol`),
      literal(`X_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstanceFractionOfB`),
      namedNode(`${rdfs}label`),
      literal(`Amount of Substance of Fraction of B`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IU-PER-MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${vaem}todo`),
      literal(`fix the numerator and denominator dimensions`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(`${rdfs}label`),
      literal(`Amount of Substance per Unit Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-KiloGM-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L1I0M-2H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Variation of Molar Mass" of a gas as a function of pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMassPressure`),
      namedNode(`${rdfs}label`),
      literal(`Molar Mass variation due to Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.ask.com/answers/72367781/what-is-defined-as-the-amount-of-substance-per-unit-of-volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Molar_concentration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The amount of substance per unit volume is called the molar density. Molar density is an intensive property of a substance and depends on the temperature and pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${rdfs}label`),
      literal(`Amount of Substance per Unit Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Concentration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${dcterms}description`),
      literal(`The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${rdfs}label`),
      literal(`Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Angle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Angle of attack  is the angle between the oncoming air or relative wind and a reference line on the airplane or wing.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${rdfs}label`),
      literal(`Angle Of Attack`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfAttack`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Optical_rotation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Angle of Optical Rotation" is the angle through which plane-polarized light is rotated clockwise, as seen when facing the light source, in passing through an optically active medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${rdfs}label`),
      literal(`Angle of Optical Rotation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngleOfOpticalRotation`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${dcterms}description`),
      literal(`Angular acceleration is the rate of change of angular velocity over time. Measurement of the change made in the rate of change of an angle that a spinning object undergoes per unit time. It is a vector quantity.  Also called Rotational acceleration. In SI units, it is measured in radians per second squared (\\(rad/s^2\\)), and is usually denoted by the Greek letter alpha.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}baseCGSUnitDimensions`),
      literal(`U/T^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}baseSIUnitDimensions`),
      literal(`\\(/s^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angular_acceleration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${rdfs}label`),
      literal(`Angular Acceleration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularAcceleration`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${dcterms}description`),
      literal(`"Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone, divided by the solid angle \\(d\\Omega\\) of that cone.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = \\int \\sigma_\\Omega d\\Omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma_\\Omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Angular Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Angular distance travelled by orbiting vehicle measured from the azimuth of closest approach.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${rdfs}label`),
      literal(`Angular Distance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularDistance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${dcterms}description`),
      literal(`"Angular frequency", symbol \\(\\omega\\) (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angular_frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Angular_frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\omega = 2\\pi f\\), where \\(f\\) is frequency.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${rdfs}label`),
      literal(`Angular Frequency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${dcterms}description`),
      literal(`The Angular Impulse, also known as angular momentum, is the moment of linear momentum around a point. It is defined as\\(H = \\int Mdt\\), where \\(M\\) is the moment of force and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/AngularMomentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://emweb.unl.edu/NEGAHBAN/EM373/note13/note.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${qudt}symbol`),
      literal(`H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${rdfs}label`),
      literal(`Angular Impulse`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angular_momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Angular_momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L = I\\omega\\), where \\(I\\) is the moment of inertia, and \\(\\omega\\) is the angular velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Angular Momentum of an object rotating about some reference point is the measure of the extent to which the object will continue to rotate about that point unless acted upon by an external torque. In particular, if a point mass rotates about an axis, then the angular momentum with respect to a point on the axis is related to the mass of the object, the velocity and the distance of the mass to the axis. While the motion associated with linear momentum has no absolute frame of reference, the rotation associated with angular momentum is sometimes spoken of as being measured relative to the fixed stars.  \\textit{Angular Momentum}, \\textit{Moment of Momentum}, or \\textit{Rotational Momentum", is a vector quantity that represents the product of a body's rotational inertia and rotational velocity about a particular axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Angular Momentum`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}AngularImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularMomentumPerAngle`),
      namedNode(`${rdfs}label`),
      literal(`Angular Momentum per Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${dcterms}description`),
      literal(`"Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of \\(2\\pi\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.matter.org.uk/diffraction/geometry/lattice_vectors.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(`${rdfs}label`),
      literal(`Angular Reciprocal Lattice Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${dcterms}description`),
      literal(`Angular Velocity refers to how fast an object rotates or revolves relative to another point.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Angular_velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Angular_velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Angular Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Wavenumber`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(k = \\frac{2\\pi}{\\lambda}= \\frac{2\\pi\\upsilon}{\\upsilon_p}=\\frac{\\omega}{\\upsilon_p}\\), where \\(\\upsilon\\) is the frequency of the wave, \\(\\lambda\\) is the wavelength, \\(\\omega = 2\\pi \\upsilon\\) is the angular frequency of the wave, and \\(\\upsilon_p\\) is the phase velocity of the wave.

Alternatively:

\\(k = \\frac{p}{\\hbar}\\), where \\(p\\) is the linear momentum of quasi free electrons in an electron gas and \\(\\hbar\\) is the reduced Planck constant (\\(h\\) divided by \\(2\\pi\\)); for phonons, its magnitude is \\(k = \\frac{2\\pi}{\\lambda}\\), where \\(\\lambda\\) is the wavelength of the lattice vibrations.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${qudt}symbol`),
      literal(`k`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${rdfs}label`),
      literal(`Angular Wavenumber`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Apogee radius of an elliptical orbit`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${qudt}symbol`),
      literal(`r_2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${rdfs}label`),
      literal(`Apogee Radius`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApogeeRadius`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Radius`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${dcterms}description`),
      literal(`"Apparent Power" is the product of the rms voltage \\(U\\) between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-41`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\left | \\underline{S} \\right | =  UI\\), where \\(U\\) is rms value of voltage and \\(I\\) is rms value of electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\left | \\underline{S} \\right |\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdfs}label`),
      literal(`Apparent Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}baseCGSUnitDimensions`),
      literal(`cm^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}baseSIUnitDimensions`),
      literal(`\\(m^2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Area`),
      namedNode(`${rdfs}label`),
      literal(`Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaAngle`),
      namedNode(`${rdfs}label`),
      literal(`Area Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}baseImperialUnitDimensions`),
      literal(`\\(ft^2/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}baseSIUnitDimensions`),
      literal(`\\(m^2/s\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}baseUSCustomaryUnitDimensions`),
      literal(`\\(L^2/T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(`${rdfs}label`),
      literal(`Area per Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${rdfs}label`),
      literal(`Area Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Area Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/area_thermal_expansion`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaThermalExpansion`),
      namedNode(`${rdfs}label`),
      literal(`Area Thermal Expansion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTime`),
      namedNode(`${rdfs}label`),
      literal(`Area Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H1T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreaTimeTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Area Time Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}abbreviation`),
      literal(`heat-flow-rate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rate_of_heat_flow`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = \\frac{\\Phi}{A}\\), where \\(\\Phi\\) is heat flow rate and \\(A\\) is area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Density of heat flow rate.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${qudt}symbol`),
      literal(`φ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Aeric Heat Flow Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AreicHeatFlowRate`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${ns14}Heat_transfer`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An Asset is an economic resource owned by a business or company. Simply stated, assets are things of value that can be readily converted into cash (although cash itself is also considered an asset).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Asset`),
      namedNode(`${rdfs}label`),
      literal(`Asset`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A second order reaction rate constant that is a specific second order reaction rate constant that governs the kinetics of an atmospheric, gas-phase reaction between hydroxyl radicals and an organic chemical.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${rdfs}label`),
      literal(`Atmospheric Hydroxylation Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericHydroxylationRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${dcterms}description`),
      literal(`The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about \\(760 mm\\) high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is \\(101,325 pascals\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Atmospheric_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/views/ENTRY.html?subview=Main&entry=t83.e178`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${rdfs}label`),
      literal(`Atmospheric Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtmosphericPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://reference.iucr.org/dictionary/Atomic_scattering_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(f = \\frac{E_a}{E_e}\\), where \\(E_a\\) is the radiation amplitude scattered by the atom and \\(E_e\\) is the radiation ampliture scattered by a single electron.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Atom Scattering Factor" is measure of the scattering power of an isolated atom.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${qudt}symbol`),
      literal(`f`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomScatteringFactor`),
      namedNode(`${rdfs}label`),
      literal(`Atom Scattering Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu_a = -\\frac{\\mu}{n}\\), where \\(\\mu\\) is the linear attenuation coefficient and \\(n\\) is the number density of the atoms in the substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Atomic Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per the number of atoms in the substance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`μₐ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Atomic Attenuation Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicAttenuationCoefficient`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ElementaryCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YoctoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YottaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZeptoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZettaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/atomic-charge`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The electric charge of an ion, equal to the number of electrons the atom has gained or lost in its ionization multiplied by the charge on one electron.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${rdfs}label`),
      literal(`Atomic Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicCharge`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Atomic Mass" is the mass of a specific isotope, most often expressed in unified atomic mass units.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${qudt}symbol`),
      literal(`m_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${rdfs}label`),
      literal(`Atomic Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Atomic Number", also known as the proton number, is the number of protons found in the nucleus of an atom and therefore identical to the charge number of the nucleus. A nuclide is a species of atom with specified numbers of protons and neutrons. Nuclides with the same value of Z but different values of N are called isotopes of an element. The ordinal number of an element in the periodic table is equal to the atomic number. The atomic number equals the charge of the nucleus in units of the elementary charge.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${rdfs}label`),
      literal(`Atomic Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AtomicNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(F(x) = Ae^{-\\alpha x} \\cos{[\\beta (x - x_0)]}\\), then \\(\\alpha\\) is the attenuation coefficient and \\(\\beta\\) is the phase coefficient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The attenuation coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter. A large attenuation coefficient means that the beam is quickly "attenuated" (weakened) as it passes through the medium, and a small attenuation coefficient means that the medium is relatively transparent to the beam. The Attenuation Coefficient is also called linear attenuation coefficient, narrow beam attenuation coefficient, or absorption coefficient.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AttenuationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Attenuation Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_a}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Auditory Thresholds" is the thresholds of sensitivity to auditory signals and other input to the ear or the sense of hearing.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${rdfs}label`),
      literal(`Auditory Thresholds`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuditoryThresholds`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AT-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AT-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OERSTED`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}latexSymbol`),
      literal(`H`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Magnetic Fields surround magnetic materials and electric currents and are detected by the force they exert on other magnetic materials and moving electric charges. The electric and magnetic fields are two interrelated aspects of a single object, called the electromagnetic field. A pure electric field in one reference frame is observed as a combination of both an electric field and a magnetic field in a moving reference frame. The Auxillary Magnetic Field, H characterizes how the true Magnetic Field B influences the organization of magnetic dipoles in a given medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${rdfs}label`),
      literal(`Auxillary Magnetic Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AuxillaryMagneticField`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(W_i = \\frac{E_k}{N_i}\\), where \\(E_k\\) is the initial kinetic energy of an ionizing charged particle and \\(N_i\\) is the total ionization produced by that particle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Average Energy Loss per Elementary Charge Produced" is also referred to as average energy loss per ion pair formed.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${qudt}symbol`),
      literal(`W_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${rdfs}label`),
      literal(`Average Energy Loss per Elementary Charge Produced`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageEnergyLossPerElementaryChargeProduced`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`AHEP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${rdfs}label`),
      literal(`Average Head End Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageHeadEndPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://everything2.com/title/Average+logarithmic+energy+decrement+per+collision`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\xi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Average Logarithmic Energy Decrement" is a measure of the amount of energy a neutron loses upon colliding with various nuclei. It is the average value of the increase in lethargy in elastic collisions between neutrons and nuclei whose kinetic energy is negligible compared with that of the neutrons.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageLogarithmicEnergyDecrement`),
      namedNode(`${rdfs}label`),
      literal(`Average Logarithmic Energy Decrement`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${rdfs}comment`),
      literal(`Avg Specific Impulse (lbf-sec/lbm) `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${rdfs}label`),
      literal(`Average Specific Impulse`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageSpecificImpulse`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${rdfs}label`),
      literal(`Average Vacuum Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${skos}altLabel`),
      literal(`AVT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}AverageVacuumThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Base_(chemistry)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/PH`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Chemicals or substances having a pH higher than 7 are said to be basic; higher pH means higher basicity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${rdfs}label`),
      literal(`Acidity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Basicity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Torque`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bending_moment`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M_b = M \\cdot e_Q\\), where \\(M\\) is the momentof force and \\(e_Q\\) is a unit vector directed along a \\(Q-axis\\) with respect to which the torque is considered.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A bending moment exists in a structural element when a moment is applied to the element so that the element bends. It is the component of moment of force perpendicular to the longitudinal axis of a beam or a shaft.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${qudt}symbol`),
      literal(`M_b`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${rdfs}label`),
      literal(`Bending Moment of Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BendingMomentOfForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Torque`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Decay_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Beta Disintegration Energy" is the  energy released by a beta particle radioactive decay. It is the sum of the maximum beta-particle kinetic energy and the recoil energy of the atom produced in the reference frame in which the emitting nucleus is at rest before its disintegration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Qᵦ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Beta Disintegration Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BetaDisintegrationEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Pitch angle in bevel gears is the angle between an element of a pitch cone and its axis. In external and internal bevel gears, the pitch angles are respectively less than and greater than 90 degrees.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${rdfs}label`),
      literal(`Bevel Gear Pitch Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BevelGearPitchAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/binding+fraction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(b = \\frac{B_r}{A}\\), where \\(B_r\\) is the relative mass defect and \\(A\\) is the nucleon number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Binding Fraction" is the ratio of the binding energy of a nucleus to the atomic mass number.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BindingFraction`),
      namedNode(`${rdfs}label`),
      literal(`Binding Fraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The bioconcentration factor is the ratio of the concentration of a chemical substance in biota over the concentration of the same chemical substance in water. It is related to the octanol-water partition coefficient.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Bioconcentration Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BioconcentrationFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A time that quantifies how long it takes to reduce a substance's concentration by 50% from any concentration point in time in a water or soil environment by either bacteria or another living organism.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${rdfs}label`),
      literal(`Biodegredation Half Life`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BiodegredationHalfLife`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${dcterms}description`),
      literal(`The blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and other animals. Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times. The body tightly regulates blood glucose levels as a part of metabolic homeostasis. Glucose is stored in skeletal muscle and liver cells in the form of glycogen;[2] in fasted individuals, blood glucose is maintained at a constant level at the expense of glycogen stores in the liver and skeletal muscle. [Wikipedia] \(\\\) There are two main methods of describing concentrations: by weight, and by molecular count. Weights are in grams, molecular counts in moles. A mole is \(6.022\times 10^{23}\) molecules.) In both cases, the unit is usually modified by \(milli-\) or \(micro-\) or other prefix, and is always \(per\) some volume, often a liter. Conversion factors depend on the molecular weight of the substance in question. \(\\\) \(mmol/L\) is millimoles/liter, and is the world standard unit for measuring glucose in blood. Specifically, it is the designated SI (Systeme International) unit. 'World standard' is not universal; not only the US but a number of other countries use mg/dl. A mole is about \(6\times 10^{23}\) molecules. \(\\\) \(mg/dL\) (milligrams/deciliter) is the traditional unit for measuring bG (blood glucose). There is a trend toward using \(mmol/L\) however mg/dL is much in practice. Some use is made of \(mmol/L\) as the primary unit with \(mg/dL\) quoted in parentheses. This acknowledges the large base of health care providers, researchers and patients who are already familiar with \(mg/dL|).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.faqs.org/faqs/diabetes/faq/part1/section-9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdfs}comment`),
      literal(`citation: https://en.wikipedia.org/wiki/Blood_sugar_level`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdfs}label`),
      literal(`Blood Glucose Level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${dcterms}description`),
      literal(`The blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and other animals. Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times. The body tightly regulates blood glucose levels as a part of metabolic homeostasis. Glucose is stored in skeletal muscle and liver cells in the form of glycogen;[2] in fasted individuals, blood glucose is maintained at a constant level at the expense of glycogen stores in the liver and skeletal muscle. [Wikipedia] \(\\\) There are two main methods of describing concentrations: by weight, and by molecular count. Weights are in grams, molecular counts in moles. A mole is \(6.022\times 10^{23}\) molecules.) In both cases, the unit is usually modified by \(milli-\) or \(micro-\) or other prefix, and is always \(per\) some volume, often a liter. Conversion factors depend on the molecular weight of the substance in question. \(\\\) \(mmol/L\) is millimoles/liter, and is the world standard unit for measuring glucose in blood. Specifically, it is the designated SI (Systeme International) unit. 'World standard' is not universal; not only the US but a number of other countries use mg/dl. A mole is about \(6\times 10^{23}\) molecules. \(\\\) \(mg/dL\) (milligrams/deciliter) is the traditional unit for measuring bG (blood glucose). There is a trend toward using \(mmol/L\) however mg/dL is much in practice. Some use is made of \(mmol/L\) as the primary unit with \(mg/dL\) quoted in parentheses. This acknowledges the large base of health care providers, researchers and patients who are already familiar with \(mg/dL|).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.faqs.org/faqs/diabetes/faq/part1/section-9.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdfs}comment`),
      literal(`citation: https://en.wikipedia.org/wiki/Blood_sugar_level`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdfs}label`),
      literal(`Blood Glucose Level by Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BloodGlucoseLevel_Mass`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}BloodGlucoseLevel`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Body Mass Index}\\), BMI, is an index of weight for height, calculated as: \\(BMI = \\frac{M_{body}}{H^2}\\), where \\(M_{body}\\) is body mass in kg, and \\(H\\) is height in metres. The BMI has been used as a guideline for defining whether a person is overweight because it minimizes the effect of height, but it does not take into consideration other important factors, such as age and body build. The BMI has also been used as an indicator of obesity on the assumption that the higher the index, the greater the level of body fat.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198631477.001.0001/acref-9780198631477-e-254`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${qudt}symbol`),
      literal(`BMI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${rdfs}label`),
      literal(`Body Mass Index`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BodyMassIndex`),
      namedNode(`${skos}altLabel`),
      literal(`BMI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A temperature that is the one at which a substance will change its physical state from a liquid to a gas.  It is also the temperature where the liquid and gaseous forms of a pure substance can exist in equilibrium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${rdfs}label`),
      literal(`Boiling Point Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BoilingPoint`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://reference.iucr.org/dictionary/Bragg_angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(2d\\sin{\\vartheta} = n\\lambda \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\vartheta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Bragg Angle" describes the condition for a plane wave to be diffracted from a family of lattice planes, the angle between the wavevector of the incident plane wave, and the lattice planes.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${rdfs}label`),
      literal(`Bragg Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BraggAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wiktionary.org/wiki/breadth`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Breadth" is the extent or measure of how broad or wide something is.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${rdfs}label`),
      literal(`Breadth`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Breadth`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${rdfs}label`),
      literal(`Buckling Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BucklingFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Bulk_modulus`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(K = \\frac{p}{\\vartheta}\\), where \\(p\\) is pressure and \\(\\vartheta\\) is volume strain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The bulk modulus of a substance measures the substance's resistance to uniform compression. It is defined as the ratio of the infinitesimal pressure increase to the resulting relative decrease of the volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BulkModulus`),
      namedNode(`${rdfs}label`),
      literal(`Bulk Modulus`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Burgers_vector`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Burgers Vector" is the vector characterizing a dislocation, i.e. the closing vector in a Burgers circuit encircling a dislocation line.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${rdfs}label`),
      literal(`Burgers Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurgersVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${rdfs}label`),
      literal(`Burn Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${qudt}symbol`),
      literal(`t`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${rdfs}label`),
      literal(`Burn Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}BurnTime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}supercededBy`),
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the X axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_X`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}supercededBy`),
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the Y axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Y`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}supercededBy`),
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the Z axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-GRAVITY_Z`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The point at which the distributed mass of a composite body can be acted upon by a force without inducing any rotation of the composite body.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Center_of_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Center of Mass (CoM)`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${skos}altLabel`),
      literal(`COM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CENTER-OF-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PositionVector`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Contractual mass requirement of a delivered item. Note that The term 'control mass' is sometimes utilized as a limit in lieu of CEI mass when a CEI mass does not exist. The term 'Interface Control Document Mass' is another alternative for specifying a contractual mass requirement.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Contract End Item (CEI) Specification Mass.`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${skos}altLabel`),
      literal(`CEI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTRACT-END-ITEM-SPECIFICATION-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The upper design gross mass limit of a system at a specified mission event against which margins are calculated after accounting for basic masses of flight hardware, MGA, and uncertainties. It may include propellants, crew, and cargo.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Control Mass.`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CONTROL-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Partition_function_(statistical_mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z = \\sum_r e^{-\\frac{E_r}{kT}}\\), where the sum is over all quantum states consistent with given energy, volume, external fields, and content, \\(E_r\\) is the energy in the \\(rth\\) quantum state, \\(k\\) is the Boltzmann constant, and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Canonical Partition Function" applies to a canonical ensemble, in which the system is allowed to exchange heat with the environment at fixed temperature, volume, and number of particles.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(`${rdfs}label`),
      literal(`Canonical Partition Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoFARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroFARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliFARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoFARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoFARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Capacitance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C = Q/U\\), where \\(Q\\) is electric charge and \\(V\\) is voltage.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Capacitance" is the ability of a body to hold an electrical charge; it is quantified as the amount of electric charge stored for a given electric potential. Capacitance is a scalar-valued quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${qudt}symbol`),
      literal(`C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacitance`),
      namedNode(`${rdfs}label`),
      literal(`Capacitance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Capacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In computer operations, (a) the largest quantity which can be stored, processed, or transferred; (b) the largest number of digits or characters which may regularly be processed; (c) the upper and lower limits of the quantities which may be processed. In other contexts, the amount of material that  can be stored, such as fuel or food.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${qudt}symbol`),
      literal(`TBD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Capacity`),
      namedNode(`${rdfs}label`),
      literal(`Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Carrier_lifetime`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau, \\tau_n, \\tau_p\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Carrier LifetIme" is a time constant for recombination or trapping of minority charge carriers in semiconductors.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${rdfs}label`),
      literal(`Carrier LifetIme`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CarrierLifetime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}abbreviation`),
      literal(`area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_CGS-L2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_USCUSTOMARY-L2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A = \\int\\int dxdy\\), where \\(x\\) and \\(y\\) are cartesian coordinates.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Area" is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${rdfs}label`),
      literal(`Cartesian Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianArea`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cartesian_coordinate_system`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Cartesian Coordinates" specify each point uniquely in a plane by a pair of numerical coordinates, which are the signed distances from the point to two fixed perpendicular directed lines, measured in the same unit of length. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${qudt}symbol`),
      literal(`x, y, z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${rdfs}label`),
      literal(`Cartesian Coordinates`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianCoordinates`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FBM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}STR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Standard`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TBSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(V = \\int\\int\\int dxdydz\\), where \\(x\\), \\(y\\), and \\(z\\) are cartesian coordinates.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Volume" is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${rdfs}label`),
      literal(`Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CartesianVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Volume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${dcterms}description`),
      literal(`An index of the actual or potential activity of a catalyst. The catalytic activity of an enzyme or an enzyme-containing preparation is defined as the property measured by the increase in the rate of conversion of a specified chemical reaction that the enzyme produces in a specified assay system. Catalytic activity is an extensive quantity and is a property of the enzyme, not of the reaction mixture; it is thus conceptually different from rate of conversion although measured by and equidimensional with it. The unit for catalytic activity is the \\(katal\\); it may also be expressed in mol \\(s^{-1}\\). Dimensions: \\(N T^{-1}\\). Former terms such as catalytic ability, catalytic amount, and enzymic activity are no er recommended. Derived quantities are molar catalytic activity, specific catalytic activity, and catalytic activity concentration. Source(s): <a href="http://www.answers.com/topic/catalytic-activity-biochemistry">www.answers.com</a>`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Catalysis`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CatalyticActivity`),
      namedNode(`${rdfs}label`),
      literal(`Catalytic Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}latexDefinition`),
      literal(`"Celsius Temperature", the thermodynamic temperature \\(T_0\\), is exactly \\(0.01\\)kelvin below the thermodynamic temperature of the triple point of water.
\\(t = T - T_0\\), where \\(T\\) is Thermodynamic Temperature and \\(T_0 = 273.15 K\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Celsius Temperature", the thermodynamic temperature T_0, is exactly 0.01 kelvin below the thermodynamic temperature of the triple point of water.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Celsius temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CelsiusTemperature`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the X axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_X`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the Y axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Y`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}symbol`),
      literal(`cg`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${qudt}url`),
      literal(`http://www.grc.nasa.gov/WWW/k-12/airplane/cg.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${rdfs}label`),
      literal(`Center of Gravity in the Z axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CenterOfGravity_Z`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${dcterms}description`),
      literal(`Characteristic impedance at a point in a non-dissipative medium and for a plane progressive wave, the quotient of the sound pressure \\(p\\) by the component of the sound particle velocity \\(v\\) in the direction of the wave propagation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acoustic_impedance#Characteristic_acoustic_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z_c = pc\\), where \\(p\\) is the sound pressure and \\(c\\) is the phase speed of sound.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Characteristic Acoustic Impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicAcousticImpedance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AcousticImpedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${dcterms}description`),
      literal(`Characteristic velocity or \\(c^{*}\\) is a measure of the combustion performance of a rocket engine independent of nozzle performance, and is used to compare different propellants and propulsion systems.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(c^{*}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CharacteristicVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Characteristic Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Charge Number", or just valance of an ion is the coefficient that, when multiplied by the elementary charge, gives the ion's charge.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${qudt}symbol`),
      literal(`z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${rdfs}label`),
      literal(`Charge Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChargeNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Chemical_affinity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A = -\\sum \nu_b\\mu_B\\), where \\(\nu_b\\) is the stoichiometric number of substance \\(B\\) and \\(\\mu_B\\) is the chemical potential of substance \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In chemical physics and physical chemistry, "Chemical Affinity" is the electronic property by which dissimilar chemical species are capable of forming chemical compounds. Chemical affinity can also refer to the tendency of an atom or compound to combine by chemical reaction with atoms or compounds of unlike composition.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalAffinity`),
      namedNode(`${rdfs}label`),
      literal(`Chemical Affinity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Chemical_potential`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu_B = (\\frac{\\partial G}{\\partial n_B})_{T,p,n_i}\\), where \\(G\\) is Gibbs energy, and \\(n_B\\) is the amount of substance \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${rdfs}label`),
      literal(`Chemical Potential`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Chromaticity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Chromaticity is an objective specification of the quality of a color regardless of its luminance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Chromaticity`),
      namedNode(`${rdfs}label`),
      literal(`Chromaticity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Circulation_%28fluid_dynamics%29`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In fluid dynamics, circulation is the line integral around a closed curve of the fluid velocity. It has dimensions of length squared over time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${rdfs}label`),
      literal(`Circulation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Circulation`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${qudt}symbol`),
      literal(`r_o`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${rdfs}label`),
      literal(`Closest Approach Radius`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ClosestApproachRadius`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Radius`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableSIUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}expression`),
      literal(`\\(heat-xfer-coeff\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_transfer_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}latexDefinition`),
      literal(`"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, \\(q/A\\), and the thermodynamic driving force for the flow of heat (that is, the temperature difference, \\( \\bigtriangleup T \\)).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the \\(\\textit{Coefficient of Heat Transfer}\\), is often called \\(\\textit{thermal transmittance}\\), with the symbol \\(U\\). \\(\\textit{Coefficient of Heat Transfer}\\), has SI units in watts per squared meter kelvin: \\(W/(m^2 \\cdot K)\\) .

\\(K = \\frac{\\varphi}{T}\\), where \\(\\varphi\\) is areic heat flow rate and \\(T\\) is thermodynamic temperature difference.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\kappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Coefficient of heat transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Coercivity}\\), also referred to as \\(\\textit{Coercive Field Strength}\\), is the magnetic field strength to be applied to bring the magnetic flux density in a substance from its remaining magnetic flux density to zero. This is defined as the coercive field strength in a substance when either the magnetic flux density or the magnetic polarization and magnetization is brought from its value at magnetic saturation to zero by monotonic reduction of the applied magnetic field strength. The quantity which is brought to zero should be stated, and the appropriate symbol used: \\(H_{cB}\\), \\(H_{cJ}\\) or \\(H_{cM}\\) for the coercivity relating to the magnetic flux density, the magnetic polarization or the magnetization respectively, where \\(H_{cJ} = H_{cM}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-12-69`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${qudt}symbol`),
      literal(`H_{c,B}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${rdfs}label`),
      literal(`Coercivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Coercivity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Coherence_length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Coherence Length" characterizes the distance in a superconductor over which the effect of a perturbation is appreciable.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${qudt}symbol`),
      literal(`ξ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${rdfs}label`),
      literal(`Coherence Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CoherenceLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_c}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Cold Receptor Threshold" is the threshold of cold-sensitive free nerve-ending.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ColdReceptorThreshold`),
      namedNode(`${rdfs}label`),
      literal(`Cold Receptor Threshold`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(h = h_r + h_c + h_k\\), where \\(h_r\\) is the linear radiative heat transfer coefficient, \\(h_c\\) is the convective heat transfer coefficient, and \\(h_k\\) is the conductive heat transfer coefficient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Combined Non Evaporative Heat Transfer Coefficient" is the `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombinedNonEvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Combined Non Evaporative Heat Transfer Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CombustionChamberTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Combustion Chamber Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${dcterms}description`),
      literal(`"Complex Power", under sinusoidal conditions, is the product of the phasor \\(U\\) representing the voltage between the terminals of a linear two-terminal element or two-terminal circuit and the complex conjugate of the phasor \\(I\\) representing the electric current in the element or circuit.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}expression`),
      literal(`\\(complex-power\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-39`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\underline{S} = \\underline{U}\\underline{I^*}\\), where \\(\\underline{U}\\) is voltage phasor and \\(\\underline{I^*}\\) is the complex conjugate of the current phasor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\underline{S}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdfs}label`),
      literal(`Complex Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Compressibility`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\chi = -(\\frac{1}{V})\\frac{dV}{d\\rho}\\), where \\(V\\) is volume and \\(p\\) is pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\chi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Compressibility is a measure of the relative volume change of a fluid or solid as a response to a pressure (or mean stress) change.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Compressibility`),
      namedNode(`${rdfs}label`),
      literal(`Compressibility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${dcterms}description`),
      literal(`The compressibility factor (\\(Z\\)) is a useful thermodynamic property for modifying the ideal gas law to account for the real gas behaviour. The closer a gas is to a phase change, the larger the deviations from ideal behavior. It is simply defined as the ratio of the molar volume of a gas to the molar volume of an ideal gas at the same temperature and pressure. Values for compressibility are calculated using equations of state (EOS), such as the virial equation and van der Waals equation. The compressibility factor for specific gases can be obtained, with out calculation, from compressibility charts. These charts are created by plotting Z as a function of pressure at constant temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${rdfs}label`),
      literal(`Compressibility Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CompressibilityFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Concentration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Concentration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Concentration`),
      namedNode(`${rdfs}label`),
      literal(`Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Conductance}\\), for a resistive two-terminal element or two-terminal circuit with terminals A and B, quotient of the electric current i in the element or circuit by the voltage \\(u_{AB}\\) between the terminals: \\(G = \\frac{1}{R}\\), where the electric current is taken as positive if its direction is from A to B and negative in the opposite case. The conductance of an element or circuit is the inverse of its resistance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-06`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G = Re\\underline{Y}\\), where \\(\\underline{Y}\\) is admittance.

Alternatively:

\\(G = \\frac{1}{R}\\), where \\(R\\) is resistance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${rdfs}label`),
      literal(`Conductance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Conduction Speed" is the speed of impulses in nerve fibers.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${rdfs}label`),
      literal(`Conduction Speed`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductionSpeed`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Speed`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi_k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Conductive Heat Transfer Rate" is proportional to temperature gradient and area of contact.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConductiveHeatTransferRate`),
      namedNode(`${rdfs}label`),
      literal(`Conductive Heat Transfer Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroS-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliS-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoS-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoS-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-12-03`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{J} = \\sigma \\mathbf{E}\\), where \\(\\mathbf{J}\\) is electric current density, and \\(\\mathbf{E}\\) is electric field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Conductivity" is a scalar or tensor quantity the product of which by the electric field strength in a medium is equal to the electric current density. For an isotropic medium the conductivity is a scalar quantity; for an anisotropic medium it is a tensor quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdfs}label`),
      literal(`Conductivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Conductivity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_transfer#Convection`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi_c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Convective Heat Transfer" is convective heat transfer coefficient multiplied by temperature difference and exchange area. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ConvectiveHeatTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Convective Heat Transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.lrc.rpi.edu/programs/nlpip/lightinganswers/lightsources/whatiscct.asp#:~:text=Correlated%20color%20temperature%20(CCT)%20is,required%20to%20specify%20a%20chromaticity.`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Correlated color temperature (CCT) is a measure of light source color appearance defined by the proximity of the light source's chromaticity coordinates to the blackbody locus, as a single number rather than the two required to specify a chromaticity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Correlated Color Temperature`, 'en-us'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Correlated Colour Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Duv`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Count" is the value of a count of items.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${rdfs}label`),
      literal(`Count`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Count`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=161-03-18`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For inductive coupling between two inductive elements, \\(k = \\frac{\\left | L_{mn} \\right |}{\\sqrt{L_m L_n}}\\), where \\(L_m\\) and \\(L_n\\) are their self inductances, and \\(L_{mn}\\) is their mutual inductance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Coupling Factor" is the ratio of an electromagnetic quantity, usually voltage or current, appearing at a specified location of a given circuit to the corresponding quantity at a specified location in the circuit from which energy is transferred by coupling.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${qudt}symbol`),
      literal(`k`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CouplingFactor`),
      namedNode(`${rdfs}label`),
      literal(`Coupling Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Cross-section" is used to express the likelihood of interaction between particles. For a specified target particle and for a specified reaction or process produced by incident charged or uncharged particles of specified type and energy, it is the mean number of such reactions or processes divided by the incident-particle fluence.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${qudt}symbol`),
      literal(`σ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSection`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${rdfs}label`),
      literal(`Cross-sectional Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CrossSectionalArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E3L-1I0M-2H0T7D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Electric Dipole Moment per Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicElectricDipoleMomentPerSquareEnergy`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}expression`),
      literal(`\\(cubic-exp-coef\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_V = \\frac{1}{V} \\; \\frac{dV}{dT}\\), where \\(V\\) is \\(volume\\) and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_v\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L3I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Expansion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CubicExpansionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Curie_temperature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Curie Temperature" is the critical thermodynamic temperature of a ferromagnet.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Curie Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AFN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AUD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AWG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AZN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BDT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BHD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BSD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BelizeDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BermudaDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BolivianMvdol`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Boliviano`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BrazilianReal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BruneiDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BulgarianLev`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BurundianFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CapeVerdeEscudo`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CaymanIslandsDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Cedi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ChileanPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ColombianPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ComoroFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ConvertibleMark`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CordobaOro`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CostaRicanColon`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CroatianKuna`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CubanPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CyprusPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CzechKoruna`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DZD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Dalasi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DanishKrone`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Denar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DjiboutiFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Dobra`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DominicanPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EastCaribbeanDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EgyptianPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EthiopianBirr`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Euro`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EuropeanCompositeUnit`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EuropeanMonetaryUnit`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EuropeanUnitOfAccount17`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EuropeanUnitOfAccount9`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FalklandIslandsPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FijiDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Forint`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FrancCongolais`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GibraltarPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gold-OunceTroy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GoldFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Guarani`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GuineaFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GuyanaDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HaitiGourde`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HeartBeat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HongKongDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hryvnia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IcelandKrona`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IndianRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IranianRial`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IraqiDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}JamaicanDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}JapaneseYen`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}JordanianDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KenyanShilling`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Kina`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Kroon`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KuwaitiDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Kwanza`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Kyat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LaoKip`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Lari`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LatvianLats`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LebanesePound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Lek`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Lempira`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Leone`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LiberianDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LibyanDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Lilangeni`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LithuanianLitas`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Loti`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MalagasyAriary`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MalawiKwacha`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MalaysianRinggit`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MalteseLira`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Manat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MauritiusRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Metical`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MexicanPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MexicanUnidadDeInversion`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MillionUSD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MoldovanLeu`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MoroccanDirham`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Naira`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Nakfa`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NamibianDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NepaleseRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NetherlandsAntillianGuilder`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NewIsraeliShekel`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NewTaiwanDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NewTurkishLira`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NewZealandDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Ngultrum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NorthKoreanWon`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NorwegianKrone`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NuevoSol`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OmaniRial`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Ouguiya`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PAB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Paanga`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PakistanRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Palladium-OunceTroy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pataca`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PhilippinePeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Platinum-OunceTroy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PoundSterling`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pula`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QatariRial`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quetzal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Riel`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RomanianNeLeu`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Rufiyaa`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Rupiah`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RussianRuble`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RwandaFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SaintHelenaPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SamoanTala`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SaudiRiyal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SerbianDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SeychellesRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Silver-OunceTroy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SingaporeDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SlovakKoruna`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolomonIslandsDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Som`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SomaliShilling`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Somoni`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SouthAfricanRand`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SouthKoreanWon`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SpecialDrawingRights`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SriLankaRupee`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SudanesePound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SurinamDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SwedishKrona`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SwissFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SyrianPound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TanzanianShilling`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Tenge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TrinidadAndTobagoDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Tugrik`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TunisianDinar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UAEDirham`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UICFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}USDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}USDollar_NextDay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}USDollar_SameDay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UgandaShilling`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UnidadDeValorReal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UnidadesDeFormento`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UruguayPeso`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UzbekistanSom`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Vatu`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}VenezuelanBolvar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}VietnameseDong`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WIREuro`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WIRFranc`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}XAF`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}XOF`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}XPF`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YemeniRial`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YuanRenminbi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZambianKwacha`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZimbabweDollar`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Zloty`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Currency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Currency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In economics, currency is a generally accepted medium of exchange. These are usually the coins and banknotes of a particular government, which comprise the physical aspects of a nation's money supply. The other part of a nation's money supply consists of bank deposits (sometimes called deposit money), ownership of which can be transferred by means of cheques, debit cards, or other forms of money transfer. Deposit money and currency are money in the sense that both are acceptable as a means of payment.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${rdfs}label`),
      literal(`Currency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Currency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Asset`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MDOLLAR-PER-FLIGHT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${rdfs}label`),
      literal(`Currency Per Flight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrencyPerFlight`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}expression`),
      literal(`\\(current-linkage\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-60`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Current Linkage" is the net electric current through a surface delimited by a closed loop.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurrentLinkage`),
      namedNode(`${rdfs}label`),
      literal(`Current Linkage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${dcterms}description`),
      literal(`The canonical example of extrinsic curvature is that of a circle, which has curvature equal to the inverse of its radius everywhere. Smaller circles bend more sharply, and hence have higher curvature. The curvature of a smooth curve is defined as the curvature of its osculating circle at each point. The osculating circle of a sufficiently smooth plane curve at a given point on the curve is the circle whose center lies on the inner normal line and whose curvature is the same as that of the given curve at that point. This circle is tangent to the curve at the given point. The magnitude of curvature at points on physical curves can be measured in \\(diopters\\) (also spelled \\(dioptre\\)) — this is the convention in optics.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DIOPTER`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Curvature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Curvature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The canonical example of extrinsic curvature is that of a circle, which has curvature equal to the inverse of its radius everywhere. Smaller circles bend more sharply, and hence have higher curvature. The curvature of a smooth curve is defined as the curvature of its osculating circle at each point. The osculating circle of a sufficiently smooth plane curve at a given point on the curve is the circle whose center lies on the inner normal line and whose curvature is the same as that of the given curve at that point. This circle is tangent to the curve at the given point.
That is, given a point P on a smooth curve C, the curvature of C at P is defined to be 1/R where R is the radius of the osculating circle of C at P. The magnitude of curvature at points on physical curves can be measured in diopters (also spelled dioptre) — this is the convention in optics. [Wikipedia],`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${rdfs}label`),
      literal(`Curvature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Curvature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Curvature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\kappa = \\frac{1}{\\rho}\\), where \\(\\rho\\) is the radius of the curvature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\kappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In mathematics "Curvature" is the amount by which a geometric object deviates from being flat, or straight in the case of a line, but this is defined in different ways depending on the context.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${rdfs}label`),
      literal(`Curvature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CurvatureFromRadius`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}Curvature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electron_cyclotron_resonance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\omega_c = \\frac{\\left | q \\right |}{m}B\\), where \\(q\\) is the electric charge, \\(m\\) is its mass, and \\(B\\) is the magnetic flux density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\omega_c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Cyclotron Angular Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${rdfs}label`),
      literal(`Larmor Angular Frequency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}CyclotronAngularFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\bigtriangleup v\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The change in translational velocity including all losses for a propulsive system or module. Delta-V losses include, but are not limited to, gravity losses and steering losses.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Delta-v`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${rdfs}label`),
      literal(`Delta-V`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DELTA-V`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mass of a system without the propellants, pressurants, reserve or residual fluids, personnel and personnel provisions, and cargo.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Dry Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DRY-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BIT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBIT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBIT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBYTE-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBIT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Data_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The frequency derived from the period of time required to transmit one bit. This represents the amount of data transferred per second by a communications channel or a computing or storage device. Data rate is measured in units of bits per second (written "b/s" or "bps"), bytes per second (Bps), or baud. When applied to data rate, the multiplier prefixes "kilo-", "mega-", "giga-", etc. (and their abbreviations, "k", "M", "G", etc.) always denote powers of 1000. For example, 64 kbps is 64,000 bits per second. This contrasts with units of storage which use different prefixes to denote multiplication by powers of 1024, for example 1 kibibit = 1024 bits.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${rdfs}label`),
      literal(`Data Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DataRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Debye–Waller_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(u = R - R_0\\), where \\(R\\) is the particle position vector and \\(R_0\\) is the equilibrium position vector of a particle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Debye-Waller Factor" (DWF), named after Peter Debye and Ivar Waller, is used in condensed matter physics to describe the attenuation of x-ray scattering or coherent neutron scattering caused by thermal motion. Also, a factor by which the intensity of a diffraction line is reduced because of the lattice vibrations.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${qudt}symbol`),
      literal(`D, B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Debye-WallerFactor`),
      namedNode(`${rdfs}label`),
      literal(`Debye-Waller Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://lamp.tu-graz.ac.at/~hadley/ss1/phonons/table/dosdebye.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\omega_b\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Debye Angular Frequency" is the cut-off angular frequency in the Debye model of the vibrational spectrum of a solid.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${rdfs}label`),
      literal(`Debye Angular Frequency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Debye Angular Wavenumber" is the cut-off angular wavenumber in the Debye model of the vibrational spectrum of a solid.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${qudt}symbol`),
      literal(`q_D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${rdfs}label`),
      literal(`Debye Angular Wavenumber`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeAngularWavenumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Debye_model`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Theta_D = \\frac{\\hbar\\omega_D}{k}\\), where \\(k\\) is the Boltzmann constant, \\(\\hbar\\) is the reduced Planck constant, and \\(\\omega_D\\) is the Debye angular frequency.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Theta_D\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Debye Temperature" is the temperature at which the highest-frequency mode (and hence all modes) are excited.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DebyeTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Debye Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCi`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Exponential_decay`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.britannica.com/EBchecked/topic/154945/decay-constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}latexDefinition`),
      literal(`Relative variation \\(\\frac{dN}{N}\\) of the number \\(N\\) of atoms or nuclei in a system, due to spontaneous emission from these atoms or nuclei during an infinitesimal time interval, divided by its duration \\(dt\\), thus \\(\\lambda = -\\frac{1}{N}\\frac{dN}{dt}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Decay Constant" is the proportionality between the size of a population of radioactive atoms and the rate at which the population decreases because of radioactive decay.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${rdfs}label`),
      literal(`Decay Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DecayConstant`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Faraday_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dissociation_(chemistry)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Degree of Dissociation" is the fraction of original solute molecules that have dissociated.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DegreeOfDissociation`),
      namedNode(`${rdfs}label`),
      literal(`Degree of Dissociation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${dcterms}description`),
      literal(`The mass density or density of a material is defined as its mass per unit volume. The symbol most often used for density is \\(\\rho\\).  Mathematically, density is defined as mass divided by volume: \\(\\rho = m/V\\), where \\(\\rho\\) is the density, \\(m\\) is the mass, and \\(V\\) is the volume. In some cases, density is also defined as its weight per unit volume, although this quantity is more properly called specific weight.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = m/V\\), where \\(\\rho\\) is the density, \\(m\\) is the mass, and \\(V\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${rdfs}label`),
      literal(`Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Density`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MassDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityInCombustionChamber`),
      namedNode(`${rdfs}label`),
      literal(`Density In Combustion Chamber`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC-PER-RAD-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Density_of_states`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Density of States" is the number of vibrational modes in an infinitesimal interval of angular frequency divided by the range of that interval and by volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfStates`),
      namedNode(`${rdfs}label`),
      literal(`Density of states`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-GAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${rdfs}label`),
      literal(`Density Of The Exhaust Gases`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DensityOfTheExhaustGases`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Depth typically refers to the vertical measure of length from the surface of a liquid.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${rdfs}label`),
      literal(`Depth`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Depth`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Dew Point Temperature" is the temperature at which vapour in air reaches saturation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Dew Point Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DewPointTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Diameter`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Diameter`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(d = 2r\\), where \\(r\\) is the radius of the circle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In classical geometry, the "Diameter" of a circle is any straight line segment that passes through the center of the circle and whose endpoints lie on the circle. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${rdfs}label`),
      literal(`Diameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Diameter`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199549351.001.0001/acref-9780199549351-e-1162`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${rdfs}label`),
      literal(`Diastolic Blood Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/diffusion+area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Diffusion Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the point where a neutron enters a specified class and the point where it leaves that class.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${qudt}symbol`),
      literal(`L^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_diffusivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C_B \\left \\langle \nu_B \\right \\rangle = -D grad C_B\\), where \\(C_B\\) the local molecular concentration of substance \\(B\\) in the mixture and \\(\\left \\langle \nu_B \\right \\rangle\\) is the local average velocity of the molecules of \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Diffusion Coefficient" is a proportionality constant between the molar flux due to molecular diffusion and the gradient in the concentration of the species (or the driving force for diffusion). Diffusivity is encountered in Fick's law and numerous other equations of physical chemistry.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}abbreviation`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_diffusivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(D_\\varphi = -\\frac{J_x}{\\frac{\\partial d\\varphi}{\\partial dx}}\\), where \\(J_x\\) is the \\(x-component\\) of the particle current and \\(\\varphi\\) is the particle fluence rate.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Diffusion Coefficient for Fluence Rate" is a proportionality constant between the .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${qudt}symbol`),
      literal(`Dᵩ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Coefficient for Fluence Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionCoefficientForFluenceRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/diffusion+length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L = \\sqrt{L^2}\\), where \\(L^2\\) is the diffusion area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Diffusion Length" is the average distance traveled by a particle, or a thermal neutron in a nuclear reactor, from the point at which it is formed to the point at which it is absorbed.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DiffusionLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${dcterms}description`),
      literal(`In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as \\(\\pi\\), \\(\\epsilon\\), and \\(\\psi\\), are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dimensionless_quantity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dimensionless_quantity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(`${rdfs}label`),
      literal(`Dimensionless`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${rdfs}label`),
      literal(`Dimensionless Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Displacement_(vector)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Delta r =  R_f - R_i\\), where \\(R_f\\) is the final position and \\(R_i\\) is the initial position.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Delta r\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Displacement" is the shortest distance from the initial to the final position of a point P.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${rdfs}label`),
      literal(`Displacement`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Displacement`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Displacement_current`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I_D= \\int_S J_D \\cdot e_n dA\\), over a surface \\(S\\), where \\(J_D\\) is displacement current density and \\(e_n dA\\) is the vector surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Displacement Current" is a quantity appearing in Maxwell's equations that is defined in terms of the rate of change of electric displacement field. Displacement current has the units of electric current density, and it has an associated magnetic field just as actual currents do. However it is not an electric current of moving charges, but a time-varying electric field. In materials, there is also a contribution from the slight motion of charges bound in atoms, dielectric polarization.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`I_D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Displacement Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Displacement Current Density}\\) is the time rate of change of the \\(\\textit{Electric Flux Density}\\). This is a measure of how quickly the electric field changes if we observe it as a function of time. This is different than if we look at how the electric field changes spatially, that is, over a region of space for a fixed amount of time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electric_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.maxwells-equations.com/math/partial-electric-flux.php`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J_D = \\frac{\\partial D}{\\partial t}\\), where \\(D\\) is electric flux density and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(J_D\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${rdfs}label`),
      literal(`Displacement Current Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Displacement`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(u = R - R_0\\), where \\(R\\) is the particle position vector and \\(R_0\\) is the equilibrium position vector of a particle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Displacement Vector of Ion" is the .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${rdfs}label`),
      literal(`Displacement Vector of Ion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DisplacementVectorOfIon`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dissipation_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\delta = \\frac{P_d}{P_i}\\), where \\(P_d\\) is the dissipated sound power, and \\(P_i\\) is the incident sound power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\delta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Dissipance, or dissipation factor for sound power, is the ratio of dissipated sound power to incident sound power. The dissipation factor (DF) is a measure of loss-rate of energy of a mode of oscillation (mechanical, electrical, or electromechanical) in a dissipative system. It is the reciprocal of quality factor, which represents the quality of oscillation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Dissipance`),
      namedNode(`${rdfs}label`),
      literal(`Dissipance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Distance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Distance" is a numerical description of how far apart objects are. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${rdfs}label`),
      literal(`Distance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Distance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DistanceTraveledDuringBurn`),
      namedNode(`${rdfs}label`),
      literal(`Distance Traveled During a Burn`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Donor Density" is the number per volume of donor levels.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n_d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${rdfs}label`),
      literal(`Donor Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionization_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Donor Ionization Energy" is the ionization energy of a donor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Donor Ionization Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DonorIonizationEnergy`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}AcceptorIonizationEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${dcterms}description`),
      literal(`"Dose Equivalent} (former), or \\textit{Equivalent Absorbed Radiation Dose}, usually shortened to \\textit{Equivalent Dose", is a computed average measure of the radiation absorbed by a fixed mass of biological tissue, that attempts to account for the different biological damage potential of different types of ionizing radiation. The equivalent dose to a tissue is found by multiplying the absorbed dose, in gray, by a dimensionless "quality factor" \\(Q\\), dependent upon radiation type, and by another dimensionless factor \\(N\\), dependent on all other pertinent factors. N depends upon the part of the body irradiated, the time and volume over which the dose was spread, even the species of the subject.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliR_man`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Equivalent_dose`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Equivalent_dose`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}latexDefinition`),
      literal(`At the point of interest in tissue, \\(H = DQ\\), where \\(D\\) is the absorbed dose and \\(Q\\) is the quality factor at that point.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${qudt}symbol`),
      literal(`H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${rdfs}label`),
      literal(`Dose Equivalent`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalent`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Equivalent_dose`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Dose Equivalent Quality Factor" is a factor in the caculation and measurement of dose equivalent, by which the absorbed dose is to be weighted in order to account for different biological effectiveness of radiations, for radiation protection purposes.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DoseEquivalentQualityFactor`),
      namedNode(`${rdfs}label`),
      literal(`Dose Equivalent Quality Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In fluid dynamics, the drag coefficient is a dimensionless quantity that is used to quantify the drag or resistance of an object in a fluid environment such as air or water.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`C_D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Drag Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In fluid dynamics, drag refers to forces which act on a solid object in the direction of the relative fluid flow velocity. Unlike other resistive forces such as dry friction, which is nearly independent of velocity, drag forces depend on velocity.
Drag forces always decrease fluid velocity relative to the solid object in the fluid's path.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${qudt}symbol`),
      literal(`D or F_D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DragForce`),
      namedNode(`${rdfs}label`),
      literal(`Drag Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${dcterms}description`),
      literal(`Dry measures are units of volume used to measure bulk commodities which are not gas or liquid. They are typically used in agriculture, agronomy, and commodity markets to measure grain, dried beans, and dried and fresh fruit; formerly also salt pork and fish. They are also used in fishing for clams, crabs, etc. and formerly for many other substances (for example coal, cement, lime) which were typically shipped and delivered in a standardized container such as a barrel.  In the original metric system, the unit of dry volume was the stere, but this is not part of the modern metric system; the liter and the cubic meter (\\(m^{3}\\)) are now used. However, the stere is still widely used for firewood.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CORD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dry_measure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${rdfs}label`),
      literal(`Dry Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DryVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Volume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.waveformlighting.com/tech/calculate-duv-from-cie-1931-xy-coordinates`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www1.eere.energy.gov/buildings/publications/pdfs/ssl/led-color-characteristics-factsheet.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Duv is a metric that is short for Delta u,v (not to be confused with Delta u',v') and describes the distance of a light color point from the black body curve.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${rdfs}label`),
      literal(`Delta u,v`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Duv`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}CorrelatedColorTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${rdfs}label`),
      literal(`Dynamic Friction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFriction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Friction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = \\frac{F}{N}\\), where \\(F\\) is the tangential component of the contact force and \\(N\\) is the normal component of the contact force between two sliding bodies.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Dynamic Friction Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicFrictionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${dcterms}description`),
      literal(`Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: \\(q = 1/2 * \\rho v^{2}\\), where (using SI units),  \\(q\\) is dynamic pressure in \\(pascals\\), \\(\\rho\\) is fluid density in \\(kg/m^{3}\\) (for example, density of air) and \\(v \\) is fluid velocity in \\(m/s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Dynamic_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${qudt}symbol`),
      literal(`q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${rdfs}label`),
      literal(`Dynamic Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-SEC-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-SEC-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPOISE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://dictionary.reference.com/browse/dynamic+viscosity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\tau_{xz} = \\eta\\frac{dv_x}{dz}\\), where \\(\\tau_{xz}\\) is shear stress in a fluid moving with a velocity gradient \\(\\frac{dv_x}{dz}\\) perpendicular to the plane of shear. `, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of the molecular frictional resistance of a fluid as calculated using Newton's law.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${rdfs}label`),
      literal(`Dynamic Viscosity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}DynamicViscosity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Viscosity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_o`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Earth Closest Approach Vehicle Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EarthClosestApproachVehicleVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varepsilon\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. In a two-body problem with inverse-square-law force, every orbit is a Kepler orbit. The eccentricity of this Kepler orbit is a positive number that defines its shape.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EccentricityOfOrbit`),
      namedNode(`${rdfs}label`),
      literal(`Eccentricity Of Orbit`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The velocity of an exhaust stream after reduction by effects such as friction, non-axially directed flow, and pressure differences between the inside of the rocket and its surroundings. The effective exhaust velocity is one of two factors determining the thrust, or accelerating force, that a rocket can develop, the other factor being the quantity of reaction mass expelled from the rocket in unit time. In most cases, the effective exhaust velocity is close to the actual exhaust velocity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`v_{e}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveExhaustVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Effective Exhaustvelocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Effective_mass_(solid-state_physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(m^* = \\hbar^2k(\\frac{d\\varepsilon}{dk})\\), where \\(\\hbar\\) is the reduced Planck constant, \\(k\\) is the wavenumber, and \\(\\varepsilon\\) is the energy of the electron.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Effective Mass" is used in the motional equation for electrons in solid state bodies, depending on the wavenumber and corresponding to its velocity and energy level.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${qudt}symbol`),
      literal(`m^*`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${rdfs}label`),
      literal(`Effective Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_chain_reaction#Effective_neutron_multiplication_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Effective Multiplication Factor" is the multiplication factor for a finite medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${qudt}symbol`),
      literal(`k_{eff}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Effective Multiplication Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Deformation_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\eta = \\frac{P_{out}}{P_{in}}\\), where \\(P_{out}\\) is the output power and \\(P_{in}\\) is the input power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\eta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Efficiency is the ratio of output power to input power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${rdfs}label`),
      literal(`Efficiency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Efficiency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${dcterms}description`),
      literal(`Given two atomic states of energy \\(E_j\\) and \\(E_k\\).  Let \\(E_j > E_k\\).  Assume the atom is bathed in radiation of energy density \\(u(w)\\).  Transitions between these states can take place in three different ways. Spontaneous, induced/stimulated emission, and induced absorption. \\(A_jk\\) represents the Einstein transition probability for spontaneous emission.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://electron6.phys.utk.edu/qm2/modules/m10/einstein.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\frac{-dN_j}{dt} = A_jkN_j\\), where \\(-dN_j\\) is the number of molecules spontaneously leaving the state j for the state k during a time interval of duration \\(dt\\), \\(N_j\\) is the number of molecules in the state j, and \\(E_j > E_k\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}symbol`),
      literal(`A_jkN_j`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EinsteinTransitionProbability`),
      namedNode(`${rdfs}label`),
      literal(`Einstein Transition Probability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge \\(e\\), that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ElementaryCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YoctoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YottaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZeptoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZettaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electric_charge`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electric_charge?oldid=492961669`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(dQ = Idt\\), where \\(I\\) is electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}expression`),
      literal(`\\(charge-density\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.maxwells-equations.com/pho/charge-density.php`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = \\frac{dQ}{dV}\\), where \\(Q\\) is electric charge and \\(V\\) is Volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${dcterms}description`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are \\(C \\cdot \\), \\(m^{-1}\\), \\(C \\cdot m^{-2}\\) or \\(C \\cdot m^{-3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLineDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Line Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}expression`),
      literal(`\\(linear-charge-density\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_l = \\frac{dQ}{dl}\\), where \\(Q\\) is electric charge and \\(l\\) is length.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_l\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Linear Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeLinearDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Charge Per Amount Of Substance" is the charge assocated with a given amount of substance. Un the ISO and SI systems this is \\(1 mol\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E1L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerAmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Electric charge per amount of substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${dcterms}description`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are \\(C \\cdot m^{-1}\\), \\(C \\cdot m^{-2}\\) or \\(C \\cdot m^{-3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(`${rdfs}label`),
      literal(`Electric charge per area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Charge Per Mass" is the charge associated with a specific mass of a substance. In the SI and ISO systems this is \\(1 kg\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-T-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Per Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}expression`),
      literal(`\\(surface-charge-density\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_A = \\frac{dQ}{dA}\\), where \\(Q\\) is electric charge and \\(A\\) is Area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_A\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Surface Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${dcterms}description`),
      literal(`In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are \\(C \\cdot m^{-1}\\), \\(C \\cdot m^{-2}\\) or \\(C \\cdot m^{-3}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-3I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Charge_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricChargeVolumeDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Charge Volume Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Conductivity} or \\textit{Specific Conductance" is a measure of a material's ability to conduct an electric current. When an electrical potential difference is placed across a conductor, its movable charges flow, giving rise to an electric current. The conductivity \\(\\sigma\\) is defined as the ratio of the electric current density \\(J\\) to the electric field \\(E\\): \\(J = \\sigma E\\). In isotropic materials, conductivity is scalar-valued, however in general, conductivity is a tensor-valued quantity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Ab-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MHO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MHO_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMHO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricConductivity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Conductivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BIOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electric_current`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Current Density" is a measure of the density of flow of electric charge; it is the electric current per unit area of cross section. Electric current density is a vector-valued quantity. Electric current, \\(I\\), through a surface \\(S\\) is defined as \\(I = \\int_S J \\cdot e_n dA\\), where \\(e_ndA\\) is the vector surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaA-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Current_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://maxwells-equations.com/density/current.php`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J = \\rho v\\), where \\(\\rho\\) is electric current density and \\(v\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerAngle`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current per Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current per Unit Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current per Unit Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Current per Unit Temperature" is used to express how a current is subject to temperature. Originally used in Wien's Law to describe phenomena related to filaments. One use today is to express how a current generator derates with temperature.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns16}all`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPerUnitTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current per Unit Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Phasor_(electronics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-26`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`When \\(i = \\hat{I} \\cos{(\\omega t + \\alpha)}\\), where \\(i\\) is the electric current, \\(\\omega\\) is angular frequence, \\(t\\) is time, and \\(\\alpha\\) is initial phase, then \\(\\underline{I} = Ie^{ja}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\underline{I}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Current Phasor" is a representation of current as a sinusoidal integral quantity using a complex quantity whose argument is equal to the initial phase and whose modulus is equal to the root-mean-square value. A phasor is a constant complex number, usually expressed in exponential form, representing the complex amplitude (magnitude and phase) of a sinusoidal function of time. Phasors are used by electrical engineers to simplify computations involving sinusoids, where they can often reduce a differential equation problem to an algebraic one.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(`${rdfs}label`),
      literal(`Electric Current Phasor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Debye`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electric_dipole_moment`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_p = -p \\cdot E\\), where \\(E_p\\) is the interaction energy of the molecule with electric dipole moment \\(p\\) and an electric field with electric field strength \\(E\\).

\\(p = q(r_+ - r_i)\\), where \\(r_+\\) and \\(r_-\\) are the position vectors to carriers of electric charge \\(a\\) and \\(-q\\), respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Dipole Moment" is a measure of the separation of positive and negative electrical charges in a system of (discrete or continuous) charges. It is a vector-valued quantity. If the system of charges is neutral, that is if the sum of all charges is zero, then the dipole moment of the system is independent of the choice of a reference frame; however in a non-neutral system, such as the dipole moment of a single proton, a dependence on the choice of reference point arises. In such cases it is conventional to choose the reference point to be the center of mass of the system or the center of charge, not some arbitrary origin. This convention ensures that the dipole moment is an intrinsic property of the system. The electric dipole moment of a substance within a domain is the vector sum of electric dipole moments of all electric dipoles included in the domain.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(`${rdfs}label`),
      literal(`Electric Dipole Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C3-M-PER-J2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E3L-1I0M-2H0T7D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_CubicPerEnergy_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Cubic Electric Dipole Moment per Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C4-M4-PER-J3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E4L-2I0M-3H0T10D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Electric Dipole Moment per Cubic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${dcterms}description`),
      literal(`In a dielectric material the presence of an electric field E causes the bound charges in the material (atomic nuclei and their electrons) to slightly separate, inducing a local electric dipole moment. The Electric Displacement Field, \\(D\\), is a vector field that accounts for the effects of free charges within such dielectric materials. This describes also the charge density on an extended surface that could be causing the field.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199233991.001.0001/acref-9780199233991-e-895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(D = \\epsilon_0 E + P\\), where \\(\\epsilon_0\\) is the electric constant, \\(E\\) is electric field strength, and \\(P\\) is electric polarization.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${rdfs}label`),
      literal(`Electric Displacement`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${rdfs}label`),
      literal(`Electric Displacement Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricDisplacementField`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electric_field`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}expression`),
      literal(`\\(E\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electric_field`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The space surrounding an electric charge or in the presence of a time-varying magnetic field has a property called an electric field. This electric field exerts a force on other electrically charged objects. In the idealized case, the force exerted between two point charges is inversely proportional to the square of the distance between them. (Coulomb's Law).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricField`),
      namedNode(`${rdfs}label`),
      literal(`Electric Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Electric Field Strength}\\) is the magnitude and direction of an electric field, expressed by the value of \\(E\\), also referred to as \\(\\color{indigo} {\\textit{electric field intensity}}\\) or simply the electric field.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{E} = \\mathbf{F}/q\\), where \\(\\mathbf{F}\\) is force and \\(q\\) is electric charge, of a test particle at rest.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mathbf{E} \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(`${rdfs}label`),
      literal(`Electric Field Strength`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electric_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}expression`),
      literal(`\\(electirc-flux\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Psi = \\int_S D \\cdot e_n dA\\), over a surface \\(S\\), where \\(D\\) is electric flux density and \\(e_n dA\\) is the vector surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Psi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Flux" through an area is defined as the electric field multiplied by the area of the surface projected in a plane perpendicular to the field. Electric Flux is a scalar-valued quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${rdfs}label`),
      literal(`Electric Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFlux`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Electric Flux Density}\\), also referred to as \\(\\textit{Electric Displacement}\\), is related to electric charge density by the following equation: \\(\\text{div} \\; D = \\rho\\), where \\(\\text{div}\\) denotes the divergence.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electric_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{D}  = \\epsilon_0 E + P\\), where \\(\\epsilon_0\\) is the electric constant, \\(\\mathbf{E} \\) is electric field strength, and \\(P\\) is electric polarization.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mathbf{D}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electric Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricDisplacement`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Polarizability`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_{i,j} = \\frac{\\partial p_i}{\\partial E_j}\\), where \\(p_i\\) is the cartesian component along the \\(i-axis\\) of the electric dipole moment induced by the applied electric field strength acting on the molecule, and \\(E_j\\) is the component along the \\(j-axis\\) of this electric field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Polarizability" is the relative tendency of a charge distribution, like the electron cloud of an atom or molecule, to be distorted from its normal shape by an external electric field, which is applied typically by inserting the molecule in a charged parallel-plate capacitor, but may also be caused by the presence of a nearby ion or dipole.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarizability`),
      namedNode(`${rdfs}label`),
      literal(`Electric Polarizability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.britannica.com/EBchecked/topic/182690/electric-polarization`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(P =\\frac{dp}{dV}\\), where \\(p\\) is electic charge density and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Polarization" is the relative shift of positive and negative electric charge in opposite directions within an insulator, or dielectric, induced by an external electric field. Polarization occurs when an electric field distorts the negative cloud of electrons around positive atomic nuclei in a direction opposite the field. This slight separation of charge makes one side of the atom somewhat positive and the opposite side somewhat negative. In some materials whose molecules are permanently polarized by chemical forces, such as water molecules, some of the polarization is caused by molecules rotating into the same alignment under the influence of the electric field. One of the measures of polarization is electric dipole moment, which equals the distance between the slightly shifted centres of positive and negative charge multiplied by the amount of one of the charges. Polarization P in its quantitative meaning is the amount of dipole moment p per unit volume V of a polarized material, P = p/V.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdfs}label`),
      literal(`Electric Polarization`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricChargeDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricDipoleMoment`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${dcterms}description`),
      literal(`The Electric Potential is a scalar valued quantity associated with an electric field. The electric potential \\(\\phi(x)\\) at a point, \\(x\\), is formally defined as the line integral of the electric field taken along a path from x to the point at infinity. If the electric field is static, that is time independent, then the choice of the path is arbitrary; however if the electric field is time dependent, taking the integral a different paths will produce different results.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(-\\textbf{grad} \\; V = E + \\frac{\\partial A}{\\partial t}\\), where \\(E\\) is electric field strength, \\(A\\) is magentic vector potential and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${rdfs}label`),
      literal(`Electric Potential`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(V_{ab} = \\int_{r_a(C)}^{r_b} (E +\\frac{\\partial A}{\\partial t}) \\), where \\(E\\) is electric field strength, \\(A\\) is magentic vector potential,  \\(t\\) is time, and \\(r\\) is position vector along a curve C from a point \\(a\\) to \\(b\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Potential Difference" is a scalar valued quantity associated with an electric field.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${qudt}symbol`),
      literal(`V_{ab}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${rdfs}label`),
      literal(`Electric Potential Difference`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${dcterms}description`),
      literal(`"Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): \\(P = VI\\), where \\(P\\) is the power, \\(V\\) is the potential difference, and \\(I\\) is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableSIUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableSIUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableSIUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableSIUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(p = ui\\), where \\(u\\) is instantaneous voltage and \\(i\\) is instantaneous electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${qudt}symbol`),
      literal(`P_E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${rdfs}label`),
      literal(`Electric Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${rdfs}label`),
      literal(`Electric Propulsion Propellant Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricPropulsionPropellantMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Electric Quadrupole Moment is a quantity which describes the effective shape of the ellipsoid of nuclear charge distribution. A non-zero quadrupole moment Q indicates that the charge distribution is not spherically symmetric. By convention, the value of Q is taken to be positive if the ellipsoid is prolate and negative if it is oblate. In general, the electric quadrupole moment is tensor-valued.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricQuadrupoleMoment`),
      namedNode(`${rdfs}label`),
      literal(`Electric Quadrupole Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Permittivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}expression`),
      literal(`\\(e-susceptibility\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\chi = \\frac{P}{(\\epsilon_0 E)}\\), where \\(P\\) is electric polorization, \\(\\epsilon_0\\) is the electric constant, and \\(E\\) is electric field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\chi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electric Susceptibility" is the ratio of electric polarization to electric field strength, normalized to the electric constant. The definition applies to an isotropic medium. For an anisotropic medium, electric susceptibility is a second order tensor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdfs}label`),
      literal(`Electric Susceptibility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricSusceptibility`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricPolarization`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\xi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectricalPowerToMassRatio`),
      namedNode(`${rdfs}label`),
      literal(`Electrical Power To Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Conductivity_(electrolytic)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(x = \\frac{J}{E}\\), where \\(J\\) is the electrolytic current density and \\(E\\) is the electric field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electrolytic Conductivity" of an electrolyte solution is a measure of its ability to conduct electricity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${qudt}symbol`),
      literal(`x`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectrolyticConductivity`),
      namedNode(`${rdfs}label`),
      literal(`Electrolytic Conductivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Electromagnetic Energy Density}\\), also known as the \\(\\color{indigo} {\\textit{Volumic Electromagnetic Energy}}\\), is the energy associated with an electromagnetic field, per unit volume of the field.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-64`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w = (1/2) ( \\mathbf{E} \\cdot \\mathbf{D} + \\mathbf{B} \\cdot \\mathbf{H})\\), where \\(\\mathbf{E}\\) is electric field strength, \\(\\mathbf{D}\\) is electric flux density, \\(\\mathbf{M}\\) is magnetic flux density, and \\(\\mathbf{H}\\) is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${qudt}symbol`),
      literal(`w`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electromagnetic Energy Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${dcterms}description`),
      literal(`"Permeability} is the degree of magnetization of a material that responds linearly to an applied magnetic field. In general permeability is a tensor-valued quantity. The definition given applies to an isotropic medium. For an anisotropic medium permeability is a second order tensor. In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself. In other words, it is the degree of magnetization that a material obtains in response to an applied magnetic field. Magnetic permeability is typically represented by the Greek letter \\(\\mu\\). The term was coined in September, 1885 by Oliver Heaviside. The reciprocal of magnetic permeability is \\textit{Magnetic Reluctivity".`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Permeability_(electromagnetism)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = \\frac{B}{H}\\),  where \\(B\\) is magnetic flux density,  and \\(H\\) is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}label`),
      literal(`Permeability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}ElectromagneticPermeabilityOfVacuum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}MagneticConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Permeability`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMEABILITY_EM_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The ratio of the electromagnetic permeability of a specific medium to the electromagnetic permeability of free space.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticPermeabilityRatio`),
      namedNode(`${rdfs}label`),
      literal(`Electromagnetic Permeability Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-66`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(c  = w/k\\) where \\(w\\) is angular velocity and \\(k\\) is angular wavenumber.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electromagnetic Wave Phase Speed" is the ratio of angular velocity and wavenumber.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromagneticWavePhaseSpeed`),
      namedNode(`${rdfs}label`),
      literal(`Electromagnetic Wave Phase Speed`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${dcterms}description`),
      literal(`In physics, electromotive force, or most commonly \\(emf\\) (seldom capitalized), or (occasionally) electromotance is that which tends to cause current (actual electrons and ions) to flow. More formally, \\(emf\\) is the external work expended per unit of charge to produce an electric potential difference across two open-circuited terminals. "Electromotive Force" is deprecated in the ISO System of Quantities.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electromotive_force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${rdfs}label`),
      literal(`Electromotive Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectromotiveForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electron_affinity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electron Affinity" is the energy difference between an electron at rest at infinity and an electron at the lowest level of the conduction band in an insulator or semiconductor. The the amount of energy released when an electron is added to a neutral atom or molecule to form a negative ion.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${qudt}symbol`),
      literal(`χ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${rdfs}label`),
      literal(`Electron Affinity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronAffinity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electron_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electron Density" is the number of electrons per volume in conduction bands. It is the measure of the probability of an electron being present at a specific location.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${rdfs}label`),
      literal(`Electron Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electron Mean Free Path" is the mean free path of electrons.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${qudt}symbol`),
      literal(`l_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${rdfs}label`),
      literal(`Electron Mean Free Path`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronMeanFreePath`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Classical_electron_radius`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(r_e = \\frac{e^2}{4\\pi m_e c_0^2}\\), where \\(e\\) is the elementary charge, \\(\\varepsilon_0\\) is the electric constant, item \\(m_e\\) is the rest mass of electrons, and \\(c_0\\) is the speed of light in vacuum.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Electron Radius", also known as the Lorentz radius or the Thomson scattering length, is based on a classical (i.e., non-quantum) relativistic model of the electron.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${qudt}symbol`),
      literal(`r_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${rdfs}label`),
      literal(`Electron Radius`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ElectronRadius`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Velocity at apogee for an elliptical orbit velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Elliptical Orbit Apogee Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitApogeeVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Velocity at apogee for an elliptical orbit velocity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Elliptical Orbit Perigee Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EllipticalOrbitPerigeeVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${dcterms}description`),
      literal(`Emissivity of a material (usually written \\(\\varepsilon\\) or e) is the relative ability of its surface to emit energy by radiation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Emissivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varepsilon = \\frac{M}{M_b}\\), where \\(M\\) is the radiant exitance of a thermal radiator and \\(M_b\\) is the radiant exitance of a blackbody at the same temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varepsilon\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Emissivity`),
      namedNode(`${rdfs}label`),
      literal(`Emissivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy is the quantity characterizing the ability of a system to do work.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}label`),
      literal(`Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Entropy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Work`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}baseISOUnitDimensions`),
      literal(`\\(m^{-1} \\cdot kg \\cdot s^{-2}\\)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}baseImperialUnitDimensions`),
      literal(`\\(ft^{-1} \\cdot lb \\cdot s^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}baseSIUnitDimensions`),
      literal(`\\(m^{-1} \\cdot kg \\cdot s^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}baseUSCustomaryUnitDimensions`),
      literal(`\\(L^{-1} \\cdot M \\cdot T^{-2}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Energy_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Energy_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Energy Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-J-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Density_of_states`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho(E) = n_E(E) = \\frac{dN(E)}{dE}\\frac{1}{V}\\), where \\(N(E)\\) is the total number of states with energy less than \\(E\\), and \\(V\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Density of States" refers to electrons or other entities, e.g. phonons. It can, for example, refer to amount of substance instead of volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${qudt}symbol`),
      literal(`n_E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyDensityOfStates`),
      namedNode(`${rdfs}label`),
      literal(`Energy Density of States`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${dcterms}description`),
      literal(`Energy expenditure is dependent on a person's sex, metabolic rate, body-mass composition, the thermic effects of food, and activity level.  The approximate energy expenditure of a man lying in bed is \\(1.0\\,kilo\\,calorie\\,per\\,hour\\,per\\,kilogram\\). For slow walking (just over two miles per hour), \\(3.0\\,kilo\\,calorie\\,per\\,hour\\,per\\,kilogram\\). For fast steady running (about 10 miles per hour), \\(16.3\\,kilo\\,calorie\\,per\\,hour\\,per\\,kilogram\\).
Females expend about 10 per cent less energy than males of the same size doing a comparable activity.  For people weighing the same, individuals with a high percentage of body fat usually expend less energy than lean people, because fat is not as metabolically active as muscle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780198631477.001\\).0001/acref-9780198631477-e-594`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyExpenditure`),
      namedNode(`${rdfs}label`),
      literal(`Energy Expenditure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fluence`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Psi = \\frac{dR}{dA}\\), where \\(dR\\) describes the sum of radiant energies, exclusive of rest energy, of all particles incident on a small spherical domain, and \\(dA\\) describes the cross-sectional area of that domain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Psi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Fluence" can be used to describe the energy delivered per unit area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluence`),
      namedNode(`${rdfs}label`),
      literal(`Energy Fluence`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fluence`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Psi = \\frac{d\\Psi}{dt}\\), where \\(d\\Psi\\) is the increment of the energy fluence during an infinitesimal time interval with duration \\(dt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Fluence Rate" can be used to describe the energy fluence delivered per unit time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${qudt}symbol`),
      literal(`Ψ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${rdfs}label`),
      literal(`Energy Fluence Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyFluenceRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/energy-imparted`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For ionizing radiation in the matter in a given 3D domain, \\(\\varepsilon = \\sum_i \\varepsilon_i\\), where the energy deposit, \\(\\varepsilon_i\\) is the energy deposited in a single interaction \\(i\\), and is given by \\(\\varepsilon_i = \\varepsilon_{in} - \\varepsilon_{out} + Q\\), where \\(\\varepsilon_{in}\\) is the energy of the incident ionizing particle, excluding rest energy, \\(\\varepsilon_{out}\\) is the sum of the energies of all ionizing particles leaving the interaction, excluding rest energy, and \\(Q\\) is the change in the rest energies of the nucleus and of all particles involved in the interaction.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Energy Imparted", is a physical quantity associated with the energy delivered to a particular volume of matter by all the directly and indirectly ionizing particles (i.e. charged and uncharged) entering that volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${qudt}symbol`),
      literal(`ε`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${rdfs}label`),
      literal(`Energy Imparted`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyImparted`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${dcterms}description`),
      literal(`The internal energy is the total energy contained by a thermodynamic system. It is the energy needed to create the system, but excludes the energy to displace the system's surroundings, any energy associated with a move as a whole, or due to external force fields. Internal energy has two major components, kinetic energy and potential energy. The internal energy (U) is the sum of all forms of energy (Ei) intrinsic to a thermodynamic system:  \\(  U = \\sum_i E_i \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Internal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Internal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${rdfs}label`),
      literal(`Internal Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kinetic_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kinetic_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The kinetic energy of an object is the energy which it possesses due to its motion. It is defined as the work needed to accelerate a body of a given mass from rest to its stated velocity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${rdfs}label`),
      literal(`Kinetic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyKinetic`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Level" is the ionization energy for an electron at the Fermi energy in the interior of a substance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${rdfs}label`),
      literal(`Energy Level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyLevel`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.calculator.org/property.aspx?name=energy%20per%20unit%20area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy per unit area is a measure of the energy either impinging upon or generated from a given unit of area. This can be a measure of the "toughness" of a material, being the amount of energy that needs to be applied per unit area of a crack to cause it to fracture. This is a constant for a given material..`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(`${rdfs}label`),
      literal(`Energy per Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Per Area Electric Charge" is the amount of electric energy associated with a unit of area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerAreaElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Energy Per Area Electric Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${dcterms}description`),
      literal(`Voltage is a representation of the electric potential energy per unit charge. If a unit of electrical charge were placed in a location, the voltage indicates the potential energy of it at that point. In other words, it is a measurement of the energy contained within an electric field, or an electric circuit, at a given point. Voltage is a scalar quantity. The SI unit of voltage is the volt, such that \\(1 volt = 1 joule/coulomb\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.about.com/od/glossary/g/voltage.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Energy per electric charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-T2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L2I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Per Square Magnetic Flux Density" is a measure of energy for a unit of magnetic flux density.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Energy Per Square Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerMassAmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Energy and work per mass amount of substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}EnergyPerMagneticFluxDensity_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L2I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Energy Per Square Magnetic Flux Density" is a measure of energy for a unit of magnetic flux density.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Energy Per Square Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerSquareMagneticFluxDensity`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Energy per temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M2H0T-4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${dcterms}description`),
      literal(`In thermodynamics, \\(\\textit{enthalpy}\\) is the sum of the internal energy \\(U\\) and the product of pressure \\(p\\) and volume \\(V\\) of a system. The characteristic function (also known as thermodynamic potential) \\(\\textit{enthalpy}\\) used to be called \\(\\textit{heat content}\\), which is why it is conventionally indicated by \\(H\\). The specific enthalpy of a working mass is a property of that mass used in thermodynamics, defined as \\(h=u+p \\cdot v\\),  where \\(u\\) is the specific internal energy, \\(p\\) is the pressure, and \\(v\\) is specific volume. In other words, \\(h = H / m\\) where \\(m\\) is the mass of the system. The SI unit for \\(\\textit{Specific Enthalpy}\\) is \\(\\textit{joules per kilogram}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(H = U + pV\\), where \\(U\\) is internal energy, \\(p\\) is pressure and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${qudt}symbol`),
      literal(`H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${rdfs}label`),
      literal(`Enthalpy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${dcterms}description`),
      literal(`When a small amount of heat \\(dQ\\) is received by a system whose thermodynamic temperature is \\(T\\), the entropy of the system increases by \\(dQ/T\\), provided that no irreversible change takes place in the system.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Entropy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Entropy`),
      namedNode(`${rdfs}label`),
      literal(`Entropy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Equilibrium_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(K^\\Theta = \\Pi_B(\\lambda_B^\\Theta)^{-\nu_B}\\), where \\(\\Pi_B\\) denotes the product for all substances \\(B\\), \\(\\lambda_B^\\Theta\\) is the standard absolute activity of substance \\(B\\), and \\(\nu_B\\) is the stoichiometric number of the substance \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(K^\\Theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Equlilbrium Constant", also known as the thermodynamic equilibrium constant, is an expression that gives us a ratio of the products and reactants of a reaction at equilibrium with respect to a specific unit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdfs}label`),
      literal(`Equilibrium Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Equilibrium_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(K_c = \\Pi_B(c_B)^{-\nu_B}\\), for solutions`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(K_c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Equlilbrium Constant", also known as the thermodynamic equilibrium constant, is an expression that gives us a ratio of the products and reactants of a reaction at equilibrium with respect to a specific unit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${rdfs}comment`),
      literal(`The unit is unit:MOL-PER-M3 raised to the N where N is the summation of stoichiometric numbers. I don't know what to do with this.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${rdfs}label`),
      literal(`Equilibrium Constant on Concentration Basis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnConcentrationBasis`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Equilibrium_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(K_p = \\Pi_B(p_B)^{-\nu_B}\\), for gases`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(K_p\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Equlilbrium Constant", also known as the thermodynamic equilibrium constant, is an expression that gives us a ratio of the products and reactants of a reaction at equilibrium with respect to a specific unit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${rdfs}label`),
      literal(`Equilibrium Constant on Pressure Basis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumConstantOnPressureBasis`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EquilibriumConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Position_(vector)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Equilibrium Position Vector of Ion" is the position vector of a particle in equilibrium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${qudt}symbol`),
      literal(`R_0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${rdfs}label`),
      literal(`Equilibrium Position Vector of Ion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquilibriumPositionVectorOfIon`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}abbreviation`),
      literal(`m2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.rockfon.co.uk/acoustics/comparing+ceilings/sound+absorption/equivalent+absorption+area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In a diffuse sound field, the Equivalent Absorption Area is that area of a surface having an absorption factor equal to 1, which, if diffraction effects are neglected, would, in the same diffuse sound field, absorb the same power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${rdfs}label`),
      literal(`Equivalent absorption area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EquivalentAbsorptionArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi_e\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Evaporative Heat Transfer" is `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Evaporative Heat Transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Evaporative Heat Transfer Coefficient" is the areic heat transfer coefficient multiplied by the water vapor pressure difference between skind and the environment, and by the exchange area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`h_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}EvaporativeHeatTransferCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Combined Non Evaporative Heat Transfer Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Exchange_interaction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Exchange Integral" is the constituent of the interaction energy between the spins of adjacent electrons in matter arising from the overlap of electron state functions.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExchangeIntegral`),
      namedNode(`${rdfs}label`),
      literal(`Exchange Integral`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasMeanMolecularWeight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasMeanMolecularWeight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasMeanMolecularWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasMeanMolecularWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasMeanMolecularWeight`),
      namedNode(`${rdfs}label`),
      literal(`Exhaust Gas Mean Molecular Weight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat of exhaust gases at constant pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${qudt}symbol`),
      literal(`c_p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${rdfs}label`),
      literal(`Exhaust Gases Specific Heat`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustGasesSpecificHeat`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${rdfs}label`),
      literal(`Exhaust Stream Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExhaustStreamPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Cross-sectional area at exit plane of nozzle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${qudt}symbol`),
      literal(`A_{e}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${rdfs}label`),
      literal(`Exit Plane Cross-sectional Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneCrossSectionalArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${qudt}symbol`),
      literal(`p_{e}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${rdfs}label`),
      literal(`Exit Plane Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlanePressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Exit Plane Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExitPlaneTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(`${rdfs}label`),
      literal(`Expansion Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-M2-PER-J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-T-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Exposure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Exposure_%28photography%29`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://hps.org/publicinformation/ate/faqs/gammaandexposure.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For X-or gamma radiation, \\(X = \\frac{dQ}{dm}\\), where \\(dQ\\) is the absolute value of the mean total electric charge of the ions of the same sign produced in dry air when all the electrons and positrons liberated or created by photons in an element of air are completely stopped in air, and \\(dm\\) is the mass of that element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Exposure" reflects the extent of ionization events taking place when air is irradiated by ionizing photons (gamma radiation and/or x rays). In photography, exposure is the amount of light allowed to fall on each area unit of a photographic medium (photographic film or image sensor) during the process of taking a photograph. Exposure is measured in lux seconds, and can be computed from exposure value (EV) and scene luminance in a specified region.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${qudt}symbol`),
      literal(`X`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${rdfs}label`),
      literal(`Exposure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Exposure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricChargePerMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-KiloGM-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://hps.org/publicinformation/ate/faqs/gammaandexposure.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\dot{X} = \\frac{dX}{dt}\\), where \\(X\\) is the increment of exposure during time interval with duration \\(t\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\dot{X}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Exposure Rate" expresses the rate of charge production per unit mass of air and is commonly expressed in roentgens per hour (R/h) or milliroentgens per hour (mR/h).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExposureRate`),
      namedNode(`${rdfs}label`),
      literal(`Exposure Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Extent_of_reaction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(dn_B = \nu_B d\\xi\\), where \\(n_B\\) is the amount of substance \\(B\\) and \\(\nu_B\\) is the stoichiometric number of substance \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\xi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In physical chemistry, the "Extent of Reaction" is a quantity that measures the extent in which the reaction proceeds.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ExtentOfReaction`),
      namedNode(`${rdfs}label`),
      literal(`Extent of Reaction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A quantity of propellant, at a nominal mixture ratio, along with fuel bias that is set aside from total propellant loaded to cover for statistical variations of flight hardware characteristics and environment conditions on the day of launch. The launch vehicle is designed to accommodate the maximum FPR loading.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Flight Performance Reserve Propellant Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${skos}altLabel`),
      literal(`FPR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An additional quantity of fuel to ensure depletion of high-weight oxidizer before fuel for systems with high-oxidizer mixing ratios (e.g., 6:1). This practice allows for more efficient propellant utilization. Denoted as a percentage.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${rdfs}label`),
      literal(`Fuel Bias`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FUEL-BIAS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Four_factor_formula`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fast Fission Factor" in an infinite medium, is the ratio of the mean number of neutrons produced by fission due to neutrons of all energies to the mean number of neutrons produced by fissions due to thermal neutrons only.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FastFissionFactor`),
      namedNode(`${rdfs}label`),
      literal(`Fast Fission Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heavy_fermion`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${qudt}symbol`),
      literal(`k_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${rdfs}label`),
      literal(`Fermi Angular Wavenumber`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiAngularWavenumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fermi_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fermi Energy" in a metal is the highest occupied energy level at zero thermodynamic temperature.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Fermi Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fermi_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(T_F = \\frac{E_F}{k}\\), where \\(E_F\\) is the Fermi energy and \\(k\\) is the Boltzmann constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fermi Temperature" is the temperature associated with the Fermi energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FermiTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Fermi Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${rdfs}label`),
      literal(`Final Or Current Vehicle Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FinalOrCurrentVehicleMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FBM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}STR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Standard`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TBSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The first moment of area is the summation of area times distance to an axis. It is a measure of the distribution of the area of a shape in relationship to an axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${rdfs}label`),
      literal(`First Moment of Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstMomentOfArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Volume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mass ratio for the first stage of a multistage launcher.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${qudt}symbol`),
      literal(`R_1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${rdfs}label`),
      literal(`First Stage Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FirstStageMassRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A time that quantifies how long its takes to transform 50% of a substance's total concentration from any concentration point in time in fish via whole body metabolic reactions.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${rdfs}label`),
      literal(`Fish Biotransformation Half Life`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FishBiotransformationHalfLife`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${qudt}symbol`),
      literal(`R/H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionCoreRadiusToHeightRatio`),
      namedNode(`${rdfs}label`),
      literal(`Fission Core Radius To Height Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Fission Fuel Utilization Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionFuelUtilizationFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The number of fission neutrons produced per absorption in the fuel.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Fission Multiplication Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FissionMultiplicationFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A temperature that is the lowest one at which the vapors of a volatile material will ignite if exposed to an ignition source.  It is frequently used to characterize fire hazards and distinguish different flammable fuels.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${rdfs}label`),
      literal(`Flash Point Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlashPoint`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Flight path angle is defined in two different ways. To the aerodynamicist, it is the angle between the flight path vector (where the airplane is going) and the local atmosphere. To the flight crew, it is normally known as the angle between the flight path vector and the horizon, also known as the climb (or descent) angle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${rdfs}label`),
      literal(`Flight Path Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FlightPathAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Flux describes any effect that appears to pass or travel (whether it actually moves or not) through a surface or substance. [Wikipedia]`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Flux`),
      namedNode(`${rdfs}label`),
      literal(`Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${dcterms}description`),
      literal(`"Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton's Second Law as \\(F = m \\times a \\), where \\(F\\) is force, \\(m\\) is mass and \\(a\\) is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(F = \\frac{dp}{dt}\\), where \\(F\\) is the resultant force acting on a body, \\(p\\) is momentum of a body, and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}symbol`),
      literal(`F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Force`),
      namedNode(`${rdfs}label`),
      literal(`Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://wiki.answers.com/Q/What_is_magnitude_of_force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${rdfs}label`),
      literal(`Force Magnitude`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(`${rdfs}label`),
      literal(`Force per Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/force+per+unit+area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}outOfScope`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(`${rdfs}label`),
      literal(`Force Per Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerAreaTime`),
      namedNode(`${rdfs}label`),
      literal(`Force Per Area Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${dcterms}description`),
      literal(`The electric field depicts the force exerted on other electrically charged objects by the electrically charged particle the field is surrounding. The electric field is a vector field with SI units of newtons per coulomb (\\(N C^{-1}\\)) or, equivalently, volts per metre (\\(V m^{-1}\\) ). The SI base units of the electric field are \\(kg m s^{-3} A^{-1}\\). The strength or magnitude of the field at a given point is defined as the force that would be exerted on a positive test charge of 1 coulomb placed at that point`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electric_field`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Force per Electric Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(`${rdfs}label`),
      literal(`Force per Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${dcterms}description`),
      literal(`"Frequency" is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, \\(\nu\\) is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}failures-in-time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(f = 1/T\\), where \\(T\\) is a period.

Alternatively,

\\(\nu = 1/T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\nu, f\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${rdfs}label`),
      literal(`Frequency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Frequency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Friction" is the force of two surfaces In contact, or the force of a medium acting on a moving object (that is air on an aircraft). When contacting surfaces move relative to each other, the friction between the two objects converts kinetic energy into thermal energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${qudt}url`),
      literal(`http://wiki.answers.com/Q/What_is_the_symbol_of_friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${rdfs}label`),
      literal(`Friction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Friction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${qudt}url`),
      literal(`http://wiki.answers.com/Q/What_is_the_symbol_of_friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Friction Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fugacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tilde{p}_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fugacity" of a real gas is an effective pressure which replaces the true mechanical pressure in accurate chemical equilibrium calculations. It is equal to the pressure of an ideal gas which has the same chemical potential as the real gas.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Fugacity`),
      namedNode(`${rdfs}label`),
      literal(`Fugacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.matter.org.uk/diffraction/geometry/lattice_vectors.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fundamental Lattice vector" are fundamental translation vectors for the crystal lattice.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${qudt}symbol`),
      literal(`a_1, a_2, a_3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${rdfs}label`),
      literal(`Fundamental Lattice vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalLatticeVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Reciprocal_lattice`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Fundamental Reciprocal Lattice Vector" are fundamental, or primary, translation vectors the reciprocal lattice.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${qudt}symbol`),
      literal(`b_1, b_2, b_3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${rdfs}label`),
      literal(`Fundamental Reciprocal Lattice Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}FundamentalReciprocalLatticeVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularReciprocalLatticeVector`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Landé_g-factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g = \\frac{\\mu}{I\\mu_B}\\), where \\(\\mu\\) is the magnitude of magnetic dipole moment, \\(I\\) is the nuclear angular momentum quantum number, and \\(\\mu_B\\) is the Bohr magneton.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "g-Factor of Nucleus" is associated with the spin and magnetic moments of protons, neutrons, and many nuclei.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GFactorOfNucleus`),
      namedNode(`${rdfs}label`),
      literal(`g-Factor of Nucleus`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The sum of a rocket's inert mass and usable fluids and gases at sea level.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Maximum_Takeoff_Weight`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${rdfs}label`),
      literal(`Gross Lift-Off Weight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GROSS-LIFT-OFF-WEIGHT`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gain`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A general term used to denote an increase in signal power or signal strength in transmission from one point to another. Gain is usually expressed in decibels and is widely used to denote transducer gain.  An increase or amplification. In radar there are two general usages of the term: (a) antenna gain, or gain factor, is the ratio of the power transmitted along the beam axis to that of an isotropic radiator transmitting the same total power; (b) receiver gain, or video gain, is the amplification given a signal by the receiver.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${rdfs}label`),
      literal(`Gain`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gain`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Band_gap`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Gap Energy" is the difference in energy between the lowest level of conduction band and the highest level of valence band. It is an energy range in a solid where no electron states can exist.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Gap Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://learn.gencore.bio.nyu.edu/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The abundance of each gene family in the community. Gene families are groups of evolutionarily-related protein-coding sequences that often perform similar functions. Gene family abundance is reported in RPK (reads per kilobase) units to normalize for gene length.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${rdfs}label`),
      literal(`Gene Family Abundance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneFamilyAbundance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Generalized_coordinates`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q_i\\), where \\(q_i\\) is one of the coordinates that is used to describe the position of the system under consideration, and \\(N\\) is the lowest number of coordinates necessary to fully define the position of the system.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Generalized Coordinates refers to the parameters that describe the configuration of the system relative to some reference configuration. These parameters must uniquely define the configuration of the system relative to the reference configuration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${qudt}symbol`),
      literal(`q_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedCoordinate`),
      namedNode(`${rdfs}label`),
      literal(`Generalized Coordinate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Generalized_forces`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\delta A = \\sum Q_i\\delta q_i\\), where \\(A\\) is work and \\(q_i\\) is a generalized coordinate.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Generalized Forces find use in Lagrangian mechanics, where they play a role conjugate to generalized coordinates.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${qudt}symbol`),
      literal(`Q_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedForce`),
      namedNode(`${rdfs}label`),
      literal(`Generalized Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(p_i = \\frac{\\partial L}{\\partial \\dot{q_i}}\\), where \\(L\\) is the Langrange function and \\(\\dot{q_i}\\) is a generalized velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Generalized Momentum, also known as the canonical or conjugate momentum, extends the concepts of both linear momentum and angular momentum. To distinguish it from generalized momentum, the product of mass and velocity is also referred to as mechanical, kinetic or kinematic momentum.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${qudt}symbol`),
      literal(`p_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Generalized Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Generalized_coordinates`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\dot{q_i} = \\frac{dq_i}{dt}\\), where \\(q_i\\) is the generalized coordinate and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\dot{q_i}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Generalized Velocities are the time derivatives of the generalized coordinates of the system.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GeneralizedVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Generalized Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Thermodynamics`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G = H - T \\cdot S\\), where \\(H\\) is enthalpy, \\(T\\) is thermodynamic temperature and \\(S\\) is entropy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Gibbs Energy} is one of the potentials are used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. \\textit{Internal Energy} is the internal energy of the system, \\textit{Enthalpy} is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name \\textit{Gibbs Free Energy" is also used.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Gibbs Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Partition_function_(statistical_mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Xi = \\sum_{N_A, N_B, ...} Z(N_A, N_B, ...) \\cdot \\lambda_A^{N_A} \\cdot \\lambda_B^{N_B} \\cdot ...\\), where \\(Z(N_A, N_B, ...)\\) is the canonical partition function for the given number of particles \\(A, B, ...,\\), and \\(\\lambda_A, \\lambda_B, ...\\) are the absolute activities of particles \\(A, B, ...\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Xi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An "Grand Canonical Partition Function" for a grand canonical ensemble, a system that can exchange both heat and particles with the environment, which has a constant temperature and a chemical potential.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${rdfs}label`),
      literal(`Grand Canonical Partition Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrandCanonicalPartitionFunction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/gravitational+attraction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The force of attraction between all masses in the universe; especially the attraction of the earth's mass for bodies near its surface; the more remote the body the less the gravity; the gravitation between two bodies is proportional to the product of their masses and inversely proportional to the square of the distance between them.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${rdfs}label`),
      literal(`Gravitational Attraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GravitationalAttraction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_API`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}baseSIUnitDimensions`),
      literal(`\\(qkdv:A0E0L0I0M0H0T0D1\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/API_gravity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The American Petroleum Institute gravity, or API gravity, is a measure of how heavy or light a petroleum liquid is compared to water: if its API gravity is greater than 10, it is lighter and floats on water; if less than 10, it is heavier and sinks.

API gravity is thus an inverse measure of a petroleum liquid's density relative to that of water (also known as specific gravity). It is used to compare densities of petroleum liquids. For example, if one petroleum liquid is less dense than another, it has a greater API gravity. Although API gravity is mathematically a dimensionless quantity (see the formula below), it is referred to as being in 'degrees'. API gravity is graduated in degrees on a hydrometer instrument. API gravity values of most petroleum liquids fall between 10 and 70 degrees.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${rdfs}label`),
      literal(`API Gravity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Gravity_API`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Speed_of_sound`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(c_g = \\frac{d\\omega}{dk}\\), where \\(\\omega\\) is the angular frequency and \\(k\\) is angular wavenumber.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In a dispersive medium sound speed is a function of sound frequency, through the dispersion relation. The spatial and temporal distribution of a propagating disturbance will continually change. The group speed of sound describes the propagation of the disturbance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${rdfs}label`),
      literal(`Group Speed of Sound`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GroupSpeedOfSound`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C_GROWING_CEREAL-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The sum of excess temperature over 5.5°C, where the temperature is the mean of the minimum and maximum atmospheric temperature in a day. This measure is appropriate for most cereal crops.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}qudt-extension`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${rdfs}label`),
      literal(`Growing Degree Days (Cereals)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GrowingDegreeDay_Cereal`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Grüneisen_parameter`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\gamma = \\frac{\\alpha_V}{x_T c_V\\rho}\\), where \\(\\alpha_V\\) is the cubic expansion coefficient, \\(x_T\\) is isothermal compressibility, \\(c_V\\) is specific heat capacity at constant volume, and \\(\\rho\\) is mass density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Gruneisen Parameter" named after Eduard Grüneisen, describes the effect that changing the volume of a crystal lattice has on its vibrational properties, and, as a consequence, the effect that changing temperature has on the size or dynamics of the lattice.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GruneisenParameter`),
      namedNode(`${rdfs}label`),
      literal(`Gruneisen Parameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_g}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Gustatory Threshold" are thresholds for classes of taste that can be detected by the human mouth and thresholds of sensitivity to foods, drinks and other substances.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GustatoryThreshold`),
      namedNode(`${rdfs}label`),
      literal(`Gustatory Threshold`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${dcterms}description`),
      literal(`"Gyromagnetic Ratio}, also sometimes known as the magnetogyric ratio in other disciplines, of a particle or system is the ratio of its magnetic dipole moment to its angular momentum, and it is often denoted by the symbol, \\(\\gamma\\). Its SI units are radian per second per tesla (\\(rad s^{-1} \\cdot T^{1}\\)) or, equivalently, coulomb per kilogram (\\(C \\cdot kg^{-1"\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Gyromagnetic_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Gyromagnetic_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = \\gamma J\\), where \\(\\mu\\) is the magnetic dipole moment, and \\(J\\) is the total angular momentum.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}GyromagneticRatio`),
      namedNode(`${rdfs}label`),
      literal(`Gyromagnetic Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Half-life`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Half-Life" is the average duration required for the decay of one half of the atoms or nuclei.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${qudt}symbol`),
      literal(`T_{1/2}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-Life`),
      namedNode(`${rdfs}label`),
      literal(`Half-life`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Half-value_layer`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Half-Value Thickness" is the thickness of the material at which the intensity of radiation entering it is reduced by one half.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${qudt}symbol`),
      literal(`d_{1/2}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${rdfs}label`),
      literal(`Half-Value Thickness`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Half-ValueThickness`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hall_effect`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`In an isotropic conductor, the relation between electric field strength, \\(E\\), and electric current density, \\(J\\) is \\(E = \\rho J + R_H(B X J)\\), where \\(\\rho\\) is resistivity, and \\(B\\) is magnetic flux density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Hall Coefficient" is defined as the ratio of the induced electric field to the product of the current density and the applied magnetic field.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`R_H, A_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HallCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Hall Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hamilton–Jacobi_equation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(H = \\sum p_i\\dot{q_i} - L\\), where \\(p_i\\) is a generalized momentum, \\(\\dot{q_i}\\) is a generalized velocity, and \\(L\\) is the Lagrange function.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Hamilton–Jacobi equation (HJE) is a necessary condition describing extremal geometry in generalizations of problems from the calculus of variations.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${qudt}symbol`),
      literal(`H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HamiltonFunction`),
      namedNode(`${rdfs}label`),
      literal(`Hamilton Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`HEP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${rdfs}label`),
      literal(`Head End Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeadEndPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BEAT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Heart_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.medterms.com/script/main/art.asp?articlekey=3674`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/oi/authority.20110803100354463`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The number of heartbeats per unit of time, usually per minute. The heart rate is based on the number of contractions of the ventricles (the lower chambers of the heart). The heart rate may be too fast (tachycardia) or too slow (bradycardia). The average adult pulse rate at rest is 60–80 per minute, but exercise, injury, illness, and emotion may produce much faster rates.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeartRate`),
      namedNode(`${rdfs}label`),
      literal(`Heart Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}abbreviation`),
      literal(`heat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_MEAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_MEAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Heat`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Heat" is the energy transferred by a thermal process.  Heat can be measured in terms of the dynamical units of energy, as the erg, joule, etc., or in terms of the amount of energy required to produce a definite thermal change in some substance, as, for example, the energy required per degree to raise the temperature of a unit mass of water at some temperature ( calorie, Btu).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${rdfs}label`),
      literal(`Heat`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Heat`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${dcterms}description`),
      literal(`"Heat Capacity" (usually denoted by a capital \\(C\\), often with subscripts), or thermal capacity, is the measurable physical quantity that characterizes the amount of heat required to change a substance's temperature by a given amount. In the International System of Units (SI), heat capacity is expressed in units of joule(s) (J) per kelvin (K).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_capacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C = dQ/dT\\), where \\(Q\\) is amount of heat and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${qudt}symbol`),
      literal(`C_P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${rdfs}label`),
      literal(`Heat Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${dcterms}description`),
      literal(`The heat capacity ratio, or ratio of specific heats, is the ratio of the heat capacity at constant pressure (\\(C_P\\)) to heat capacity at constant volume (\\(C_V\\)). For an ideal gas, the heat capacity is constant with temperature (\\(\\theta\\)). Accordingly we can express the enthalpy as \\(H = C_P*\\theta\\) and the internal energy as \\(U = C_V \\cdot \\theta\\). Thus, it can also be said that the heat capacity ratio is the ratio between enthalpy and internal energy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Heat_capacity_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_capacity_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${rdfs}label`),
      literal(`Heat Capacity Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatCapacityRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${dcterms}description`),
      literal(`The rate of heat flow between two systems is measured in watts (joules per second). The formula for rate of heat flow is \\(\\bigtriangleup Q / \\bigtriangleup t = -K \\times A \\times \\bigtriangleup T/x\\), where \\(\\bigtriangleup Q / \\bigtriangleup t\\) is the rate of heat flow; \\(-K\\) is the thermal conductivity factor; A is the surface area; \\(\\bigtriangleup T\\) is the change in temperature and \\(x\\) is the thickness of the material. \\(\\bigtriangleup  T/ x\\) is called the temperature gradient and is always negative because of the heat of flow always goes from more thermal energy to less).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}expression`),
      literal(`\\(heat-flow-rate\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Rate_of_heat_flow`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Heat Flow Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Heat Flux}\\) is the heat rate per unit area. In SI units, heat flux is measured in \\(W/m^2\\). Heat rate is a scalar quantity, while heat flux is a vectorial quantity. To define the heat flux at a certain point in space, one takes the limiting case where the size of the surface becomes infinitesimally small.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${rdfs}label`),
      literal(`Heat Flow Rate per Unit Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFlowRatePerUnitArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Heat Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatFluxDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Specific_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Heat_of_combustion`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/link/ifcheatingvaluemeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The heating value (or energy value or calorific value) of a substance, usually a fuel or food (see food energy), is the amount of heat released during the combustion of a specified amount of it. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdfs}label`),
      literal(`Calorific Value`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdfs}label`),
      literal(`Energy Value`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${rdfs}label`),
      literal(`Heating Value`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HeatingValue`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}abbreviation`),
      literal(`height`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Height`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_CGS-EMU_L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_CGS-ESU_L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_CGS-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_Planck-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_SI-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_USCUSTOMARY-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Height`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Height" is the measurement of vertical distance, but has two meanings in common use. It can either indicate how "tall" something is, or how "high up" it is.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${qudt}symbol`),
      literal(`h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${rdfs}label`),
      literal(`Height`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Height`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Helmholtz Energy}\\) is one of the potentials are used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. \\(\\textit{Internal Energy}\\) is the internal energy of the system, \\(\\textit{Enthalpy}\\) is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name \\(\\textit{Helmholz Free Energy}\\) is also used.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Thermodynamics`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(H = U - T \\cdot S\\), where \\(U\\) is internal energy, \\(T\\) is thermodynamic temperature and \\(S\\) is entropy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Helmholtz Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM-M3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A quantity kind that is a proportionality constant that relates the partial pressure of a gas above a liquid and the concentration of the gas dissolved in the liquid.  The numerator contains the gaseous concentration and the denominator contains the liquid concentration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HenrysLawVolatilityConstant`),
      namedNode(`${rdfs}label`),
      literal(`Henry's Law Volatility Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Hole Density" is the number of holes per volume in a valence band.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${rdfs}label`),
      literal(`Hole Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HoleDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Component of a projectile's velocity, which acts parallel to the ground and does not lift the projectile in the air.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_{X}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Horizontal Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HorizontalVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Hyperfine_structure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Hyperfine Structure Quantum Number" is a quantum number of an atom describing inclination of the nuclear spin with respect to a quantization axis given by the magnetic field produced by the orbital electrons.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Hyperfine Structure Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}HyperfineStructureQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The sum of the vehicle dry mass, residual fluids and gasses, personnel and personnel provisions, and cargo.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Inert Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}INERT-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${rdfs}label`),
      literal(`Ignition interval time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IgnitionIntervalTime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LUX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PHOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Illuminance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Illuminance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_v = \\frac{d\\Phi}{dA}\\), where \\(d\\Phi\\) is the luminous flux incident on an element of the surface with area \\(dA\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of the intensity of the incident light, wavelength-weighted by the luminosity function to correlate with human brightness perception.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${rdfs}label`),
      literal(`Illuminance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Illuminance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electrical_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electrical_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-43`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\underline{Z} = \\underline{U} / \\underline{I}\\), where \\(\\underline{U}\\) is the voltage phasor and \\(\\underline{I}\\) is the electric current phasor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\underline{Z}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Impedance" is the measure of the opposition that a circuit presents to the passage of a current when a voltage is applied. In quantitative terms, it is the complex ratio of the voltage to the current in an alternating current (AC) circuit. Impedance extends the concept of resistance to AC circuits, and possesses both magnitude and phase, unlike resistance, which has only magnitude. When a circuit is driven with direct current (DC), there is no distinction between impedance and resistance; the latter can be thought of as impedance with zero phase angle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdfs}label`),
      literal(`Impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrentPhasor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Impedance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Incidence_(epidemiology)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In epidemiology, incidence is a measure of the probability of occurrence of a given medical condition in a population within a specified period of time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${rdfs}label`),
      literal(`Incidence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Incidence`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Cumulative_incidence`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Incidence_(epidemiology)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Incidence proportion (also known as cumulative incidence) is the number of new cases within a specified time period divided by the size of the population initially at risk. For example, if a population initially contains 1,000 non-diseased persons and 28 develop a condition over two years of observation, the incidence proportion is 28 cases per 1,000 persons per two years, i.e. 2.8% per two years.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${rdfs}label`),
      literal(`Incidence Proportion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Incidence_(epidemiology)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The incidence rate is a measure of the frequency with which a disease or other incident occurs over a specified time period. It is also known as the incidence density rate or person-time incidence rate, when the denominator is the combined person-time of the population at risk (the sum of the time duration of exposure across all persons exposed)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${rdfs}label`),
      literal(`Incidence Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}IncidenceProportion`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IncidenceRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Inductance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-19`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L =\\frac{\\Psi}{I}\\), where \\(I\\) is an electric current in a thin conducting loop, and \\(\\Psi\\) is the linked flux caused by that electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Inductance" is an electromagentic quantity that characterizes a circuit's resistance to any change of electric current; a change in the electric current through induces an opposing electromotive force (EMF). Quantitatively, inductance is proportional to the magnetic flux per unit of electric current.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${rdfs}label`),
      literal(`Inductance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Inductance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Four_factor_formula`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(k_\\infty\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Infinite Multiplication Factor" is the multiplication factor for an infinite medium or for an infinite repeating lattice.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Infinite Multiplication Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InfiniteMultiplicationFactor`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}EffectiveMultiplicationFactor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BIT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERLANG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExbiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GibiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HART`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KibiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SHANNON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://simple.wikipedia.org/wiki/Information_entropy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Information Entropy is a concept from information theory. It tells how much information there is in an event. In general, the more uncertain or random the event is, the more information it will contain. The concept of information entropy was created by a mathematician. He was named Claude Elwood Shannon. It has applications in many areas, including lossless data compression, statistical inference, cryptography and recently in other disciplines as biology, physics or machine learning.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${rdfs}label`),
      literal(`Information Entropy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HART-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NAT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SHANNON-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Information flow rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${rdfs}label`),
      literal(`Initial Expansion Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialExpansionRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${rdfs}label`),
      literal(`Initial Nozzle Throat Diameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialNozzleThroatDiameter`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_{o}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${rdfs}label`),
      literal(`Initial Vehicle Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVehicleMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The velocity of a moving body at starting; especially, the velocity of a projectile as it leaves the mouth of a firearm from which it is discharged.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_{i}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Initial Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InitialVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${dcterms}description`),
      literal(`"Instantaneous Power}, for a two-terminal element or a two-terminal circuit with terminals A and B, is the product of the voltage \\(u_{AB}\\) between the terminals and the electric current i in the element or circuit: \\(p = \\)u_{AB} \\cdot i\\(, where \\)u_{AB" is the line integral of the electric field strength from A to B, and where the electric current in the element or circuit is taken positive if its direction is from A to B and negative in the opposite case.  For an n-terminal circuit, it is the sum of the instantaneous powers relative to the n - 1 pairs of terminals when one of the terminals is chosen as a common terminal for the pairs. For a polyphase element, it is the sum of the instantaneous powers in all phase elements of a polyphase element.  For a polyphase line consisting of m line conductors and one neutral conductor, it is the sum of the m instantaneous powers expressed for each line conductor by the product of the polyphase line-to-neutral voltage and the corresponding line current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Power`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-30`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-31`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=141-02-14`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=141-03-10`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(p = ui\\), where \\(u\\) is instantaneous voltage and \\(i\\) is instantaneous electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${rdfs}label`),
      literal(`Instantaneous Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Internal_conversion_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "InternalConversionFactor" describes the rate of internal conversion. It is the ratio of the number of internal conversion electrons to the number of gamma quanta emitted by the radioactive atom in a given transition.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalConversionFactor`),
      namedNode(`${rdfs}label`),
      literal(`InternalConversionFactor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}abbreviation`),
      literal(`int-energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Internal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Internal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For a closed thermodynamic system, \\(\\Delta U = Q + W\\), where \\(Q\\) is amount of heat transferred to the system and \\(W\\) is work done on the system provided that no chemical reactions occur.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Internal Energy" is simply its energy. "internal" refers to the fact that some energy contributions are not considered. For instance, when the total system is in uniform motion, it has kinetic energy. This overall kinetic energy is never seen as part of the internal energy; one could call it external energy. Or, if the system is at constant non-zero height above the surface the Earth, it has constant potential energy in the gravitational field of the Earth. Gravitational energy is only taken into account when it plays a role in the phenomenon of interest, for instance in a colloidal suspension, where the gravitation influences the up- downward motion of the small particles comprising the colloid. In all other cases, gravitational energy is assumed not to contribute to the internal energy; one may call it again external energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Internal Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}GibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}HelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(np = n_i^2\\), where \\(n\\) is electron density and \\(p\\) is hole density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Intinsic Carrier Density" is proportional to electron and hole densities.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${rdfs}label`),
      literal(`Intinsic Carrier Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IntinsicCarrierDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseAmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Inverse amount of substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-GigaEV2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-4I0M-2H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${dcterms}description`),
      literal(`Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre (\\(m^{-1}\\)), the reciprocal centimetre or inverse centimetre (\\(cm^{-1}\\)), and, in optics, the dioptre.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DPI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MESH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Reciprocal_length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLength`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseLengthTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Length Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-PER-V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-WB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMagneticFlux`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Magnetic Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PlanckMass2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-2H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-FARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePermittivity`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Permittivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InversePressure`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}InverseEnergy_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-4I0M-2H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareEnergy`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}InverseMass_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-2H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareMass`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseSquareTime`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTimeTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Time Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseTime_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Square Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_SI-m-3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(`${rdfs}label`),
      literal(`Inverse Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}IonDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Ion Concentration" is the number of ions per unit volume. Also known as ion density.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonConcentration`),
      namedNode(`${rdfs}label`),
      literal(`Ion Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BIOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An ion current is the influx and/or efflux of ions through an ion channel.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`j`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Ion Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonCurrent`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/ion-density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(n^+ = \\frac{N^+}{V}\\), \\(n^- = \\frac{N^-}{V}\\)

where \\(N^+\\) and \\(N^-\\) are the number of positive and negative ions, respectively, in a 3D domain with volume \\(V\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Ion Density" is the number of ions per unit volume. Also known as ion concentration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${qudt}symbol`),
      literal(`N, n^+, n^-`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${rdfs}label`),
      literal(`Ion Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ion_transport_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(t_B = \\frac{i_B}{i}\\), where \\(i_B\\) is the electric current carried by the ion \\(B\\) and \\(i\\) is the total electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Ion Transport Number" is a quantity which indicates the different contribution of ions to the electric current in electrolytes due to different electrical mobility.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${qudt}symbol`),
      literal(`t_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${rdfs}label`),
      literal(`Ion Transport Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonTransportNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ElementaryCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YoctoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YottaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZeptoC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ZettaC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The total charge of an ion. The charge of an electron; the charge of any ion is equal to this electron charge in magnitude, or is an integral multiple of it.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${qudt}symbol`),
      literal(`q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${rdfs}label`),
      literal(`Ionic Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicCharge`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionic_strength`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I = \\frac{1}{2} \\sum z_i^2 b_i\\), where the summation is carried out over all ions with charge number \\(z_i\\) and molality \\(m_i\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Ionic Strength" of a solution is a measure of the concentration of ions in that solution.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonicStrength`),
      namedNode(`${rdfs}label`),
      literal(`Ionic Strength`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionization_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Ionization Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IonizationEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}abbreviation`),
      literal(`W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Irradiance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E = \\frac{d\\Phi}{dA}\\), where \\(d\\Phi\\) is the radiant flux incident on an element of the surface with area \\(dA\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Irradiance and Radiant Emittance are radiometry terms for the power per unit area of electromagnetic radiation at a surface. "Irradiance" is used when the electromagnetic radiation is incident on the surface. "Radiant emmitance" (or "radiant exitance") is used when the radiation is emerging from the surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${rdfs}label`),
      literal(`Irradiance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Irradiance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Compressibility`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varkappa_S = \\frac{1}{V}\\left (\\frac{\\partial V}{\\partial p} \\right )_S\\), where \\(V\\) is volume, \\(p\\) is \\(pressure\\), and \\(S\\) is entropy,`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varkappa_S\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Isentropic compressibility is the extent to which a material reduces its volume when it is subjected to compressive stresses at a constant value of entropy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(`${rdfs}label`),
      literal(`Isentropic Compressibility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${dcterms}description`),
      literal(`Isentropic exponent is a variant of "Specific Heat Ratio Capacities}. For an ideal gas \\textit{Isentropic Exponent"\\(, \\varkappa\\). is equal to \\(\\gamma\\), the ratio of its specific heat capacities \\(c_p\\) and \\(c_v\\) under steady pressure and volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Specific_heat_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Compressibility`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varkappa = -\\frac{V}{p}\\left \\{  \\frac{\\partial p}{\\partial  V}\\right \\}_S\\), where \\(V\\) is volume, \\(p\\) is pressure, and \\(S\\) is entropy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varkappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${rdfs}label`),
      literal(`Isentropic Exponent`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}IsentropicCompressibility`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MILLE-PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Compressibility`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varkappa_T = \\frac{1}{V}\\left (\\frac{\\partial V}{\\partial p} \\right )_T\\), where \\(V\\) is volume, \\(p\\) is \\(pressure\\), and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varkappa_T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The isothermal compressibility defines the rate of change of system volume with pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${rdfs}label`),
      literal(`Isothermal compressibility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalCompressibility`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}InversePressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${dcterms}description`),
      literal(`"Isothermal Moisture Capacity" is the capacity of a material to absorb moisture in the Effective Moisture Penetration Depth (EMPD) model.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://bigladdersoftware.com/epx/docs/8-4/engineering-reference/effective-moisture-penetration-depth-empd.html#empd-nomenclature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${rdfs}label`),
      literal(`Isothermal Moisture Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}IsothermalMoistureCapacity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kerma_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For indirectly ionizing (uncharged) particles, \\(K= \\frac{dE_{tr}}{dm}\\), where \\(dE_{tr}\\) is the mean sum of the initial kinetic energies of all the charged ionizing particles liberated by uncharged ionizing particles in an element of matter, and \\(dm\\) is the mass of that element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Kerma" is the sum of the initial kinetic energies of all the charged particles liberated by uncharged ionizing radiation (i.e., indirectly ionizing radiation such as photons and neutrons) in a sample of matter, divided by the mass of the sample.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Kerma`),
      namedNode(`${rdfs}label`),
      literal(`Kerma`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Half-value_layer`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\dot{K} = \\frac{dK}{dt}\\), where \\(K\\) is the increment of kerma during time interval with duration \\(t\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\dot{K}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Kerma Rate" is the kerma per unit time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KermaRate`),
      namedNode(`${rdfs}label`),
      literal(`Kerma Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${dcterms}description`),
      literal(`The ratio of the viscosity of a liquid to its density. Viscosity is a measure of the resistance of a fluid which is being deformed by either shear stress or tensile stress. In many situations, we are concerned with the ratio of the inertial force to the viscous force (that is the Reynolds number), the former characterized by the fluid density \\(\\rho\\). This ratio is characterized by the kinematic viscosity (Greek letter \\(\nu\\)), defined as follows:  \\(\nu = \\mu / \\rho\\). The SI unit of \\(\nu\\) is \\(m^{2}/s\\). The SI unit of \\(\nu\\) is \\(kg/m^{1}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiST`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ST`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Viscosity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Viscosity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\nu = \\frac{\\eta}{\\rho}\\), where \\(\\eta\\) is dynamic viscosity and \\(\\rho\\) is mass density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\nu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${rdfs}label`),
      literal(`Kinematic Viscosity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KinematicViscosity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Viscosity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Kinetic Energy}\\) is the energy which a body possesses as a consequence of its motion, defined as one-half the product of its mass \\(m\\) and the square of its speed \\(v\\), \\( \\frac{1}{2} mv^{2} \\). The kinetic energy per unit volume of a fluid parcel is the \\( \\frac{1}{2}  p v^{2}\\) , where \\(p\\) is the density and \\(v\\) the speed of the parcel. See potential energy. For relativistic speeds the kinetic energy is given by \\(E_k = mc^2 - m_0 c^2\\), where \\(c\\) is the velocity of light in a vacuum, \\(m_0\\) is the rest mass, and \\(m\\) is the moving mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Kinetic_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_ISO-L2MT-2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Kinetic_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(T = \\frac{mv^2}{2}\\), where \\(m\\) is mass and \\(v\\) is speed.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`KE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Kinetic_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Kinetic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}KineticEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Lagrangian`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=113-03-76`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L(q_i, \\dot{q_i}) = T(q_i, \\dot{q_i}) - V(q_i)\\), where \\(T\\) is kinetic energy, \\(V\\) is potential energy, \\(q_i\\) is a generalized coordinate, and \\(\\dot{q_i}\\) is a generalized velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Lagrange Function is a function that summarizes the dynamics of the system.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LagrangeFunction`),
      namedNode(`${rdfs}label`),
      literal(`Lagrange Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ginzburg–Landau_theory`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`At zero thermodynamic temperature \\(\\kappa = \\frac{\\lambda_L}{(\\varepsilon\\sqrt{2})}\\), where \\(\\lambda_L\\) is London penetration depth and \\(\\varepsilon\\) is coherence length.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\kappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Landau-Ginzburg Number", also known as the Ginzburg-Landau parameter, describes the relationship between London penetration depth and coherence length.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${rdfs}label`),
      literal(`Landau-Ginzburg Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Landau-GinzburgNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/G-factor_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Landé_g-factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g = \\frac{\\mu}{J\\mu_B}\\), where \\(\\mu\\) is the magnitude of magnetic dipole moment, \\(J\\) is the total angular momentum quantum number, and \\(\\mu_B\\) is the Bohr magneton.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Lande g-Factor" is a particular example of a g-factor, namely for an electron with both spin and orbital angular momenta. It is named after Alfred Landé, who first described it in 1921.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LandeGFactor`),
      namedNode(`${rdfs}label`),
      literal(`Lande g-Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Larmor_precession#Larmor_frequency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\omega_L = \\frac{e}{2m_e}B\\), where \\(e\\) is the elementary charge, \\(m_e\\) is the rest mass of electron, and \\(B\\) is the magnetic flux density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\omega_L\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Larmor Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${rdfs}label`),
      literal(`Larmor Angular Frequency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LarmorAngularFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.matter.org.uk/diffraction/geometry/lattice_vectors.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Lattice Plane Spacing" is the distance between successive lattice planes.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${rdfs}label`),
      literal(`Lattice Plane Spacing`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticePlaneSpacing`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.matter.org.uk/diffraction/geometry/lattice_vectors.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Lattice Vector" is a translation vector that maps the crystal lattice on itself.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${rdfs}label`),
      literal(`Lattice Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LatticeVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}expression`),
      literal(`\\(leakage-factor\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=221-04-12`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = 1 - k^2\\), where \\(k\\) is the coupling factor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Leakage Factor" is the ratio of the total magnetic flux to the useful magnetic flux of a magnetic circuit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LeakageFactor`),
      namedNode(`${rdfs}label`),
      literal(`Leakage Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${qudt}symbol`),
      literal(`l`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Length`),
      namedNode(`${rdfs}label`),
      literal(`Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthByForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthByForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthByForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthByForce`),
      namedNode(`${rdfs}label`),
      literal(`Length Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV-FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Length Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMass`),
      namedNode(`${rdfs}label`),
      literal(`Length Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-M-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthMolarEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Length Molar Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPerUnitElectricCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPerUnitElectricCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPerUnitElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPerUnitElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPerUnitElectricCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Length per Unit Electric Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${rdfs}label`),
      literal(`Length Percentage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthPercentage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${rdfs}label`),
      literal(`Length Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Length Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-SEC-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H1T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LengthTemperatureTime`),
      namedNode(`${rdfs}label`),
      literal(`Length Temperature Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.scribd.com/doc/51548050/149/Lethargy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(u = \\ln(\\frac{E_0}{E})\\), where \\(E_0\\) is a reference energy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Lethargy" is a dimensionless logarithm of the ratio of the energy of source neutrons to the energy of neutrons after a collision.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Lethargy`),
      namedNode(`${rdfs}label`),
      literal(`Lethargy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/Level+Width`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Gamma = \\frac{\\hbar}{\\tau}\\), where \\(\\hbar\\) is the reduced Planck constant and \\(\\tau\\) is the mean lifetime.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Level Width" is the uncertainty in the energy of a quantum-mechanical system having discrete energy levels in a state that is not strictly stationary. The system may be an atom, a molecule, or an atomic nucleus.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LevelWidth`),
      namedNode(`${rdfs}label`),
      literal(`Level Width`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The lift coefficient is a dimensionless coefficient that relates the lift generated by a lifting body, the dynamic pressure of the fluid flow around the body, and a reference area associated with the body.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`C_{L}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Lift Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The lift force, lifting force or simply lift is the sum of all the forces on a body that force it to move perpendicular to the direction of flow.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${rdfs}label`),
      literal(`Lift Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiftForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha(\\lambda) = \\frac{1}{\\Phi_\\lambda(\\lambda)}\\frac{d\\Phi_\\lambda(\\lambda)}{dl}\\), where \\(\\frac{d\\Phi}{\\Phi}\\) is the relative decrease, caused by absorption, in the spectral radiant flux \\(\\Phi\\) of a collimated beam of electromagnetic radiation corresponding to the wavelength \\(\\lambda\\) during traversal of an infinitesimal layer of a medium and \\(dl\\) is the length traversed.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Linear Absorption Coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAbsorptionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Linear Absorption Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Acceleration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${rdfs}label`),
      literal(`Linear Acceleration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAcceleration`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = -\\frac{1}{J}\\frac{dJ}{dx}\\), where \\(J\\) is the magnitude of the current rate of a beam of particles parallel to the \\(x-direction\\).

Or:

\\(\\mu(\\lambda) = \\frac{1}{\\Phi_\\lambda(\\lambda)}\\frac{d\\Phi_\\lambda(\\lambda)}{dl}\\), where \\(\\frac{d\\Phi}{\\Phi}\\) is the relative decrease in the spectral radiant flux \\(\\Phi\\) of a collimated beam of electromagnetic radiation corresponding to the wavelength \\(\\lambda\\) during traversal of an infinitesimal layer of a medium and \\(dl\\) is the length traversed.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Linear Attenuation Coefficient", also called the attenuation coefficient,  narrow beam attenuation coefficient, or absorption coefficient, is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearAttenuationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Linear Attenuation Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM-PER-N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Linear Compressibility is a measure of the relative length change of a solid as a response to a normal force change.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearCompressibility`),
      namedNode(`${rdfs}label`),
      literal(`Linear Compressibility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Linear_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_l = \\frac{dm}{dl}\\), where \\(m\\) is mass and \\(l\\) is length.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_l\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearDensity`),
      namedNode(`${rdfs}label`),
      literal(`Linear Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.asknumbers.com/ElectricalConversion.aspx`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Linear Electric Linear Current" is the electric current per unit line.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Linear Electric Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${dcterms}description`),
      literal(`"Linear Electric Linear Current Density" is the electric current per unit length. Electric current, \\(I\\), through a curve \\(C\\) is defined as \\(I = \\int_C J _s \\times e_n\\), where \\(e_n\\) is a unit vector perpendicular to the surface and line vector element, and \\(dr\\) is the differential of position vector \\(r\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.asknumbers.com/ElectricalConversion.aspx`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J_s = \\rho_A v\\), where \\(\\rho_A\\) is surface density of electric charge and \\(v\\) is velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${qudt}symbol`),
      literal(`J_s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdfs}label`),
      literal(`Linear Electric Current Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricChargeSurfaceDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearElectricCurrentDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV-PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Linear_energy_transfer`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Linear_energy_transfer`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For ionizing charged particles, \\(L_\\Delta = \\frac{dE_\\Delta}{dl}\\), where \\(dE_\\Delta\\) is the mean energy lost in elctronic collisions locally to matter along a small path through the matter, minus the sum of the kinetic energies of all the electrons released with kinetic energies in excess of \\(\\Delta\\), and \\(dl\\) is the length of that path.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(L_\\Delta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(L_\\bigtriangleup\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Linear Energy Transfer"  (LET) is the linear density of energy lost by a charged ionizing particle travelling through matter.Typically, this measure is used to quantify the effects of ionizing radiation on biological specimens or electronic devices.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearEnergyTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Linear Energy Transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}expression`),
      literal(`\\(lnr-exp-coef\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_l = \\frac{1}{l} \\; \\frac{dl}{dT}\\), where \\(l\\) is \\(length\\) and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_l\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Linear Expansion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearExpansionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/schema/ifcmeasureresource/lexical/ifclinearforcemeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Another name for Force Per Length, used by the Industry Foundation Classes (IFC) standard.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${rdfs}label`),
      literal(`Linear Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${rdfs}label`),
      literal(`Streckenlast`, 'de'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionization#Classical_ionization`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(N_{il} = \\frac{1}{e}\\frac{dQ}{dl}\\), where \\(e\\) is the elementary charge and \\(dQ\\) is the average total charge of all positive ions produced over an infinitesimal element of the path with length \\(dl\\) by an ionizing charged particle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Linear Ionization"  is a description of how the ionization of an atom or molecule takes place. For example, an ion with a +2 charge can be created only from an ion with a +1 charge or a +3 charge. That is, the numerical charge of an atom or molecule must change sequentially, always moving from one number to an adjacent, or sequential, number. Using sequential ionization definition.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${qudt}symbol`),
      literal(`N_{il}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearIonization`),
      namedNode(`${rdfs}label`),
      literal(`Linear Ionization`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${dcterms}description`),
      literal(`Linear momentum is the quantity obtained by multiplying the mass of a body by its linear velocity. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.The SI unit for linear momentum is meter-kilogram per second (\\(m-kg/s\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV-PER-SpeedOfLight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Momentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}latexDefinition`),
      literal(`p = m\\upsilon`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Linear Momentum`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Momentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-M-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/schema/ifcmeasureresource/lexical/ifclinearstiffnessmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Stiffness is the extent to which an object resists deformation in response to an applied force. Linear Stiffness is the term used in the Industry Foundation Classes (IFC) standard.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${rdfs}label`),
      literal(`Linear Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${rdfs}label`),
      literal(`Streckenlast`, 'de'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStiffness`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Strain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Deformation_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\xi = \\frac{\\Delta l}{l_0}\\), where \\(\\Delta l\\) is the increase in length and \\(l_0\\) is the length in a reference state to be specified.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\xi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A strain is a normalized measure of deformation representing the displacement between particles in the body relative to a reference length.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${rdfs}label`),
      literal(`Linear Strain`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Strain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Strain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/linear_thermal_expansion`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion. Different coefficients of thermal expansion can be defined for a substance depending on whether the expansion is measured by: linear thermal expansion, area thermal expansion, or volumetric thermal expansion.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearThermalExpansion`),
      namedNode(`${rdfs}label`),
      literal(`Linear Thermal Expansion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${dcterms}description`),
      literal(`Linear Velocity, as the name implies deals with speed in a straight line, the units are often \\(km/hr\\) or \\(m/s\\) or \\(mph\\) (miles per hour). Linear Velocity (v) = change in distance/change in time, where \\(v = \\bigtriangleup d/\\bigtriangleup t\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://au.answers.yahoo.com/question/index?qid=20080319082534AAtrClv`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Linear Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${dcterms}description`),
      literal(`"Linked Flux" is defined as the path integral of the magnetic vector potential. This is the line integral of a magnetic vector potential \\(A\\) along a curve \\(C\\). The line vector element \\(dr\\) is the differential of position vector \\(r\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliWB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UnitPole`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Magnetic_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}expression`),
      literal(`\\(linked-flux\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-24`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199233991.001.0001/acref-9780199233991-e-1800`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Psi_m = \\int_C A \\cdot dr\\), where \\(A\\) is magnetic vector potential and \\(dr\\) is the vector element of the curve \\(C\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Psi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Psi_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${rdfs}label`),
      literal(`Linked Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LinkedFlux`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CUP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CUP_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_IMP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.ehow.com/facts_6371078_liquid-volume_.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Liquid volume is the volume of a given amount of liquid, that is, the amount of space a liquid takes up. There are a number of different units used to measure liquid volume, but most of them fall under either the metric system of measurement or the Imperial system of measurement.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${rdfs}label`),
      literal(`Liquid Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LiquidVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Volume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A dimensionless ratio that is the logarithm of the ratio of a compound's concentration within a two phase mixture of liquid octanol and gaseous air at equilibrium.  More simply, it is a comparison of the solubilities of the compound solute in these two immiscible substances.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Octanol Air Partition Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolAirPartitionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A dimensionless ratio that is the logarithm of the ratio of a compound's concentration within a two phase mixture of octanol and water at equilibrium.  More simply, it is a comparison of the solubilities of the compound solute in these two immiscible liquids.  This property is used to measure the lipophilicity and the hydrophilicity of a substance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Logarithm of Octanol Water Partition Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogOctanolWaterPartitionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G = \\log_{2}(f2/f1)\\), where \\(f1\\) and \\(f2 \\geq f1\\) are frequencies of two tones.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LogarithmicFrequencyInterval`),
      namedNode(`${rdfs}label`),
      literal(`Logarithmic frequency interval`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/London_penetration_depth`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}latexDefinition`),
      literal(`If an applied magnetic field is parallel to the plane surface of a semi-infinite superconductor, the field penetrates the superconductor according to the expression \\(B(x) = B(0) \\exp{(\\frac{-x}{\\lambda_L})}\\), where \\(B\\) is magnetic flux density and \\(x\\) is the distance from the surface.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"London Penetration Depth" characterizes the distance to which a magnetic field penetrates into a superconductor and becomes equal to 1/e times that of the magnetic field at the surface of the superconductor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${qudt}symbol`),
      literal(`λₗ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${rdfs}label`),
      literal(`London Penetration Depth`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LondonPenetrationDepth`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Long-Range Order Parameter" is the fraction of atoms in an Ising ferromagnet having magnetic moments in one direction, minus the fraction having magnetic moments in the opposite direction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${qudt}symbol`),
      literal(`R, s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Long-RangeOrderParameter`),
      namedNode(`${rdfs}label`),
      literal(`Long-Range Order Parameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V2-PER-K2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L4I0M2H-2T-6D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.matter.org.uk/diffraction/geometry/lattice_vectors.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L = \\frac{\\lambda}{\\sigma T}\\), where \\(\\lambda\\) is thermal conductivity, \\(\\sigma\\) is electric conductivity, and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Lorenz Coefficient" is part mof the Lorenz curve.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LorenzCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Lorenz Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\delta = \\arctan d\\), where \\(d\\) is loss factor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\delta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${rdfs}label`),
      literal(`Loss Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(d = \\frac{1}{Q}\\), where \\(Q\\) is quality factor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Loss Factor} is the inverse of \\textit{Quality Factor} and is the ratio of the \\textit{resistance} and modulus of \\textit{reactance".`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}label`),
      literal(`Loss Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Reactance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LossFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gamma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gs`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Lower Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for magnetic flux entering the superconductor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${qudt}symbol`),
      literal(`B_{c1}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Lower Critical Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CD-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CD-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}STILB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Luminance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L_v = \\frac{dI_v}{dA}\\), where \\(dI_v\\) is the luminous intensity of an element of the surface with the area \\(dA\\) of the orthogonal projection of this element on a plane perpendicular to the given direction.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction. It describes the amount of light that passes through or is emitted from a particular area, and falls within a given solid angle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${qudt}symbol`),
      literal(`L_v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Luminance`),
      namedNode(`${rdfs}label`),
      literal(`Luminance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LM-PER-W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${qudt}expression`),
      literal(`\\(lm/w\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_efficacy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(K = \\frac{\\Phi_v}{\\Phi}\\), where \\(\\Phi_v\\) is the luminous flux and \\(\\Phi\\) is the corresponding radiant flux.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Efficacy is the ratio of luminous flux (in lumens) to power (usually measured in watts). Depending on context, the power can be either the radiant flux of the source's output, or it can be the total electric power consumed by the source.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEfficacy`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Efficacy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LUX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PHOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Luminous Emittance" is the luminous flux per unit area emitted from a surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${qudt}symbol`),
      literal(`M_v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Emmitance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEmittance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LM-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Q_v = \\int_{0}^{\\Delta t}{\\Phi_v}{dt}\\), where \\(\\Phi_v\\) is the luminous flux occurring during the time interval with duration \\(\\Delta t\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Energy is the perceived energy of light. This is sometimes also called the quantity of light.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Q_v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Qv`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LUX-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Exposure_(photography)#Photometric_and_radiometric_exposure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Exposure is the time-integrated illuminance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}symbol`),
      literal(`H_v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${qudt}symbol`),
      literal(`Hv`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousExposure`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Exposure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Luminous_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Phi_v = K_m \\int_{0}^{\\infty}{\\Phi_\\lambda(\\lambda)}{V(\\lambda)d\\lambda}\\), where \\(K_m\\) is the maximum spectral luminous efficacy, \\(\\Phi_\\lambda(\\lambda)\\) is the spectral radiant flux, \\(V(\\lambda)\\) is the spectral luminous efficiency, and \\(\\lambda\\) is the wavelength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Flux or Luminous Power is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${qudt}symbol`),
      literal(`F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFlux`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${dcterms}description`),
      literal(`In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in \\(lux (lx)\\) or \\(lumens per square metre\\) (\\(cd \\cdot m^{-2}\\)). In the CGS system, the unit of illuminance is the \\(phot\\), which is equal to \\(10,000 lux\\). The \\(foot-candle\\) is a non-metric unit of illuminance that is used in photography.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LUX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PHOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Illuminance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxPerArea`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Flux per Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Flux Ratio (or Relative Luminous Flux or Relative Luminous Power) is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light. It is expressed as a percentage or fraction of full power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Flux Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Luminous_intensity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Luminous Intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle. The weighting is determined by the luminosity function, a standardized model of the sensitivity of the human eye to different wavelengths.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensity`),
      namedNode(`${rdfs}label`),
      literal(`Luminous Intensity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CD-PER-LM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/link/ifcluminousintensitydistributionmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`"Luminous Intensity Distribution" is a measure of the luminous intensity of a light source that changes according to the direction of the ray. It is normally based on some standardized distribution light distribution curves. Usually measured in Candela/Lumen (cd/lm) or (cd/klm).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}LuminousIntensityDistribution`),
      namedNode(`${rdfs}label`),
      literal(`Ion Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The minimum mass a propulsive system can deliver to a specified target or location. Most mass- delivered requirements have associated Delta-V requirements, effectively specifying the path between the two points.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${rdfs}label`),
      literal(`Mass Delivered`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-DELIVERED`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A factor applied to basic mass at the lowest level of design detail available based on type and maturity of hardware according to an approved MGA depletion schedule.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${rdfs}label`),
      literal(`Mass Growth Allowance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${skos}altLabel`),
      literal(`MGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-GROWTH-ALLOWANCE`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Requirement minus predicted value. Margin is used as a metric in risk management. Positive margin mitigates the risk of mass increases from requirements maturation and implementation, underestimated predicted system, or subsystem mass.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${rdfs}label`),
      literal(`Mass Margin`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-MARGIN`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Variation in predicted MP due to lack of definition, manufacturing variations, environment effects, or accuracy limitation of measuring devices.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MASS-PROPERTY-UNCERTAINTY`),
      namedNode(`${rdfs}label`),
      literal(`Mass Property Uncertainty`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${qudt}symbol`),
      literal(`I_{y}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${rdfs}label`),
      literal(`Moment of Inertia in the Y axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${skos}altLabel`),
      literal(`MOI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Y`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${qudt}symbol`),
      literal(`I_{z}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${rdfs}label`),
      literal(`Moment of Inertia in the Z axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${skos}altLabel`),
      literal(`MOI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MOMENT-OF-INERTIA_Z`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${dcterms}description`),
      literal(`"Mach Number" is a dimensionless quantity representing the speed of an object moving through air or other fluid divided by the local speed of sound. It is commonly used to represent the speed of an object when it is traveling close to or above the speed of sound. The Mach number is commonly used both with objects traveling at high speed in a fluid, and with high-speed fluid flows inside channels such as nozzles, diffusers or wind tunnels. As it is defined as a ratio of two speeds, it is a dimensionless number.`, namedNode(`${rdf}HTML`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MACH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mach_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mach_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31896`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Ma = \\frac{v_o}{c_o}\\), where \\(v_0\\) is speed, and \\(c_o\\) is speed of sound.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31896`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mach Number" is a dimensionless quantity representing the speed of an object moving through air or other fluid divided by the local speed of sound. It is commonly used to represent the speed of an object when it is traveling close to or above the speed of sound. The Mach number is commonly used both with objects traveling at high speed in a fluid, and with high-speed fluid flows inside channels such as nozzles, diffusers or wind tunnels. As it is defined as a ratio of two speeds, it is a dimensionless number.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${qudt}symbol`),
      literal(`Ma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${rdfs}label`),
      literal(`Mach Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MachNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${ns14}Mach_number`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sum = n_1\\sigma_1 + \\cdots + n_j\\sigma_j +\\), where \\(n_j\\) is the number density and \\(\\sigma_j\\) the cross-section for entities of type \\(j\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sum\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Macroscopic Cross-section" is the sum of the cross-sections for a reaction or process of a specified type over all atoms or other entities in a given 3D domain, divided by the volume of that domain.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Macroscopic Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicCrossSection`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_cross_section`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sum_{tot}, \\sum_T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Macroscopic Total Cross-section" is the total cross-sections for all atoms or other entities in a given 3D domain, divided by the volume of that domain.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Macroscopic Total Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MacroscopicTotalCrossSection`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Madelung_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For a uni-univalent ionic crystal of specified structure, the binding energy \\(V_b\\) per pair of ions is \\(V_b = \\alpha\\frac{e^2}{4\\pi \\varepsilon_0 a}\\), where \\(e\\) is the elementary charge, \\(\\varepsilon_0\\) is the electric constant, and \\(a\\) is the lattice constant which should be specified.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Madelung Constant" is used in determining the electrostatic potential of a single ion in a crystal by approximating the ions by point charges. It is named after Erwin Madelung, a German physicist.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MadelungConstant`),
      namedNode(`${rdfs}label`),
      literal(`Madelung Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-49`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(m = I e_n A\\), where \\(I\\) is electric current in a small closed loop, \\(e_n\\) is a unit vector perpendicular to the loop, and \\(A\\) is the area of the loop. The magnetic moment of a substance within a domain is the vector sum of the magnetic moments of all entities included in the domain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Area Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Area Moment" is also referred to as "Magnetic Moment".`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${qudt}symbol`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Area Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${dcterms}description`),
      literal(`"Magnetic Dipole Moment" is the magnetic moment of a system is a measure of the magnitude and the direction of its magnetism. Magnetic moment usually refers to its Magnetic Dipole Moment, and quantifies the contribution of the system's internal magnetism to the external dipolar magnetic field produced by the system (that is, the component of the external magnetic field that is inversely proportional to the cube of the distance to the observer). The Magnetic Dipole Moment is a vector-valued quantity. For a particle or nucleus, vector quantity causing an increment \\(\\Delta W = -\\mu \\cdot B\\) to its energy \\(W\\) in an external magnetic field with magnetic flux density \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M2-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WB-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L3I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-55`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_m = -m \\cdot B\\), where \\(E_m\\) is the interaction energy of the molecule with magnetic diploe moment \\(m\\) and a magnetic field with magnetic flux density \\(B\\)

or,

\\(J_m = \\mu_0 M\\) where \\(\\mu_0\\) is the magnetic constant and \\(M\\) is Magnetization.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${qudt}symbol`),
      literal(`J_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticDipoleMoment`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Dipole Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${dcterms}description`),
      literal(`The Magnetic Field, denoted \\(B\\), is a fundamental field in electrodynamics which characterizes the magnetic force exerted by electric currents.  It is closely related to the auxillary magnetic field H (see quantitykind:AuxillaryMagneticField).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gamma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticField`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Magnetic Field Strength}\\) is a vector quantity obtained at a given point by subtracting the magnetization \\(M\\) from the magnetic flux density \\(B\\) divided by the magnetic constant \\(\\mu_0\\). The magnetic field strength is related to the total current density \\(J_{tot}\\) via: \\(\\text{rot} H = J_{tot}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AT-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AT-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OERSTED`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-56`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{H} = \\frac{\\mathbf{B} }{\\mu_0} - M\\), where \\(\\mathbf{B} \\) is magnetic flux density, \\(\\mu_0\\) is the magnetic constant and \\(M\\) is magnetization.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mathbf{H} \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Field Strength`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-FT-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliWB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UnitPole`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Magnetic_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}expression`),
      literal(`\\(magnetic-flux\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199233991.001.0001/acref-9780199233991-e-1800`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Phi = \\int_S B \\cdot e_n d A\\), over a surface \\(S\\), where \\(B\\) is magnetic flux density and \\(e_n dA\\) is the vector surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Flux" is the product of the average magnetic field times the perpendicular area that it penetrates.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${dcterms}description`),
      literal(`"Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by \\(B = F/q v \\sin \\theta\\), where \\(F\\) is the force a moving charge \\(q\\) would experience if it was travelling at a velocity \\(v\\) in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to \\(B\\) by: \\(H = B/\\mu\\), where \\(\\mu\\) is the permeability of the medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gamma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gs`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199233991.001.0001/acref-9780199233991-e-1798`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{F}  = qv \\times B\\), where \\(F\\) is force and \\(v\\) is velocity of any test particle with electric charge \\(q\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic flux density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticField`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Flux per Unit Length" is a quantity in the SI and C.G.S. Systems of Quantities.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticFluxPerUnitLength`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic flux per unit length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-49`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.simetric.co.uk/siderived.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(m = I e_n A\\), where \\(I\\) is electric current in a small closed loop, \\(e_n\\) is a unit vector perpendicular to the loop, and \\(A\\) is the area of the loop. The magnetic moment of a substance within a domain is the vector sum of the magnetic moments of all entities included in the domain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Moment" is also referred to as "Magnetic Area Moment", and is not to be confused with Magnetic Dipole Moment.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${qudt}symbol`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticMoment`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MagneticAreaMoment`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Magnetic Polarization}\\) is a vector quantity equal to the product of the magnetization \\(M\\) and the magnetic constant \\(\\mu_0\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-54`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J_m = \\mu_0 M\\),  where \\(\\mu_0\\) is the magentic constant and \\(M\\) is magnetization.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(J_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Polarization`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}MagneticConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticPolarization`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Magnetization`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Magnetic Quantum Number" describes the specific orbital (or "cloud") within that subshell, and yields the projection of the orbital angular momentum along a specified axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-T-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Permeability_(electromagnetism)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Length Per Unit Magnetic Flux} is the the resistance of a material to the establishment of a magnetic field in it. It is the reciprocal of \\textit{Magnetic Permeability", the inverse of the measure of the ability of a material to support the formation of a magnetic field within itself.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Reluctivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticReluctivity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${dcterms}description`),
      literal(`"Magnetic Susceptability" is a scalar or tensor quantity the product of which by the magnetic constant \\(\\mu_0\\) and by the magnetic field strength \\(H\\) is equal to the magnetic polarization \\(J\\). The definition given applies to an isotropic medium. For an anisotropic medium permeability is a second order tensor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}expression`),
      literal(`\\(\\kappa = \\frac{M}{H}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-12-37`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\kappa = \\frac{M}{H}\\),  where \\(M\\) is magnetization,  and \\(H\\) is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\kappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Susceptability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}MagneticConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticSusceptability`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Magnetization`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-57`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(U_m = \\int_{r_a(C)}^{r_b} \\mathbf{H} \\cdot dr\\), where \\(\\mathbf{H}\\) is magnetic field strength and \\(r\\) is the position vector along a given curve \\(C\\) from point \\(a\\) to point \\(b\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Tension} is a scalar quantity equal to the line integral of the magnetic field strength \\mathbf{H" along a specified path linking two points a and b.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${qudt}symbol`),
      literal(`U_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Tension`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloWB-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WB-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WB-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-23`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(B = \\textbf{rot} A\\), where \\(B\\) is magnetic flux density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetic Vector Potential" is the vector potential of the magnetic flux density. The magnetic vector potential is not unique since any irrotational vector field quantity can be added to a given magnetic vector potential without changing its rotation. Under static conditions the magnetic vector potential is often chosen so that its divergence is zero.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${rdfs}label`),
      literal(`Magnetic Vector Potential`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagneticVectorPotential`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-52`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M = dm/dV\\), where \\(m\\) is magentic moment of a substance in a domain with Volume \\(V\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Magnetization" is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}symbol`),
      literal(`H_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${rdfs}label`),
      literal(`Magnetization`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Magnetization`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}LinearElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Magnetization Field is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${rdfs}label`),
      literal(`Magnetization Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetizationField`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricCurrentPerUnitLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Magnetomotive Force}\\)  (\\(mmf\\)) is the ability of an electric circuit to produce magnetic flux. Just as the ability of a battery to produce electric current is called its electromotive force or emf, mmf is taken as the work required to move a unit magnet pole from any point through any path which links the electric circuit back the same point in the presence of the magnetic force produced by the electric current in the circuit. \\(\\textbf{Magnetomotive Force}\\) is the scalar line integral of the magnetic field strength along a closed path.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OERSTED-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Magnetomotive_force`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-60`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(F_m = \\oint \\mathbf{H} \\cdot dr\\), where \\(\\mathbf{H}\\) is magnetic field strength and \\(r\\) is position vector along a given curve \\(C\\) from point \\(a\\) to point \\(b\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(F_m \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${rdfs}label`),
      literal(`Magnetomotive Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MagnetomotiveForce`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${dcterms}description`),
      literal(`In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram (\\(kg\\))`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${qudt}symbol`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mass`),
      namedNode(`${rdfs}label`),
      literal(`Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://medical-dictionary.thefreedictionary.com/mass+absorption+coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a_m = \\frac{a}{\\rho}\\), where \\(a\\) is the linear absorption coefficient and \\(\\rho\\) is the mass density of the medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(a_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The mass absorption coefficient is the linear absorption coefficient divided by the density of the absorber.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAbsorptionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Mass Absorption Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Mass Amount of Substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-MOL-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAmountOfSubstanceTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Mass Amount of Substance Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-GM_DRY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu_m = \\frac{\\mu}{\\rho}\\), where \\(\\mu\\) is the linear attenuation coefficient and \\(\\rho\\) is the mass density of the medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per unit mass.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Mass Attenuation Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_concentration_(chemistry)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_B = \\frac{m_B}{V}\\), where \\(m_B\\) is the mass of substance \\(B\\) and \\(V\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Mass Concentration" of substance B  is defined as the mass of a constituent  divided by the volume of the mixture .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentration`),
      namedNode(`${rdfs}label`),
      literal(`Mass Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w = m/V\\), where \\(m\\) is mass of water, irrespective of the form of aggregation, and \\(V\\) is volume. Mass concentration of water at saturation is denoted \\(w_{sat}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Concentration of Water Valour} is one of a number of \\textit{Concentration" quantities defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${qudt}symbol`),
      literal(`w`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWater`),
      namedNode(`${rdfs}label`),
      literal(`Mass Concentration of Water`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w = m/V\\), where \\(m\\) is mass of water vapour and \\(V\\) is total gas volume. Mass concentration of water vapour at saturation is denoted \\(v_{sat}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Concentration of Water} is one of a number of \\textit{Concentration" quantities  defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${qudt}symbol`),
      literal(`v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassConcentrationOfWaterVapour`),
      namedNode(`${rdfs}label`),
      literal(`Mass Concentration of Water Vapour`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Binding_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(B = Zm(^{1}\\textrm{H}) + Nm_n - m_a\\), where \\(Z\\) is the proton number of the atom, \\(m(^{1}\\textrm{H})\\) is atomic mass of \\(^{1}\\textrm{H}\\), \\(N\\) is the neutron number, \\(m_n\\) is the rest mass of the neutron, and \\(m_a\\) is the rest mass of the atom.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Mass Defect", also termed mass deficit, or mass packing fraction, describes mass change (decrease) in bound systems, particularly atomic nuclei.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${rdfs}label`),
      literal(`Mass Defect`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDefect`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_BALLING`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_BAUME`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_BAUME_US_HEAVY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_BAUME_US_LIGHT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_BRIX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_OECHSLE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_PLATO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEGREE_TWADDELL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN-PER-GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-GAL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-GAL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US-PER-YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = \\frac{dm}{dV}\\), where \\(m\\) is mass and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The mass density or density of a material is its mass per unit volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${rdfs}label`),
      literal(`Mass Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassDensity`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://physics.nist.gov/PhysRefData/XrayMassCoef/chap3.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\frac{\\mu_{tr}}{\\rho} = -\\frac{1}{\\rho}\\frac{1}{R}\\frac{dR_{tr}}{dl}\\), where \\(dR_{tr}\\) is the mean energy that is transferred to kinetic energy of charged particles by interactions of the incident radiation \\(R\\) in traversing a distance \\(dl\\) in the material of density \\(\\rho\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\frac{\\mu_{tr}}{\\rho}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Energy Transfer Coefficient" is that fraction of the mass attenuation coefficient which contributes to the production of kinetic energy in charged particles.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassEnergyTransferCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Mass Energy Transfer Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_excess`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Delta = m_a - Am_u\\), where \\(m_a\\) is the rest mass of the atom, \\(A\\) is its nucleon number, and \\(m_u\\) is the unified atomic mass constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Delta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Mass Excess" of a nuclide is the difference between its actual mass and its mass number in atomic mass units. It is one of the predominant methods for tabulating nuclear mass.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${rdfs}label`),
      literal(`Mass Excess`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassExcess`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${dcterms}description`),
      literal(`"Mass Flow Rate" is a measure of Mass flux. The common symbol is \\(\\dot{m}\\) (pronounced "m-dot"), although sometimes \\(\\mu\\) is used. The SI units are \\(kg s-1\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-SEC-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mass_flow_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_flow_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q_m = \\frac{dm}{dt}\\), where \\(m\\) is mass and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\dot{m}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${qudt}symbol`),
      literal(`q_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Mass Flow Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_fraction_(chemistry)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w_B = \\frac{m_B}{m}\\), where \\(m_B\\) is the mass of substance \\(B\\) and \\(m\\) is the total.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Mass Fraction" is the fraction of one substance with mass to the mass of the total mixture .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${qudt}symbol`),
      literal(`w_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFraction`),
      namedNode(`${rdfs}label`),
      literal(`Mass Fraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w_d= 1 - w_{h2o}\\), where \\(w_{h2o}\\) is mass fraction of water.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Fraction of Dry Matter} is one of a number of \\textit{Concentration" quantities defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${qudt}symbol`),
      literal(`w_d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${rdfs}label`),
      literal(`Mass Fraction of Dry Matter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w_{H_2o} = \\frac{u}{1+u}\\), where \\(u\\) is mass ratio of water to dry water.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Fraction of Water} is one of a number of \\textit{Concentration" quantities defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${qudt}symbol`),
      literal(`w_{H_2o}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${rdfs}label`),
      literal(`Mass Fraction of Water`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassFractionOfWater`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassFractionOfDryMatter`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${dcterms}description`),
      literal(`The "Mass Number" (A), also called atomic mass number or nucleon number, is the total number of protons and neutrons (together known as nucleons) in an atomic nucleus. Nuclides with the same value of \\(A\\) are called isobars.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A = Z + N\\), where \\(Z\\) is the atomic number and \\(N\\) is the neutron number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${rdfs}label`),
      literal(`Mass Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${qudt}symbol`),
      literal(`M_{E}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${rdfs}label`),
      literal(`Mass Of Electrical Power Supply`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfElectricalPowerSupply`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${qudt}symbol`),
      literal(`M_{SB}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${rdfs}label`),
      literal(`Mass Of Solid Booster`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfSolidBooster`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(M_{\\oplus}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Earth mass is the unit of mass equal to that of the Earth.  Earth mass is often used to describe masses of rocky terrestrial planets.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${rdfs}label`),
      literal(`Mass Of The Earth`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassOfTheEarth`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${dcterms}description`),
      literal(`The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area. The SI derived unit is: kilogram per square metre  (\\(kg \\cdot m^{-2}\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroG-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ-PER-YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Area_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_A = \\frac {m} {A}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_A \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerArea`),
      namedNode(`${rdfs}label`),
      literal(`Mass per Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${dcterms}description`),
      literal(`In Physics and Engineering, mass flux is the rate of mass flow per unit area. The common symbols are \\(j\\), \\(J\\), \\(\\phi\\), or \\(\\Phi\\)  (Greek lower or capital Phi), sometimes with subscript \\(m\\) to indicate mass is the flowing quantity.  Its SI units are \\( kg s^{-1} m^{-2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-SEC-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-M2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_Carbon-PER-M2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_Nitrogen-PER-M2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M2-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE-PER-HA-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(j_m = \\lim\\limits_{A \\rightarrow 0}\\frac{I_m}{A}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerAreaTime`),
      namedNode(`${rdfs}label`),
      literal(`Mass per Area Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${dcterms}description`),
      literal(`The mass-to-charge ratio ratio (\\(m/Q\\)) is a physical quantity that is widely used in the electrodynamics of charged particles, for example, in electron optics and ion optics. The importance of the mass-to-charge ratio, according to classical electrodynamics, is that two particles with the same mass-to-charge ratio move in the same path in a vacuum when subjected to the same electric and magnetic fields. Its SI units are \\(kg/C\\), but it can also be measured in Thomson (\\(Th\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass-to-charge_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Mass per Electric Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${dcterms}description`),
      literal(`Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects. The SI unit of linear density is the kilogram per metre (\\(kg/m\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Denier`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TEX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Linear_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerLength`),
      namedNode(`${rdfs}label`),
      literal(`Mass per Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassPerTime`),
      namedNode(`${rdfs}label`),
      literal(`Mass per Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${qudt}symbol`),
      literal(`R or M_{R}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatio`),
      namedNode(`${rdfs}label`),
      literal(`Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(u = m/m_d\\), where \\(m\\) is mass of water vapour and \\(m_d\\) is mass of dry matter. Mass ratio of water to dry matter at saturation is denoted \\(u_{sat}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Ratio of Water to Dry Matter} is one of a number of \\textit{Concentration Ratio" quantities  defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterToDryMatter`),
      namedNode(`${rdfs}label`),
      literal(`Mass Concentration of Water To Dry Matter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(x = m/m_d\\), where \\(m\\) is mass of water vapour and \\(m_d\\) is mass of dry gas. Mass ratio of water vapour to dry gas  at saturation is denoted \\(x_{sat}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mass Ratio of Water Vapour to Dry Gas} is one of a number of \\textit{Concentration Ratio" quantities  defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${qudt}symbol`),
      literal(`x`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassRatioOfWaterVapourToDryGas`),
      namedNode(`${rdfs}label`),
      literal(`Mass Ratio of Water Vapour to Dry Gas`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Mass Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.encyclo.co.uk/define/massic%20activity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Massic Activity" is the activity divided by the total mass of the sample.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassicActivity`),
      namedNode(`${rdfs}label`),
      literal(`Massic Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${dcterms}description`),
      literal(`The Massieu function, \\(\\Psi\\), is defined as: \\(\\Psi = \\Psi (X_1, \\dots , X_i, Y_{i+1}, \\dots , Y_r  )\\),  where for every system with degree of freedom \\(r\\) one may choose \\(r\\) variables, e.g. , to define a coordinate system, where \\(X\\) and \\(Y\\) are extensive and intensive variables, respectively, and where at least one extensive variable must be within this set in order to define the size of the system. The \\((r + 1)^{th}\\) variable,\\(\\Psi\\) , is then called the Massieu function.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Massieu_function`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J = -A/T\\), where \\(A\\) is Helmholtz energy and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}label`),
      literal(`Massieu Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${rdfs}label`),
      literal(`Maximum Expected Operating Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${skos}altLabel`),
      literal(`MEOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxExpectedOperatingThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${rdfs}label`),
      literal(`Max Operating Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${skos}altLabel`),
      literal(`MOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxOperatingThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Thrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${rdfs}comment`),
      literal(`Max Sea Level thrust (Mlbf) `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${rdfs}label`),
      literal(`Max Sea Level Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaxSeaLevelThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Thrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Maximum Beta-Particle Energy" is the maximum energy of the energy spectrum in a beta-particle disintegration process.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Eᵦ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Maximum Beta-Particle Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumBeta-ParticleEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${rdfs}label`),
      literal(`Maximum Expected Operating Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${skos}altLabel`),
      literal(`MEOP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumExpectedOperatingPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`MOP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${rdfs}label`),
      literal(`Maximum Operating Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MaximumOperatingPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/energy-imparted`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}latexDefinition`),
      literal(`To the matter in a given domain, \\(\\bar{\\varepsilon} = R_{in} - R_{out} + \\sum Q\\), where \\(R_{in}\\) is the radiant energy of all those charged and uncharged ionizing particles that enter the domain, \\(R_{out}\\) is the radiant energy of all those charged and uncharged ionizing particles that leave the domain, and \\(\\sum Q\\) is the sum of all changes of the rest energy of nuclei and elementary particles that occur in that domain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Mean Energy Imparted", is the average energy imparted to irradiated matter.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${qudt}symbol`),
      literal(`ε̅`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${rdfs}label`),
      literal(`Mean Energy Imparted`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanEnergyImparted`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}abbreviation`),
      literal(`m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mean_free_path`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mean Free Path" is the average distance travelled by a moving particle (such as an atom, a molecule, a photon) between successive impacts (collisions) which modify its direction or energy or other particle properties.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${qudt}symbol`),
      literal(`λ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${rdfs}label`),
      literal(`Mean Free Path`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanFreePath`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${dcterms}description`),
      literal(`The "Mean Lifetime" is the average length of time that an element remains in the set of discrete elements in a decaying quantity, \\(N(t)\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Exponential_decay`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\tau = \\frac{1}{\\lambda}\\), where \\(\\lambda\\) is the decay constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${rdfs}label`),
      literal(`Mean Lifetime`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLifetime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/M03782.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mean Linear Range" is, in a given material, for specified charged particles of a specified energy, the average displacement of the particles before they stop. That is, the mean totl rectified path length travelled by a particle in the course of slowing down to rest (or to some suitable cut-off energy) in a given substance under specified conditions averaged over a group of particles having the same initial energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${rdfs}label`),
      literal(`Mean Linear Range`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanLinearRange`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/M03783.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(R_\\rho = R\\rho\\), where \\(R\\) is the mean linear range and \\(\\rho\\) is the mass density of the sample.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(R_\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mean Mass Range" is the mean linear range multiplied by the mass density of the material.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeanMassRange`),
      namedNode(`${rdfs}label`),
      literal(`Mean Mass Range`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mechanical_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mechanical_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E = T + V\\), where \\(T\\) is kinetic energy and \\(V\\) is potential energy.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mechanical Energy is the sum of potential energy and kinetic energy. It is the energy associated with the motion and position of an object.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Mechanical Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Mechanical Impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalMobility`),
      namedNode(`${rdfs}label`),
      literal(`Mechanical Mobility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z_m = Z_a A^2\\), where \\(A\\) is the area of the surface considered and \\(Z_a\\) is the acoustic impedance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mechanical surface impedance at a surface, is the complex quotient of the total force on the surface by the component of the average sound particle velocity at the surface in the direction of the force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${rdfs}comment`),
      literal(`There are various interpretations of MechanicalSurfaceImpedance: Pressure/Velocity - https://apps.dtic.mil/sti/pdfs/ADA315595.pdf, Force / Speed - https://www.wikidata.org/wiki/Q6421317, and (Pressure / Velocity)**0.5 - https://www.sciencedirect.com/topics/engineering/mechanical-impedance. We are seeking a resolution to these differences.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MechanicalSurfaceImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Mechanical surface impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A temperature that is the one at which a substance will change its physical state from a solid to a liquid.  It is also the temperature where the solid and liquid forms of a pure substance can exist in equilibrium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${rdfs}label`),
      literal(`Melting Point Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MeltingPoint`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Microcanonical_ensemble`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Partition_function_(statistical_mechanics)#Grand_canonical_partition_function`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Omega = \\sum_r 1\\), where the sum is over all quantum states consistent with given energy. volume, external fields, and content.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Micro Canonical Partition Function" applies to a micro canonical ensemble, in which the system is allowed to exchange heat with the environment at fixed temperature, volume, and a fixed number of particles.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${rdfs}label`),
      literal(`Micro Canonical Partition Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicroCanonicalPartitionFunction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CanonicalPartitionFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CFU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MicrobialFormation`),
      namedNode(`${rdfs}label`),
      literal(`Microbial Formation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/migration+area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Migration Area" is the sum of the slowing-down area from fission energy to thermal energy and the diffusion area for thermal neutrons.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${qudt}symbol`),
      literal(`M^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${rdfs}label`),
      literal(`Migration Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/migration+area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M = \\sqrt{M^2}\\), where \\(M^2\\) is the migration area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Migration Length" is the square root of the migration area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${rdfs}label`),
      literal(`Migration Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MigrationLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-V-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electron_mobility`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Mobility" characterizes how quickly a particle can move through a metal or semiconductor, when pulled by an electric field. The average drift speed imparted to a charged particle in a medium by an electric field, divided by the electric field strength.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Mobility`),
      namedNode(`${rdfs}label`),
      literal(`Mobility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://baervan.nmt.edu/research_groups/reservoir_sweep_improvement/pages/clean_up/mobility.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(b = \\frac{\\mu_n}{\\mu_p}\\), where \\(\\mu_n\\) and \\(\\mu_p\\) are mobilities for electrons and holes, respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"MobilityRatio" describes permeability of a porous material to a given phase divided by the viscosity of that phase.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${qudt}symbol`),
      literal(`b`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MobilityRatio`),
      namedNode(`${rdfs}label`),
      literal(`Mobility Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Absolute_value`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Admittance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-51`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Y = \\left | \\underline{Y} \\right |\\), where \\(\\underline{Y}\\) is admittance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Modulus Of Admittance" is the absolute value of the quantity "admittance".`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${qudt}symbol`),
      literal(`Y`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${rdfs}label`),
      literal(`Modulus Of Admittance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfAdmittance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Admittance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Elastic_modulus`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E = \\frac{\\sigma}{\\varepsilon}\\), where \\(\\sigma\\) is the normal stress and \\(\\varepsilon\\) is the linear strain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Modulus of Elasticity is the mathematical description of an object or substance's tendency to be deformed elastically (that is, non-permanently) when a force is applied to it.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfElasticity`),
      namedNode(`${rdfs}label`),
      literal(`Modulus of Elasticity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${dcterms}description`),
      literal(`"Modulus Of Impedance} is the absolute value of the quantity \\textit{impedance". Apparent impedance is defined more generally as

the quotient of rms voltage and rms electric current; it is often denoted by \\(Z\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Absolute_value`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electrical_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z = \\left | \\underline{Z} \\right |\\), where \\(\\underline{Z}\\) is impedance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Modulus Of Impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfImpedance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/link/ifcmodulusoflinearsubgradereactionmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Modulus of Linear Subgrade Reaction is a measure for modulus of linear subgrade reaction, which expresses the elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in N/m^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${rdfs}label`),
      literal(`Modulus of Linear Subgrade Reaction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfLinearSubgradeReaction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/link/ifcmodulusofrotationalsubgradereactionmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Modulus of Rotational Subgrade Reaction is a measure for modulus of rotational subgrade reaction, which expresses the rotational elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in Nm/(m*rad).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${rdfs}label`),
      literal(`Modulus of Rotational Subgrade Reaction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfRotationalSubgradeReaction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/link/ifcmodulusofsubgradereactionmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Modulus of Subgrade Reaction is a geotechnical measure describing interaction between foundation structures and the soil. May also be known as bedding measure. Usually measured in N/m3.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ModulusOfSubgradeReaction`),
      namedNode(`${rdfs}label`),
      literal(`Modulus of Subgrade Reaction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${qudt}symbol`),
      literal(`q_V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${rdfs}label`),
      literal(`Moisture Diffusivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoistureDiffusivity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molality`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(b_B = \\frac{n_B}{m_a}\\), where \\(n_B\\) is the amount of substance and \\(m_A\\) is the mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Molality of Solute" of a solution is defined as the amount of substance of solute divided by the mass in kg of the solvent.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${qudt}symbol`),
      literal(`b_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${rdfs}label`),
      literal(`Molality of Solute`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolalityOfSolute`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://medical-dictionary.thefreedictionary.com/molar+absorption+coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(x = aV_m\\), where \\(a\\) is the linear absorption coefficient and \\(V_m\\) is the molar volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Molar Absorption Coefficient" is a spectrophotometric unit indicating the light a substance absorbs with respect to length, usually centimeters, and concentration, usually moles per liter.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`x`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Molar Absorption Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-SEC-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${qudt}url`),
      literal(`http://cvika.grimoar.cz/callen/callen_21.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAngularMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Molar Angular Momentum`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu_c = -\\frac{\\mu}{c}\\), where \\(\\mu\\) is the linear attenuation coefficient and \\(c\\) is the amount-of-substance concentration.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu_c\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Molar Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per amount of substance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Molar Attenuation Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MolarAbsorptionCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarAttenuationCoefficient`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MassAttenuationCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}S-M2-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molar_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/molar+conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Gamma_m = \\frac{x}{c_B}\\), where \\(x\\) is the electrolytic conductivity and \\(c_B\\) is the amount-of-substance concentration.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Gamma_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Molar Conductivity" is the conductivity of an electrolyte solution divided by the molar concentration of the electrolyte, and so measures the efficiency with which a given electrolyte conducts electricity in solution.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${rdfs}label`),
      literal(`Molar Conductivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarConductivity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${dcterms}description`),
      literal(`"Molar Energy" is the total energy contained by a thermodynamic system. The unit is \\(J/mol\\), also expressed as \\(joule/mole\\),  or \\(joules per mole\\). This unit is commonly used in the SI unit system. The quantity has the dimension of \\(M \\cdot L^2 \\cdot  T^{-2} \\cdot N^{-1}\\) where \\(M\\) is mass, \\(L\\) is length, \\(T\\) is time, and \\(N\\) is amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.efunda.com/glossary/units/units-molar_energy-joule_per_mole.cfm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(U_m = \\frac{U}{n}\\), where \\(U\\) is internal energy and \\(n\\) is amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`U_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${vaem}todo`),
      literal(`dimensions are wrong`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Molar Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Standard_molar_entropy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S_m = \\frac{S}{n}\\), where \\(S\\) is entropy and \\(n\\) is amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Standard Molar Entropy" is the entropy content of one mole of substance, under standard conditions (not standard temperature and pressure STP).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${qudt}symbol`),
      literal(`S_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarEntropy`),
      namedNode(`${rdfs}label`),
      literal(`Molar Entropy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.sciencedirect.com/topics/engineering/molar-flow-rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Molar Flow Rate is a measure of the amount of substance (the number of molecules) that passes through a given area perpendicular to the flow in a given time. Typically this area is constrained, for example a section through a pipe, but it could also apply to an open flow.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${qudt}symbol`),
      literal(`q_V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Molar Flow Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-MOL-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MOL-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://chemistry.about.com/od/chemistryglossary/g/Molar-Heat-Capacity-Definition.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C_m = \\frac{C}{n}\\), where \\(C\\) is heat capacity and \\(n\\) is amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Molar Heat Capacity" is the amount of heat energy required to raise the temperature of 1 mole of a substance. In SI units, molar heat capacity (symbol: cn) is the amount of heat in joules required to raise 1 mole of a substance 1 Kelvin.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}symbol`),
      literal(`C_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${qudt}symbol`),
      literal(`cn`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarHeatCapacity`),
      namedNode(`${rdfs}label`),
      literal(`Molar Heat Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${dcterms}description`),
      literal(`In chemistry, the molar mass M is defined as the mass of a given substance (chemical element or chemical compound) divided by its amount of substance. It is a physical property of a given substance. The base SI unit for molar mass is \\(kg/mol\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Molar_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molar_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarMass`),
      namedNode(`${rdfs}label`),
      literal(`Molar Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-M2-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/O04313.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_n = \\alpha \\frac{A}{n}\\), where \\(\\alpha\\) is the angle of optical rotation, and \\(n\\) is the amount of substance of the optically active component in the path of a linearly polarized light beam of cross sectional area \\(A\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_n\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Molar Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the amount concentration giving the molar optical rotatory power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarOpticalRotatoryPower`),
      namedNode(`${rdfs}label`),
      literal(`Molar Optical Rotatory Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A quantity kind that is a measure of the total polarizability of a mole of substance that depends on the temperature, the index of refraction and the pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarRefractivity`),
      namedNode(`${rdfs}label`),
      literal(`Molar Refractivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${dcterms}description`),
      literal(`The molar volume, symbol \\(V_m\\), is the volume occupied by one mole of a substance (chemical element or chemical compound) at a given temperature and pressure. It is equal to the molar mass (\\(M\\)) divided by the mass density (\\(\\rho\\)). It has the SI unit cubic metres per mole (\\(m^{1}/mol\\)). For ideal gases, the molar volume is given by the ideal gas equation: this is a good approximation for many common gases at standard temperature and pressure. For crystalline solids, the molar volume can be measured by X-ray crystallography.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MicroMOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Molar_volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molar_volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(V_m = \\frac{V}{n}\\), where \\(V\\) is volume and \\(n\\) is amount of substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${qudt}symbol`),
      literal(`V_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolarVolume`),
      namedNode(`${rdfs}label`),
      literal(`Molar Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Mole_fraction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In chemistry, the mole fraction of a component in a mixture is the relative proportion of molecules belonging to the component to those in the mixture, by number of molecules. It is one way of measuring concentration.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A1E0L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${rdfs}label`),
      literal(`Mole Fraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MoleFraction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}abbreviation`),
      literal(`m^{-3}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_ISO-L-3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molar_concentration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(C_B = \\frac{N_B}{V}\\), where \\(N_B\\) is the number of molecules of \\(B\\) and \\(V\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Molecular Concentration" of substance B  is defined as the number of molecules of B  divided by the volume of the mixture `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${qudt}symbol`),
      literal(`C_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${rdfs}label`),
      literal(`Molecular Concentration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularConcentration`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Da`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Molecular_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molecular_mass#Relative_molecular_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The molecular mass, or molecular weight of a chemical compound is the mass of one molecule of that compound, relative to the unified atomic mass unit, u. Molecular mass should not be confused with molar mass, which is the mass of one mole of a substance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${rdfs}label`),
      literal(`Molecular Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://oceanworld.tamu.edu/resources/ocng_textbook/chapter08/chapter08_01.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Molecules in a fluid close to a solid boundary sometime strike the boundary and transfer momentum to it. Molecules further from the boundary collide with molecules that have struck the boundary, further transferring the change in momentum into the interior of the fluid. This transfer of momentum is molecular viscosity. Molecules, however, travel only micrometers between collisions, and the process is very inefficient for transferring momentum even a few centimeters. Molecular viscosity is important only within a few millimeters of a boundary. The coefficient of molecular viscosity has the same value as the dynamic viscosity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${rdfs}label`),
      literal(`Molecular Viscosity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MolecularViscosity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Viscosity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Torque`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Moment_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M = r \\cdot F\\), where \\(r\\) is the position vector and \\(F\\) is the force.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Moment of force (often just moment) is the tendency of a force to twist or rotate an object.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${rdfs}label`),
      literal(`Moment of Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Torque`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Moment_of_inertia`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I_Q = \\int r^2_Q dm\\), where \\(r_Q\\) is the radial distance from a \\(Q-axis\\) and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${rdfs}label`),
      literal(`Moment of Inertia`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(`${skos}altLabel`),
      literal(`MOI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The momentum of a system of particles is given by the sum of the momentums of the individual particles which make up the system or by the product of the total mass of the system and the velocity of the center of gravity of the system. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${rdfs}label`),
      literal(`Momentum`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Momentum`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}LinearMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-SEC-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MomentumPerAngle`),
      namedNode(`${rdfs}label`),
      literal(`Momentum per Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-1000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CASES-PER-KiloINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Morbidity rate is a measure of the incidence of a disease in a particular population, scaled to the size of that population, per unit of time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${rdfs}label`),
      literal(`Morbidity Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MorbidityRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEATHS-PER-1000000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEATHS-PER-1000I-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEATHS-PER-KiloINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEATHS-PER-MegaINDIV-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Mortality_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mortality rate, or death rate, is a measure of the number of deaths (in general, or due to a specific cause) in a particular population, scaled to the size of that population, per unit of time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${rdfs}label`),
      literal(`Mortality Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MortalityRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Incidence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Neutron_multiplication_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Multiplication Factor" is the ratio of the total number of fission or fission-dependent neutrons produced in a time interval to the total number of neutrons lost by absorption and leakage during the same interval.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${qudt}symbol`),
      literal(`k`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MultiplicationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Multiplication Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Mutual Inductance}\\) is the non-diagonal term of the inductance matrix. For two loops, the symbol \\(M\\) is used for \\(L_{12}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-36`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L_{mn} = \\frac{\\Psi_m}{I_n}\\), where \\(I_n\\) is an electric current in a thin conducting loop \\(n\\) and \\(\\Psi_m\\) is the linked flux caused by that electric current in another loop \\(m\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${qudt}symbol`),
      literal(`L_{mn}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${rdfs}label`),
      literal(`Mutual Inductance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}MutualInductance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Inductance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The amount of propellant mass within a stage that is available for impulse for use in nominal payload performance prediction. This mass excludes loaded propellant that has been set aside for off- nominal performance behavior (FPR and fuel bias).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${qudt}url`),
      literal(`http://elib.dlr.de/68314/1/IAF10-D2.3.1.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Nominal Ascent Propellant Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NOMINAL-ASCENT-PROPELLANT-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://eilv.cie.co.at/term/798`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A_e(\\lambda) = -ln(\\tau(\\lambda))\\), where \\(\\tau\\) is the transmittance at a given wavelength \\(\\lambda\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Napierian Absorbance is the natural (Napierian) logarithm of the reciprocal of the spectral internal transmittance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}symbol`),
      literal(`A_e, B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NapierianAbsorbance`),
      namedNode(`${rdfs}label`),
      literal(`Napierian Absorbance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Néel_temperature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Neel Temperature" is the critical thermodynamic temperature of an antiferromagnet.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Neel Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/Diffusion+of+Neutrons`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(D_n = -\\frac{J_x}{\\frac{\\partial dn}{\\partial dx}}\\), where \\(J_x\\) is the \\(x-component\\) of the particle current and \\(n\\) is the particle number density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Diffusion Coefficient" is `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The neutron diffusion length is equivalent to the relaxation length, that is, to the distance, in which the neutron flux decreases by a factor e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${qudt}symbol`),
      literal(`L_{r}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${rdfs}label`),
      literal(`Neutron Diffusion Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronDiffusionLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${dcterms}description`),
      literal(`"Neutron Number", symbol \\(N\\), is the number of neutrons in a nuclide. Nuclides with the same value of \\(N\\) but different values of \\(Z\\) are called isotones. \\(N - Z\\) is called the neutron excess number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Neutron_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${qudt}symbol`),
      literal(`N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${rdfs}label`),
      literal(`Neutron Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fission_product_yield`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\eta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Neutron Yield per Absorption" is the average number of fission neutrons, both prompt and delayed, emitted per neutron absorbed in a fissionable nuclide or in a nuclear fuel, as specified.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerAbsorption`),
      namedNode(`${rdfs}label`),
      literal(`Neutron Yield per Absorption`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fission_product_yield`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\nu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Neutron Yield per Fission" is the average number of fission neutrons, both prompt and delayed, emitted per fission event.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NeutronYieldPerFission`),
      namedNode(`${rdfs}label`),
      literal(`Neutron Yield per Fission`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Six_factor_formula`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Non-Leakage Probability" is the probability that a neutron will not escape from the reactor during the slowing-down process or while it diffuses as a thermal neutron`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Non-LeakageProbability`),
      namedNode(`${rdfs}label`),
      literal(`Non-Leakage Probability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-43`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Q^{'} = \\sqrt{{\\left | \\underline{S} \\right |}^2 - P^2}\\), where \\(\\underline{S}\\) is apparent power and \\(P\\) is active power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Non-active Power", for a two-terminal element or a two-terminal circuit under periodic conditions, is the quantity equal to the square root of the difference of the squares of the apparent power and the active power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${qudt}symbol`),
      literal(`Q'`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdfs}label`),
      literal(`Non-active Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonActivePower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"NonNegativeLength" is a measure of length greater than or equal to zero.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${rdfs}label`),
      literal(`Positive Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stress_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = \\frac{dF_n}{dA}\\), where \\(dF_n\\) is the normal component of force and \\(dA\\) is the area of the surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Normal stress is defined as the stress resulting from a force acting normal to a body surface. Normal stress can be caused by several loading methods, the most common being axial tension and compression, bending, and hoop stress.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${rdfs}label`),
      literal(`Normal Stress`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalStress`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Stress`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC2/HTML/link/ifcnormalisedratiomeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Normalized Dimensionless Ratio" is a dimensionless ratio ranging from 0.0 to 1.0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${rdfs}label`),
      literal(`Positive Dimensionless Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NormalizedDimensionlessRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Cross-sectional area of the nozzle at the throat.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${qudt}symbol`),
      literal(`A^*`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${rdfs}label`),
      literal(`Nozzle Throat Cross-sectional Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatCrossSectionalArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${rdfs}label`),
      literal(`Nozzle Throat Diameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatDiameter`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${qudt}symbol`),
      literal(`p^*`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${rdfs}label`),
      literal(`Nozzle Throat Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleThroatPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${qudt}symbol`),
      literal(`F_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${rdfs}label`),
      literal(`Nozzle Walls Thrust Reaction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NozzleWallsThrustReaction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_quadrupole_resonance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Q = (\\frac{1}{e}) \\int (3z^2 - r^2)\\rho(x, y, z)dV\\), in the quantum state with the nuclear spin in the field direction \\((z)\\), where \\(\\rho(x, y, z)\\) is the nuclear electric charge density, \\(e\\) is the elementary charge, \\(r^2 = x^2 + y^2 + z^2\\), and \\(dV\\) is the volume element \\(dx\\) \\(dy\\) \\(dz\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Nuclear Quadrupole Moment" is a quantity that characterizes the deviation from spherical symmetry of the electrical charge distribution in an atomic nucleus.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearQuadrupoleMoment`),
      namedNode(`${rdfs}label`),
      literal(`Nuclear Quadrupole Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_nucleus`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}latexDefinition`),
      literal(`This quantity is not exactly defined. It is given approximately for nuclei in their ground state only by \\(R = r_0 A^{\\frac{1}{3}}\\), where \\(r_0 \\approx 1.2 x 10^{-15} m\\) and \\(A\\) is the nucleon number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Nuclear Radius" is the conventional radius of sphere in which the nuclear matter is included`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${rdfs}label`),
      literal(`Nuclear Radius`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearRadius`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I^2 = \\hbar^2 I(I + 1)\\), where \\(\\hbar\\) is the Planck constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Spin Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NuclearSpinQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Number of nucleons in an atomic nucleus.A = Z+N. Nuclides with the same value of A are called isobars.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${rdfs}label`),
      literal(`Nucleon number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${skos}altLabel`),
      literal(`mass-number`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NucleonNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Number_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Number_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(n = \\frac{N}{V}\\), where \\(N\\) is the number of particles and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In physics, astronomy, and chemistry, number density (symbol: n) is a kind of quantity used to describe the degree of concentration of countable objects (atoms, molecules, dust particles, galaxies, etc.) in the three-dimensional physical space.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${rdfs}label`),
      literal(`Number Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Particle_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Number of Particles", also known as the particle number, of a thermodynamic system, conventionally indicated with the letter N, is the number of constituent particles in that system.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${qudt}symbol`),
      literal(`N_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}NumberOfParticles`),
      namedNode(`${rdfs}label`),
      literal(`Number of Particles`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Odor_detection_threshold`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_o}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Olfactory Threshold" are thresholds for the concentrations of various classes of smell that can be detected.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${rdfs}label`),
      literal(`Olfactory Threshold`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OlfactoryThreshold`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Concentration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Angular momentum of the orbit per unit mass of the vehicle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${qudt}symbol`),
      literal(`h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumPerUnitMass`),
      namedNode(`${rdfs}label`),
      literal(`Orbital Angular Momentum per Unit Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${dcterms}description`),
      literal(`The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of \\(n\\) ranges from 1 to the shell containing the outermost electron of that atom.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(l^2 = \\hbar^2 l(l + 1), l = 0, 1, ..., n - 1\\), where \\(l_i\\) refers to a specific particle \\(i\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`l`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Orbital Angular Momentum Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${qudt}symbol`),
      literal(`r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${rdfs}label`),
      literal(`Orbital Radial Distance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrbitalRadialDistance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${dcterms}description`),
      literal(`"Order of Reflection" is \\(n\\) in the Bragg's Law equation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/order-of-reflection`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OrderOfReflection`),
      namedNode(`${rdfs}label`),
      literal(`Order of Reflection`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Osmotic_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = -(M_A\\sum b_B)^{-1} \\ln a_A\\), where \\(M_A\\) is the molar mass of the solvent \\(A\\), \\(\\sum\\) denotes summation over all the solutes, \\(b_B\\) is the molality of solute \\(B\\), and \\(a_A\\) is the activity of solvent \\(A\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Osmotic Coefficient" is a quantity which characterises the deviation of a solvent from ideal behavior.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Osmotic Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Osmotic_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = -(M_A\\sum b_B)^{-1} \\ln a_A\\), where \\(M_A\\) is the molar mass of the solvent \\(A\\), \\(\\sum\\) denotes summation over all the solutes, \\(b_B\\) is the molality of solute \\(B\\), and \\(a_A\\) is the activity of solvent \\(A\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Osmotic Pressure" is the pressure which needs to be applied to a solution to prevent the inward flow of water across a semipermeable membrane.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${qudt}symbol`),
      literal(`Π`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${rdfs}label`),
      literal(`Osmotic Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OsmoticPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Additional distance traveled by a rocket because Of excessive initial velocity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${qudt}symbol`),
      literal(`s_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${rdfs}label`),
      literal(`Over-range distance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}OverRangeDistance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Acid`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/PH`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Chemicals or substances having a pH less than 7 are said to be acidic; more than 7 means basic.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PH`),
      namedNode(`${rdfs}label`),
      literal(`PH`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sum of the basic mass and the MGA. Current prediction of the final mass based on the current requirements and design.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Predicted Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PREDICTED-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of a body's dynamic (or coupled) imbalance resulting in a precession when rotating about an axis other than the body?s principal axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(`${rdfs}label`),
      literal(`Product of Inertia`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of a body's dynamic (or coupled) imbalance resulting in a precession when rotating about an axis other than the body?s principal axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${rdfs}label`),
      literal(`Product of Inertia in the X axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_X`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of a body?s dynamic (or coupled) imbalance resulting in a precession when rotating about an axis other than the body's principal axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${rdfs}label`),
      literal(`Product of Inertia in the Y axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Y`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A measure of a body's dynamic (or coupled) imbalance resulting in a precession when rotating about an axis other than the body's principal axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${rdfs}label`),
      literal(`Product of Inertia in the Z axis`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA_Z`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PRODUCT-OF-INERTIA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Atomic_packing_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(f = \\frac{\\Delta_r}{A}\\), where \\(\\Delta_r\\) is the relative mass excess and \\(A\\) is the nucleon number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Packing Fraction" is the fraction of volume in a crystal structure that is occupied by atoms.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${qudt}symbol`),
      literal(`f`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PackingFraction`),
      namedNode(`${rdfs}label`),
      literal(`Packing Fraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`pa`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Partial_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(p_B = x_B \\cdot p\\), where \\(x_B\\) is the amount-of-substance fraction of substance \\(B\\) and \\(p\\) is the total pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Partial Pressure" is the pressure that the gas would have if it alone occupied the volume of the mixture at the same temperature.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${qudt}symbol`),
      literal(`p_B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${rdfs}label`),
      literal(`Partial Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PartialPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}failures-in-time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\int J \\cdot e_n dA = \\frac{dN}{dt}\\), where \\(e_ndA\\) is the vector surface element, \\(N\\) is the net number of particles passing over a surface, and \\(dt\\) describes the time interval.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Particle Current" can be used to describe the net number of particles passing through a surface in an infinitesimal time interval.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Particle Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleCurrent`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-KiloM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Fluence`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Phi = \\frac{dN}{dA}\\), where \\(dN\\) describes the number of particles incident on a small spherical domain at a given point in space, and \\(dA\\) describes the cross-sectional area of that domain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Particle Fluence" is the total number of particles that intersect a unit area in a specific time interval of interest, and has units of m–2 (number of particles per meter squared).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluence`),
      namedNode(`${rdfs}label`),
      literal(`Particle Fluence`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.encyclo.co.uk/define/Fluence%20Rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\theta = \\frac{d\\Phi}{dt}\\), where \\(d\\Phi\\) is the increment of the particle fluence during an infinitesimal time interval with duration \\(dt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Particle Fluence Rate" can be defined as the total number of particles (typically Gamma Ray Photons ) crossing over a sphere of unit cross section which surrounds a Point Source of Ionising Radiation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleFluenceRate`),
      namedNode(`${rdfs}label`),
      literal(`Particle Fluence Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Particle_number#Particle_number_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(n = \\frac{N}{V}\\), where \\(N\\) is the number of particles in the 3D domain with the volume \\(V\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Particle Number Density" is obtained by dividing the particle number of a system by its volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${rdfs}label`),
      literal(`Particle Number Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleNumberDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NumberDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Position_(vector)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Particle Position Vector" is the position vector of a particle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${qudt}symbol`),
      literal(`r, R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${rdfs}label`),
      literal(`Particle Position Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticlePositionVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Particle Source Density" is the rate of production of particles in a 3D domain divided by the volume of that element.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ParticleSourceDensity`),
      namedNode(`${rdfs}label`),
      literal(`Particle Source Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Path_length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"PathLength" is `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${rdfs}label`),
      literal(`Path Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PathLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Payload mass is the mass of the payload carried by the craft. In a multistage spacecraft the payload mass of the last stage is the mass of the payload and the payload masses of the other stages are considered to be the gross masses of the next stages.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${rdfs}label`),
      literal(`Payload Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The payload ratio is defined as the mass of the payload divided by the empty mass of the structure. Because of the extra cost involved in staging rockets, given the choice, it's often more economic to use few stages with a small payload ratio rather than more stages each with a high payload ratio.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${rdfs}label`),
      literal(`Payload Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PayloadRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermoelectric_effect`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Pi_{ab}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Peltier Coefficient" represents how much heat current is carried per unit charge through a given material. It is the heat power developed at a junction, divided by the electric current flowing from substance a to substance b.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PeltierCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Peltier Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Duration of one cycle of a periodic phenomenon.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Period`),
      namedNode(`${rdfs}label`),
      literal(`Period`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoH-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${rdfs}label`),
      literal(`Permeability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeability`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectromagneticPermeability`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMEABILITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Relative_permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The ratio of the effective permeability of a porous phase to the absolute permeability.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermeabilityRatio`),
      namedNode(`${rdfs}label`),
      literal(`Permeability Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Permeance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Lambda = \\frac{1}{R_m}\\), where \\(R_m\\) is reluctance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Permeance" is the inverse of reluctance. Permeance is a measure of the quantity of flux for a number of current-turns in magnetic circuit. A magnetic circuit almost acts as though the flux is "conducted", therefore permeance is larger for large cross sections of a material and smaller for longer lengths. This concept is analogous to electrical conductance in the electric circuit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${rdfs}label`),
      literal(`Permeance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permeance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Reluctance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FARAD_Ab-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroFARAD-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroFARAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoFARAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoFARAD-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Permittivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Permittivity?oldid=494094133`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://maxwells-equations.com/materials/permittivity.php`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\epsilon = \\frac{D}{E}\\), where \\(D\\) is electric flux density and \\(E\\) is electric field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\epsilon\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Permittivity" is a physical quantity that describes how an electric field affects, and is affected by a dielectric medium, and is determined by the ability of a material to polarize in response to the field, and thereby reduce the total electric field inside the material.  Permittivity is often a scalar valued quantity, however in the general case it is tensor-valued.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Permittivity`),
      namedNode(`${rdfs}label`),
      literal(`Permittivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Permittivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}expression`),
      literal(`\\(rel-permittivity\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\epsilon_r = \\epsilon / \\epsilon_0\\), where \\(\\epsilon\\) is permittivity and \\(\\epsilon_0\\) is the electric constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\epsilon_r\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Permittivity Ratio" is the ratio of permittivity to the permittivity of a vacuum.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E2L-3I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${rdfs}label`),
      literal(`Permittivity Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Permittivity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PermittivityRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${dcterms}description`),
      literal(`The phase coefficient is the amount of phase shift that occurs as the wave travels one meter. Increasing the loss of the material, via the manipulation of the material's conductivity, will decrease the wavelength (increase \\(\\beta\\)) and increase the attenuation coefficient (increase \\(\\alpha\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Attenuation_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`If \\(F(x) = Ae^{-\\alpha x} \\cos{[\\beta (x - x_0)]}\\), then \\(\\alpha\\) is the attenuation coefficient and \\(\\beta\\) is the phase coefficient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\beta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Phase coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${dcterms}description`),
      literal(`"Phase Difference} is the difference, expressed in electrical degrees or time, between two waves having the same frequency and referenced to the same point in time. Two oscillators that have the same frequency and different phases have a phase difference, and the oscillators are said to be out of phase with each other. The amount by which such oscillators are out of step with each other can be expressed in degrees from \\SI{0}{\\degree} to \\SI{360}{\\degree}, or in radians from 0 to \num{2\\pi". If the phase difference is 180 degrees (\\(\\pi\\) radians), then the two oscillators are said to be in antiphase.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}expression`),
      literal(`\\(phase-difference\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Phase_(waves)#Phase_difference`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=103-07-06`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = \\varphi_u - \\varphi_i\\), where \\(\\varphi_u\\) is the initial phase of the voltage and \\(\\varphi_i\\) is the initial phase of the electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${rdfs}label`),
      literal(`Phase Difference`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseDifference`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Speed_of_sound`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(c = \\frac{\\omega}{k} = \\lambda f\\), where \\(\\omega\\) is the angular frequency, \\(k\\) is angular wavenumber, \\(\\lambda\\) is the wavelength, and \\(f\\) is the frequency.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In a dispersive medium sound speed is a function of sound frequency, through the dispersion relation. The spatial and temporal distribution of a propagating disturbance will continually change. Each frequency component propagates at its own Phase Velocity of Sound.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${rdfs}label`),
      literal(`Phase speed of sound`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhaseSpeedOfSound`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Phonon Mean Free Path" is the mean free path of phonons.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${qudt}symbol`),
      literal(`l_{ph}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${rdfs}label`),
      literal(`Phonon Mean Free Path`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhononMeanFreePath`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${dcterms}description`),
      literal(`"Photo Threshold of Awareness Function" is the ability of the human eye to detect a light that results in a \\(1^o\\) radial angle at the eye with a given duration (temporal summation).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotoThresholdOfAwarenessFunction`),
      namedNode(`${rdfs}label`),
      literal(`Photo Threshold of Awareness Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${dcterms}description`),
      literal(`A measure of flux of photons per solid angle`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Photon_counting`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonIntensity`),
      namedNode(`${rdfs}label`),
      literal(`Photon Intensity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${dcterms}description`),
      literal(`A measure of flux of photons per surface area per solid angle`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC-M2-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Photon_counting`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotonRadiance`),
      namedNode(`${rdfs}label`),
      literal(`Photon Radiance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.dormgrow.com/par/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Photosynthetic Photon Flux (PPF) is a measurement of the total number of photons emitted by a light source each second within the PAR wavelength range and is measured in μmol/s. Lighting manufacturers may specify their grow light products in terms of PPF. It can be considered as analogous to measuring the luminous flux (lumens) of visible light which would typically require the use of an integrating sphere or a goniometer system with spectroradiometer sensor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${rdfs}label`),
      literal(`Photosynthetic Photon Flux`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${skos}altLabel`),
      literal(`PPF`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFlux`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${ns19}WasistPAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-M2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.gigahertz-optik.com/en-us/service-and-support/knowledge-base/measurement-of-par/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Photosynthetically Active Radiation are the wavelengths of light within the visible range of 400 to 700 nanometers (nm) that are critical for photosynthesis. PPFD measures the amount of PAR light (photons) that arrive at the plant’s surface each second. The PPFD is measured at various distances with a Full-spectrum Quantum Sensor, also known as a PAR meter. Natural sunlight has a PAR value of 900-1500μMol/m2/s when the sun is directly overhead. For a grow light to be effective, it should have PAR values of 500-1500 μMol/m2/s.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Photosynthetic Photon Flux Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${skos}altLabel`),
      literal(`PPFD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PhotosyntheticPhotonFluxDensity`),
      namedNode(`${prov}wasDerivedFrom`),
      namedNode(`${ns20}par`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC1/HTML/schema/ifcmeasureresource/lexical/ifcplanarforcemeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Another name for Force Per Area, used by the Industry Foundation Classes (IFC) standard.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${rdfs}label`),
      literal(`Flächenlast`, 'de'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${rdfs}label`),
      literal(`Planar Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanarForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{Planck function}\\) is used to compute the radiance emitted from objects that radiate like a perfect "Black Body". The inverse of the \\(\\textit{Planck Function}\\) is used to find the \\(\\textit{Brightness Temperature}\\) of an object. The precise formula for the Planck Function depends on whether the radiance is determined on a \\(\\textit{per unit wavelength}\\) or a \\(\\textit{per unit frequency}\\). In the ISO System of Quantities, \\(\\textit{Planck Function}\\) is defined by the formula: \\(Y = -G/T\\), where \\(G\\) is Gibbs Energy and \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}expression`),
      literal(`\\(B_{\nu}(T)\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19680008986_1968008986.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://pds-atmospheres.nmsu.edu/education_and_outreach/encyclopedia/planck_function.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.star.nesdis.noaa.gov/smcd/spb/calibration/planck.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`The Planck function, \\(B_{\\tilde{\nu}}(T)\\), is given by:
\\(B_{\nu}(T) = \\frac{2h c^2\\tilde{\nu}^3}{e^{hc / k \\tilde{\nu} T}-1}\\)
where, \\(\\tilde{\nu}\\) is wavelength, \\(h\\) is Planck's Constant, \\(k\\) is Boltzman's Constant, \\(c\\) is the speed of light in a vacuum, \\(T\\) is thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}label`),
      literal(`Planck Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${dcterms}description`),
      literal(`The inclination to each other of two intersecting lines, measured by the arc of a circle intercepted between the two lines forming the angle, the center of the circle being the point of intersection.  An acute angle is less than \\(90^\\circ\\), a right angle \\(90^\\circ\\); an obtuse angle, more than \\(90^\\circ\\) but less than \\(180^\\circ\\); a straight angle, \\(180^\\circ\\); a reflex angle, more than \\(180^\\circ\\) but less than \\(360^\\circ\\); a perigon, \\(360^\\circ\\). Any angle not a multiple of \\(90^\\circ\\) is an oblique angle. If the sum of two angles is \\(90^\\circ\\), they are complementary angles; if \\(180^\\circ\\), supplementary angles; if \\(360^\\circ\\), explementary angles.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Plane_angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/plane+angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${rdfs}label`),
      literal(`Plane Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Poisson%27s_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = \\frac{\\Delta \\delta}{\\Delta l}\\), where \\(\\Delta \\delta\\) is the lateral contraction and \\(\\Delta l\\) is the elongation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Poisson Ratio is the negative ratio of transverse to axial strain. In fact, when a sample object is stretched (or squeezed), to an extension (or contraction) in the direction of the applied load, it corresponds a contraction (or extension) in a direction perpendicular to the applied load. The ratio between these two quantities is the Poisson's ratio.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoissonRatio`),
      namedNode(`${rdfs}label`),
      literal(`Poisson Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The polar moment of inertia is a quantity used to predict an object's ability to resist torsion, in objects (or segments of objects) with an invariant circular cross-section and no significant warping or out-of-plane deformation. It is used to calculate the angular displacement of an object subjected to a torque. It is analogous to the area moment of inertia, which characterizes an object's ability to resist bending. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}symbol`),
      literal(`J_{zz}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Second_moment_of_area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${rdfs}label`),
      literal(`Polar moment of inertia`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarMomentOfInertia`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${dcterms}description`),
      literal(`"Polarizability" is the relative tendency of a charge distribution, like the electron cloud of an atom or molecule, to be distorted from its normal shape by an external electric field, which may be caused by the presence of a nearby ion or dipole. The electronic polarizability \\(\\alpha\\) is defined as the ratio of the induced dipole moment of an atom to the electric field that produces this dipole moment. Polarizability is often a scalar valued quantity, however in the general case it is tensor-valued.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-M2-PER-V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C2-M-PER-J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Polarizability`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L0I0M-1H0T4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Polarizability`),
      namedNode(`${rdfs}label`),
      literal(`Polarizability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Ab-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}C_Stat-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Polarization Field is the vector field that expresses the density of permanent or induced electric dipole moments in a dielectric material. The polarization vector P is defined as the ratio of electric dipole moment per unit volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${rdfs}label`),
      literal(`Polarization Field`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PolarizationField`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricChargePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Population`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Population typically refers to the number of people in a single area, whether it be a city or town, region, country, continent, or the world, but can also represent the number of any kind of entity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${rdfs}label`),
      literal(`Population`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Population`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Position_(vector)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(r = \\overrightarrow{OP}\\), where \\(O\\) and \\(P\\) are two points in space.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Position Vector", also known as location vector or radius vector, is a Euclidean vector which represents the position of a point P in space in relation to an arbitrary reference origin O.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${qudt}symbol`),
      literal(`r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${rdfs}label`),
      literal(`Position Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositionVector`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC2/HTML/link/ifcpositiveratiomeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Positive Dimensionless Ratio" is a dimensionless ratio that is greater than zero`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${rdfs}label`),
      literal(`Positive Dimensionless Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveDimensionlessRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"PositiveLength" is a measure of length strictly greater than zero.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${rdfs}label`),
      literal(`Positive Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositiveLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}NonNegativeLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCMIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Angle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliARCSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliRAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/plane+angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "PositivePlaneAngle" is a plane angle strictly greater than zero.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${rdfs}label`),
      literal(`Positive Plane Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PositivePlaneAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PlaneAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Potential_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_ISO-L2MT-2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Potential_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(V = -\\int F \\cdot dr\\), where \\(F\\) is a conservative force and \\(R\\) is a position vector.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy possessed by a body by virtue of its position in a gravity field in contrast with kinetic energy, that possessed by virtue of its motion.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`PE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Potential_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Potential Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PotentialEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${dcterms}description`),
      literal(`Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: \\(P = W/t\\), where \\(P\\) is power, \\(W\\) is work and {t} is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Power`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Power`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(P = F \\cdot v\\), where \\(F\\) is force and \\(v\\) is velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Power_%28physics%29`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Power`),
      namedNode(`${rdfs}label`),
      literal(`Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerArea`),
      namedNode(`${rdfs}label`),
      literal(`Power Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-M2-PER-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerAreaPerSolidAngle`),
      namedNode(`${rdfs}label`),
      literal(`Power Area per Solid Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${dcterms}description`),
      literal(`"Power Factor", under periodic conditions, is the ratio of the absolute value of the active power \\(P\\) to the apparent power \\(S\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}expression`),
      literal(`\\(power-factor\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-46`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\lambda = \\left | P \\right | / \\left | S \\right |\\), where \\(P\\) is active power and \\(S\\) is apparent power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdfs}label`),
      literal(`Power Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ActivePower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ApparentPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${qudt}url`),
      literal(`http://www.physicsforums.com/library.php?do=view_item&itemid=406`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(`${rdfs}label`),
      literal(`Power Per Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(`${rdfs}label`),
      literal(`Power per Area Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-4T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerAreaQuarticTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Power per area quartic temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Power Per Electric Charge" is the amount of energy generated by a unit of electric charge.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PowerPerElectricCharge`),
      namedNode(`${rdfs}label`),
      literal(`Power Per Electric Charge`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}expression`),
      literal(`\\(poynting-vector\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-66`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{S} = \\mathbf{E}  \\times \\mathbf{H} \\), where \\(\\mathbf{E}\\) is electric field strength and \\mathbf{H}  is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mathbf{S} \\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Poynting Vector} is the vector product of the electric field strength \\mathbf{E} and the magnetic field strength \\mathbf{H" of the electromagnetic field at a given point. The flux of the Poynting vector through a closed surface is equal to the electromagnetic power passing through this surface. For a periodic electromagnetic field, the time average of the Poynting vector is a vector of which, with certain reservations, the direction may be considered as being the direction of propagation of electromagnetic energy and the magnitude considered as being the average electromagnetic power flux density.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PoyntingVector`),
      namedNode(`${rdfs}label`),
      literal(`Poynting Vector`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(p = \\frac{dF}{dA}\\), where \\(dF\\) is the force component perpendicular to the surface element of area \\(dA\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${rdfs}label`),
      literal(`Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Pressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Burning Rate Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateConstant`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\beta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Burning Rate Index`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureBurningRateIndex`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}expression`),
      literal(`\\(pres-coef\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\beta = \\left (\\frac{\\partial p}{\\partial T} \\right )_V\\), where \\(p\\) is \\(pressure\\),  \\(T\\) is thermodynamic temperature and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\beta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Friction_loss`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`"Pressure Loss per Length" refers to the power lost in overcoming the friction between two moving surfaces. Also referred to as "Friction Loss".`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureLossPerLength`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Loss per Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Percentage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressurePercentage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${rdfs}label`),
      literal(`Pressure Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Prevalence`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In epidemiology, prevalence is the proportion of a particular population found to be affected by a medical condition (typically a disease or a risk factor such as smoking or seatbelt use) at a specific time. (Wikipedia)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${rdfs}label`),
      literal(`Prevalence`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Prevalence`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${dcterms}description`),
      literal(`The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of \\(n\\) ranges from 1 to the shell containing the outermost electron of that atom.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Principal Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${dcterms}description`),
      literal(`The propagation constant, symbol \\(\\gamma\\), for a given system is defined by the ratio of the amplitude at the source of the wave to the amplitude at some distance x.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Propagation_constant`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\gamma = \\alpha + j\\beta\\), where \\(\\alpha\\) is the attenuation coefficient and \\(\\beta\\) is the phase coefficient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropagationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Propagation coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${rdfs}label`),
      literal(`Propellant Burn Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantBurnRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}BurnRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_f`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${rdfs}label`),
      literal(`Propellant Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Propellant Mean Bulk Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${skos}altLabel`),
      literal(`PMBT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantMeanBulkTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Propellant Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}PropellantTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${dcterms}description`),
      literal(`"Quality Factor", of a resonant circuit, is a measure of the "goodness" or quality of a resonant circuit. A higher value for this figure of merit correspondes to a more narrow bandwith, which is desirable in many applications. More formally, \\(Q\\) is the ratio of power stored to power dissipated in the circuit reactance and resistance, respectively`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.sourcetronic.com/electrical-measurement-glossary/quality-factor.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.allaboutcircuits.com/vol_2/chpt_6/6.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`If \\(\\underline{Z} = R + jX\\), then \\(Q = \\left | X \\right |/R\\), where \\(\\underline{Z}\\) is impedance, \\(R\\) is resistance, and \\(X\\) is reactance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${vaem}todo`),
      literal(`Resolve Quality Facor - electronics and also doses`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdfs}label`),
      literal(`Quality Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QualityFactor`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Resistance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Quantum Number" describes values of conserved quantities in the dynamics of the quantum system. Perhaps the most peculiar aspect of quantum mechanics is the quantization of observable quantities, since quantum numbers are discrete sets of integers or half-integers.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}ElectricDipoleMoment_QuarticPerEnergy_Cubic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E4L-2I0M-3H0T10D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Quartic Electric Dipole Moment per Cubic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}QuarticElectricDipoleMomentPerCubicEnergy`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A quantity of mass held by Program/project management to mitigate the risk of over-predicted performance estimates, under predicted mass estimates, and future operational and mission specific requirements (program mass reserve, manager's mass reserve, launch window reserve, performance reserve, etc.).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}symbol`),
      literal(`M_{E}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${qudt}url`),
      literal(`http://eaton.math.rpi.edu/CSUMS/Papers/EcoEnergy/koojimanconserve.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Reserve Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RESERVE-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.analog.com/en/technical-articles/measurement-control-rf-power-parti.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radio-Frequency Power. Power level of electromagnetic waves alternating at the frequency of radio waves (up to 10^10 Hz).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${rdfs}label`),
      literal(`RF-Power Level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RF-Power`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${dcterms}description`),
      literal(`In classical geometry, the "Radial Distance" is a coordinate in polar coordinate systems (r, \\(\\theta\\)). Basically the radial distance is the scalar Euclidean distance between a point and the origin of the system of coordinates.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radial_distance_(geometry)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(d = \\sqrt{r_1^2 + r_2^2 -2r_1r_2\\cos{(\\theta_1 - \\theta_2)}}\\), where \\(P_1\\) and \\(P_2\\) are two points with polar coordinates \\((r_1, \\theta_1)\\) and \\((r_2, \\theta_2)\\), respectively, and \\(d\\) is the distance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(r_Q, \\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${rdfs}label`),
      literal(`Radial Distance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadialDistance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L = \\frac{dI}{dA}\\frac{1}{cos\\alpha}\\), where \\(dI\\) is the radiant intensity emitted from an element of the surface area \\(dA\\), and angle \\(\\alpha\\) is the angle between the normal to the surface and the given direction.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Radiance" is a radiometric measure that describes the amount of light that passes through or is emitted from a particular area, and falls within a given solid angle in a specified direction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${rdfs}label`),
      literal(`Radiance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerAreaAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.encyclo.co.uk/define/radiance%20factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\beta = \\frac{L_n}{L_d}\\), where \\(L_n\\) is the radiance of a surface element in a given direction and \\(L_d\\) is the radiance of the perfect reflecting or transmitting diffuser identically irradiated and viewed. Reflectance factor is equivalent to radiance factor or luminance factor (when the cone angle is infinitely small, and is equivalent to reflectance when the cone angle is \\(2π sr\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\beta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiance Factor is the ratio of the radiance of the surface element in the given direction to that of a perfect reflecting or transmitting diffuser identically irradiated unit.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadianceFactor`),
      namedNode(`${rdfs}label`),
      literal(`Radiance Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Irradiance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M = \\frac{d\\Phi}{dA}\\), where \\(d\\Phi\\) is the radiant flux leaving the element of the surface area \\(dA\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Irradiance and Radiant Emittance are radiometry terms for the power per unit area of electromagnetic radiation at a surface. "Irradiance" is used when the electromagnetic radiation is incident on the surface. "Radiant emmitance" (or "radiant exitance") is used when the radiation is emerging from the surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Emmitance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEmmitance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}abbreviation`),
      literal(`M-L2-PER-T2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiant_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Q_e\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In radiometry,"Radiant Energy} is the energy of electromagnetic waves. The quantity of radiant energy may be calculated by integrating radiant flux (or power) with respect to time.  In nuclear physics, \\textit{Radiant Energy" is energy, excluding rest energy, of the particles that are emitted, transferred, or received.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Q_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergy`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiant_energy_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31892`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w\\), \\(\\rho = \\frac{dQ}{dV}\\), where \\(dQ\\) is the radiant energy in an elementary three-dimensional domain, and \\(dV\\) is the volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(w, \\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Radiant Energy Density", or radiant power, is the radiant energy per unit volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantEnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Energy Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}abbreviation`),
      literal(`J-PER-CM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://omlc.ogi.edu/education/ece532/class1/irradiance.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(H = \\int_{0}^{\\Delta t}{E}{dt}\\), where \\(E\\) is the irradiance acting during the time interval with duration \\(\\Delta t\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiant exposure is a measure of the total radiant energy incident on a surface per unit area; equal to the integral over time of the radiant flux density. Also known as exposure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${qudt}symbol`),
      literal(`H_e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Exposure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantExposure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(H_0 = \\int_{0}^{\\Delta t}{E_0}{dt}\\), where \\(E_0\\) is the spherical radiance acting during time interval with duration \\(\\Delta t\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}symbol`),
      literal(`H_e,0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluence`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Fluence`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}abbreviation`),
      literal(`M-PER-T3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/FT07376.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_0 = \\int{L}{d\\Omega}\\), where \\(d\\Omega\\) is the solid angle of each elementary beam passing through the given point and \\(L\\) its radiance at that point in the direction of the beam.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}symbol`),
      literal(`E_e,0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Fluence Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFluenceRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiant_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Phi = \\frac{dQ}{dt}\\), where \\(dQ\\) is the radiant energy emitted, transferred, or received during a time interval of the duration \\(dt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiant Flux, or radiant power, is the measure of the total power of electromagnetic radiation (including infrared, ultraviolet, and visible light). The power may be the total emitted from a source, or the total landing on a particular surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantFlux`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiant_intensity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I = \\frac{d\\Phi}{d\\Omega}\\), where \\(d\\Phi\\) is the radiant flux leaving the source in an elementary cone containing the given direction with the solid angle \\(d\\Omega\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiant Intensity is a measure of the intensity of electromagnetic radiation. It is defined as power per unit solid angle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiantIntensity`),
      namedNode(`${rdfs}label`),
      literal(`Radiant Intensity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${dcterms}description`),
      literal(`"Radiative Heat Transfer" is proportional to \\((T_1^4 - T_2^4)\\) and area of the surface, where \\(T_1\\) and \\(T_2\\) are thermodynamic temperatures of two black surfaces, for non totally black surfaces an additional factor less than 1 is needed.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Heat_transfer#Radiation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi_r\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Radiative Heat Transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiativeHeatTransfer`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Radiosity is the total emitted and reflected radiation leaving a surface.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${rdfs}label`),
      literal(`Radiosity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radiosity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Radius`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radius`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(r = \\frac{d}{2}\\), where \\(d\\) is the circle diameter.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In classical geometry, the "Radius" of a circle or sphere is any line segment from its center to its perimeter the radius of a circle or sphere is the length of any such segment.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${qudt}symbol`),
      literal(`r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${rdfs}label`),
      literal(`Radius`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Radius`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radius_of_curvature_(mathematics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In geometry, the "Radius of Curvature", R, of a curve at a point is a measure of the radius of the circular arc which best approximates the curve at that point.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${rdfs}label`),
      literal(`Radius of Curvature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RadiusOfCurvature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${dcterms}description`),
      literal(`The specific heat ratio of a gas is the ratio of the specific heat at constant pressure, \\(c_p\\), to the specific heat at constant volume, \\(c_V\\). It is sometimes referred to as the "adiabatic index} or the \\textit{heat capacity ratio} or the \\textit{isentropic expansion factor} or the \\textit{adiabatic exponent} or the \\textit{isentropic exponent".`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Specific_heat_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\gamma = c_p / c_V\\), where \\(c\\) is the specific heat of a gas, \\(c_p\\) is specific heat capacity at constant pressure, \\(c_V\\) is specific heat capacity at constant volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varkappa\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${rdfs}label`),
      literal(`Ratio of Specific Heat Capacities`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RatioOfSpecificHeatCapacities`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}IsentropicExponent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Electrical_reactance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Electrical_reactance?oldid=494180019`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-46`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(X = im \\underline{Z}\\), where \\(\\underline{Z}\\) is impedance and \\(im\\) denotes the imaginary part.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Reactance" is the opposition of a circuit element to a change of electric current or voltage, due to that element's inductance or capacitance. A built-up electric field resists the change of voltage on the element, while a magnetic field resists the change of current. The notion of reactance is similar to electrical resistance, but they differ in several respects. Capacitance and inductance are inherent properties of an element, just like resistance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${qudt}symbol`),
      literal(`X`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${rdfs}label`),
      literal(`Reactance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_reaction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Reaction Energy" in a nuclear reaction, is the sum of the kinetic energies and photon energies of the reaction products minus the sum of the kinetic and photon energies of the reactants.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Reaction Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactionEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${dcterms}description`),
      literal(`"Reactive Power}, for a linear two-terminal element or two-terminal circuit, under sinusoidal conditions, is the quantity equal to the product of the apparent power \\(S\\) and the sine of the displacement angle \\(\\psi\\). The absolute value of the reactive power is equal to the non-active power. The ISO (and SI) unit for reactive power is the voltampere. The special name \\(\\textit{var}\\) and symbol \\(\\textit{var}\\) are given in IEC 60027 1.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-44`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Q = lm \\underline{S}\\), where \\(\\underline{S}\\) is complex power. Alternatively expressed as: \\(Q = S \\cdot \\sin  \\psi\\), where \\(\\psi\\) is the displacement angle.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${rdfs}label`),
      literal(`Reactive Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactivePower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ComplexPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_chain_reaction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = \\frac{k_{eff} - 1}{k_{eff}}\\), where \\(k_{eff}\\) is the effective multiplication factor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Reactivity" characterizes the deflection of reactor from the critical state.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reactivity`),
      namedNode(`${rdfs}label`),
      literal(`Reactivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.euronuclear.org/info/encyclopedia/r/reactor-time-constant.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Reactor Time Constant", also called the reactor period, is the time during which the neutron flux density in a reactor changes by the factor e = 2.718 (e: basis of natural logarithms), when the neutron flux density increases or decreases exponentially.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${qudt}symbol`),
      literal(`T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${rdfs}label`),
      literal(`Reactor Time Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReactorTimeConstant`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/recombination+coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(-\\frac{dn^+}{dt} = -\\frac{dn^-}{dt} = an^+n^-\\), where \\(n^+\\) and \\(n^-\\) are the ion number densities of positive and negative ions, respectively, recombined during an infinitesimal time interval with duration \\(dt\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Recombination Coefficient" is the rate of recombination of positive ions with electrons or negative ions in a gas, per unit volume, divided by the product of the number of positive ions per unit volume and the number of electrons or negative ions per unit volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RecombinationCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Recombination Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Reflectivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = \\frac{\\Phi_t}{\\Phi_m}\\), where \\(\\Phi_t\\) is the reflected radiant flux or the reflected luminous flux, and \\(\\Phi_m\\) is the radiant flux or luminous flux of the incident radiation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Refectance and reflectivity generally refer to the fraction of incident electromagnetic power that is reflected at an interface, while the term "reflection coefficient" is used for the fraction of electric field reflected. Reflectance is always a positive real number.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Refectance`),
      namedNode(`${rdfs}label`),
      literal(`Refectance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Dissipation_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(r= \\frac{P_r}{P_i}\\), where \\(P_r\\) is the reflected sound power, and \\(P_i\\) is the incident sound power.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Reflectance, or reflection factor for sound power, is the ratio of reflected sound power to incident sound power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}symbol`),
      literal(`r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reflectance`),
      namedNode(`${rdfs}label`),
      literal(`Reflectance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thefreedictionary.com/reflectance+factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(R = \\frac{\\Phi_n}{\\Phi_d}\\), where \\(\\Phi_n\\) is the radiant flux or luminous flux reflected in the directions delimited by a given cone and \\(\\Phi_d\\) is the flux reflected in the same directions by an identically radiated diffuser of reflectance equal to 1.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Reflectance Factor is the measure of the ability of a surface to reflect light or other electromagnetic radiation, equal to the ratio of the reflected flux to the incident flux.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReflectanceFactor`),
      namedNode(`${rdfs}label`),
      literal(`Reflectance Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Refractive_index`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(n = \\frac{c_0}{c}\\), where \\(c_0\\) is the speed of light in vacuum, and \\(c\\) is the speed of light in the medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"refractive index" or index of refraction n of a substance (optical medium) is a dimensionless number that describes how light, or any other radiation, propagates through that medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${qudt}symbol`),
      literal(`n`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RefractiveIndex`),
      namedNode(`${rdfs}label`),
      literal(`Refractive index`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_atomic_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Relative Atomic Mass " is a dimensionless physical quantity, the ratio of the average mass of atoms of an element (from a given source) to 1/12 of the mass of an atom of carbon-12 (known as the unified atomic mass unit)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${qudt}symbol`),
      literal(`A_r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${rdfs}label`),
      literal(`Relative Atomic Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeAtomicMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Relative Humidity}\\) is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature. The relative humidity of air depends not only on temperature but also on the pressure of the system of interest. \\(\\textit{Relative Humidity}\\) is also referred to as \\(\\textit{Relative Partial Pressure}\\). Relative partial pressure is often referred to as \\(RH\\) and expressed in percent.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT_RH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_humidity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = p / p_{sat}\\), where \\(p\\) is partial pressure of vapour,  \\(p_{sat}\\) is thermodynamic temperature and \\(V\\) is its partial pressure at saturation (at the same temperature). Relative partial pressure is often referred to as \\(RH\\) and expressed in percent. \\(\\textit{Relative Humidity}\\) is also referred to as \\(\\textit{Relative Partial Pressure}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${rdfs}label`),
      literal(`Relative Humidity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}AbsoluteHumidity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${skos}altLabel`),
      literal(`RH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeHumidity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}LuminousFluxRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Relative Luminous Flux or Relative Luminous Power is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light. It is expressed as a percentage or fraction of full power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${rdfs}label`),
      literal(`Relative Luminous Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeLuminousFlux`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = v / v_{sat}\\), where \\(v\\) is mass concentration of water vapour,  \\(v_{sat}\\) is its mass concentration of water vapour at saturation (at the same temperature). For normal cases, the relative partial pressure may be assumed to be equal to relative mass concentration of vapour.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Relative Mass Concentration of Vapour" is one of a number of "Relative Concentration" quantities  defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${rdfs}label`),
      literal(`Relative Mass Concentration of Vapour`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassConcentrationOfVapour`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Binding_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(B_r = \\frac{B}{m_u}\\), where \\(B\\) is the mass defect and \\(m_u\\) is the unified atomic mass constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Relative Mass Defect" is the mass defect between the monoisotopic mass of an element and the mass of its A + 1 or its A + 2 isotopic cluster.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${qudt}symbol`),
      literal(`B_r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${rdfs}label`),
      literal(`Relative Mass Defect`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassDefect`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDefect`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relative_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(d = \\frac{\\rho}{\\rho_0}\\), where \\(\\rho\\) is mass density of a substance and \\(\\rho_0\\) is the mass density of a reference substance under conditions that should be specified for both substances.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Relative density, or specific gravity, is the ratio of the density (mass of a unit volume) of a substance to the density of a given reference material.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassDensity`),
      namedNode(`${rdfs}label`),
      literal(`Relative Mass Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Mass_excess`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\Delta_r = \\frac{\\Delta}{m_u}\\), where \\(\\Delta\\) is the mass excess and \\(m_u\\) is the unified atomic mass constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Delta_r\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Relative Mass Excess" is the mass excess between the monoisotopic mass of an element and the mass of its A + 1 or its A + 2 isotopic cluster (extrapolated from relative mass defect).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassExcess`),
      namedNode(`${rdfs}label`),
      literal(`Relative Mass Excess`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\psi = x / x_{sat}\\), where \\(x\\) is mass ratio of water vapour to dry gas,  \\(x_{sat}\\) is its mass raio of water vapour to dry gas at saturation (at the same temperature).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\psi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Relative Mass Ratio of Vapour" is one of a number of "Relative Concentration" quantities  defined by ISO 8000.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMassRatioOfVapour`),
      namedNode(`${rdfs}label`),
      literal(`Relative Mass Ratio of Vapour`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Molecular_mass#Relative_molecular_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Relative Molecular Mass " is equivalent to the numerical value of the molecular mass expressed in unified atomic mass units. The molecular mass (m) is the mass of a molecule.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_r`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${rdfs}label`),
      literal(`Relative Molecular Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativeMolecularMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi = p / p_{sat}\\), where \\(p\\) is partial pressure of vapour,  \\(p_{sat}\\) is thermodynamic temperature and \\(V\\) is its partial pressure at saturation (at the same temperature). Relative partial pressure is often referred to as \\(RH\\) and expressed in percent. \\(\\textit{Relative Partial Pressure}\\) is also referred to as \\(\\textit{Relative Humidity}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${rdfs}label`),
      literal(`Relative Partial Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${skos}altLabel`),
      literal(`RH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePartialPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PressureRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}expression`),
      literal(`\\(rel-pres-coef\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_p = \\frac{1}{p}\\left (\\frac{\\partial p}{\\partial T} \\right )_V\\), where \\(p\\) is \\(pressure\\),  \\(T\\) is thermodynamic temperature and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_p\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelativePressureCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Relative Pressure Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Relaxation_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Relaxation TIme" is a time constant for exponential decay towards equilibrium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${rdfs}label`),
      literal(`Relaxation TIme`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RelaxationTIme`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Magnetic_reluctance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(R_m = \\frac{U_m}{\\Phi}\\), where \\(U_m\\) is magnetic tension, and \\(\\Phi\\) is magnetic flux.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Reluctance" or magnetic resistance, is a concept used in the analysis of magnetic circuits. It is analogous to resistance in an electrical circuit, but rather than dissipating electric energy it stores magnetic energy. In likeness to the way an electric field causes an electric current to follow the path of least resistance, a magnetic field causes magnetic flux to follow the path of least magnetic reluctance. It is a scalar, extensive quantity, akin to electrical resistance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${qudt}symbol`),
      literal(`R_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdfs}label`),
      literal(`Reluctance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFlux`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Reluctance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticTension`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Residual-resistance_ratio`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_R\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Residual Resistivity" for metals, is the resistivity extrapolated to zero thermodynamic temperature.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResidualResistivity`),
      namedNode(`${rdfs}label`),
      literal(`Residual Resistivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckImpedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Resistance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-45`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(R = \\frac{u}{i}\\), where \\(u\\) is instantaneous voltage and \\(i\\) is instantaneous electric current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The electrical resistance of an object is a measure of its opposition to the passage of a steady electric current.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}label`),
      literal(`Resistance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InstantaneousPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${rdfs}label`),
      literal(`Resistance Percentage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistancePercentage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E-2L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${rdfs}label`),
      literal(`Resistance Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResistanceRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM-M2-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OHM-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-2L3I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-12-04`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho = \\frac{1}{\\sigma}\\), if it exists, where \\(\\sigma\\) is conductivity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Resistivity" is the inverse of the conductivity when this inverse exists.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${rdfs}label`),
      literal(`Resistivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Resistivity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Conductivity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Nuclear_reaction_analysis`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Resonance Energy" in a nuclear reaction, is the kinetic energy of an incident particle, in the reference frame of the target, corresponding to a resonance in a nuclear reaction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_r, E_{res}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Resonance Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Four_factor_formula`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Resonance Escape Probability" is the fraction of fission neutrons that manage to slow down from fission to thermal energies without being absorbed. In an infinite medium, the probability that a neutron slowing down will traverse all or some specified portion of the range of resonance energies without being absorbed.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbability`),
      namedNode(`${rdfs}label`),
      literal(`Resonance Escape Probability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Fraction of fission neutrons that manage to slow down from fission to thermal energies without being absorbed.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${rdfs}label`),
      literal(`Resonance Escape Probability For Fission`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ResonanceEscapeProbabilityForFission`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BREATH-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Respiratory_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Respiratory_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Respiratory rate (Vf, Rf or RR) is also known by respiration rate, pulmonary ventilation rate, ventilation rate, or breathing frequency is the number of breaths taken within a set amount of time, typically 60 seconds. A normal respiratory rate is termed eupnea, an increased respiratory rate is termed tachypnea and a lower than normal respiratory rate is termed bradypnea.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${qudt}symbol`),
      literal(`Vf, Rf or RR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RespiratoryRate`),
      namedNode(`${rdfs}label`),
      literal(`Respiratory Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Invariant_mass#Rest_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For a particle, \\(E_0 = m_0 c_0^2\\), where \\(m_0\\) is the rest mass of that particle, and \\(c_0\\) is the speed of light in vacuum.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Rest Energy" is the energy equivalent of the rest mass of a body, equal to the rest mass multiplied by the speed of light squared.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`E_0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Rest Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${dcterms}description`),
      literal(`The \\(\\textit{Rest Mass}\\), the invariant mass, intrinsic mass, proper mass, or (in the case of bound systems or objects observed in their center of momentum frame) simply mass, is a characteristic of the total energy and momentum of an object or a system of objects that is the same in all frames of reference related by Lorentz transformations. The mass of a particle type X (electron, proton or neutron) when that particle is at rest. For an electron: \\(m_e = 9,109 382 15(45) 10^{-31} kg\\), for a proton: \\(m_p = 1,672 621 637(83) 10^{-27} kg\\), for a neutron: \\(m_n = 1,674 927 211(84) 10^{-27} kg\\). Rest mass is often denoted \\(m_0\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Invariant_mass`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${qudt}symbol`),
      literal(`m_X`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${rdfs}label`),
      literal(`Rest Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${skos}altLabel`),
      literal(`Proper Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RestMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Reverberation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Reverberation Time is the time required for reflections of a direct sound to decay by 60 dB below the level of the direct sound.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${qudt}symbol`),
      literal(`T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${rdfs}label`),
      literal(`Reverberation Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReverberationTime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Reynolds_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Reynolds_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Re = \\frac{\\rho uL}{\\mu} = \\frac{uL}{\nu}\\), where \\(\\rho\\) is mass density, \\(u\\) is speed, \\(L\\) is length,  \\(\\mu\\) is dynamic viscosity, and \\(\nu\\) is kinematic viscosity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31896`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Reynolds Number" (Re) is a dimensionless number that gives a measure of the ratio of inertial forces to viscous forces and consequently quantifies the relative importance of these two types of forces for given flow conditions.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${qudt}symbol`),
      literal(`Re`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${rdfs}label`),
      literal(`Reynolds Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ReynoldsNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${ns14}Reynolds_number`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M2-K2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H-2T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermionic_emission`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}latexDefinition`),
      literal(`The thermionic emission current, \\(J\\), for a metal is \\(J = AT^2\\exp{(-\\frac{\\Phi}{kT})}\\), where \\(T\\) is thermodynamic temperature, \\(k\\) is the Boltzmann constant, and \\(\\Phi\\) is a work function.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Richardson Constant" is a constant used in developing thermionic emission current density for a metal.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RichardsonConstant`),
      namedNode(`${rdfs}label`),
      literal(`Richardson Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Transverse force on rocket due to an atmosphere`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${qudt}symbol`),
      literal(`T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${rdfs}label`),
      literal(`Rocket Atmospheric Transverse Force`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RocketAtmosphericTransverseForce`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC2/HTML/link/ifcrotationalmassmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`"Rotational Mass" denotes the inertia of a body with respect to angular acceleration. It is usually measured in kg*m^2.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalMass`),
      namedNode(`${rdfs}label`),
      literal(`Rotational Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Rotational Stiffness is the extent to which an object resists deformation in response to an applied torque.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${rdfs}label`),
      literal(`Rotational Stiffness`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}RotationalStiffness`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-SEC-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-58`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mathbf{H} = -grad V_m\\), where \\(\\mathbf{H}\\) is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Scalar Magnetic Potential" is the scalar potential of an irrotational magnetic field strength. The negative of the gradient of the scalar magnetic potential is the irrotational magnetic field strength. The magnetic scalar potential is not unique since any constant scalar field can be added to it without changing its gradient.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${qudt}symbol`),
      literal(`V_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${rdfs}label`),
      literal(`Scalar Magnetic Potential`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ScalarMagneticPotential`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Second_moment_of_area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I_a = \\int r^2_Q dA\\), where \\(r_Q\\) is the radial distance from a \\(Q-axis\\) and \\(A\\) is area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The moment of inertia, also called mass moment of inertia, rotational inertia, polar moment of inertia of mass, or the angular mass is a property of a distribution of mass in space that measures its resistance to rotational acceleration about an axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondAxialMomentOfArea`),
      namedNode(`${rdfs}label`),
      literal(`Second Axial Moment of Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The second moment of area is a property of a physical object that can be used to predict its resistance to bending and deflection. The deflection of an object under load depends not only on the load, but also on the geometry of the object's cross-section.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Second_moment_of_area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${rdfs}label`),
      literal(`Second Moment of Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondMomentOfArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MomentOfInertia`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MOL-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondOrderReactionRateConstant`),
      namedNode(`${rdfs}label`),
      literal(`Reaction Rate Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Second_moment_of_area`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I_p = \\int r^2_Q dA\\), where \\(r_Q\\) is the radial distance from a \\(Q-axis\\) and \\(A\\) is area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The moment of inertia, also called mass moment of inertia, rotational inertia, polar moment of inertia of mass, or the angular mass is a property of a distribution of mass in space that measures its resistance to rotational acceleration about an axis.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondPolarMomentOfArea`),
      namedNode(`${rdfs}label`),
      literal(`Second Polar Moment of Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Mass ratio for the second stage of a multistage launcher.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${qudt}symbol`),
      literal(`R_2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${rdfs}label`),
      literal(`Second Stage Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SecondStageMassRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M5`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L5I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD1/HTML/link/ifcsectionalareaintegralmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The sectional area integral measure is typically used in torsional analysis. It is usually measured in M⁵.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionAreaIntegral`),
      namedNode(`${rdfs}label`),
      literal(`Section Area Integral`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Section_modulus`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(Z = \\frac{I_a}{(r_Q)_{max}}\\), where \\(I_a\\) is the second axial moment of area and \\((r_Q)_{max}\\) is the maximum radial distance of any point in the surface considered from the \\(Q-axis\\) with respect to which \\(I_a\\) is defined.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Section Modulus is a geometric property for a given cross-section used in the design of beams or flexural members.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${qudt}symbol`),
      literal(`Z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SectionModulus`),
      namedNode(`${rdfs}label`),
      literal(`Section Modulus`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermopower`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S_{ab} = \\frac{dE_{ab}}{dT}\\), where \\(E_{ab}\\) is the thermosource voltage between substances a and b, \\(T\\) is the thermodynamic temperature of the hot junction.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Seebeck Coefficient", or thermopower, or thermoelectric power of a material is a measure of the magnitude of an induced thermoelectric voltage in response to a temperature difference across that material.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`S_{ab}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SeebeckCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Seebeck Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IU-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${rdfs}label`),
      literal(`Serum or Plasma Level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SerumOrPlasmaLevel`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BIT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERLANG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExbiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GibiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HART`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KibiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SHANNON`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TebiBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraBYTE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Information entropy applied to a collection of indiviual organisms [of selected species] in a sample area. A measure of biodiversity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns18}qudt-extension`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${rdfs}label`),
      literal(`Shannon Diversity Index`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShannonDiversityIndex`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InformationEntropy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${dcterms}description`),
      literal(`The Shear Modulus or modulus of rigidity, denoted by \\(G\\), or sometimes \\(S\\) or \\(\\mu\\), is defined as the ratio of shear stress to the shear strain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Shear_modulus`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G = \\frac{\\tau}{\\gamma}\\), where \\(\\tau\\) is the shear stress and \\(\\gamma\\) is the shear strain.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearModulus`),
      namedNode(`${rdfs}label`),
      literal(`Shear Modulus`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Deformation_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\gamma = \\frac{\\Delta x}{d}\\), where \\(\\Delta x\\) is the parallel displacement between two surfaces of a layer of thickness \\(d\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Shear Strain is the amount of deformation perpendicular to a given line rather than parallel to it. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${rdfs}label`),
      literal(`Shear Strain`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStrain`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Strain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stress_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\tau = \\frac{dF_t}{dA}\\), where \\(dF_t\\) is the tangential component of force and \\(dA\\) is the area of the surface element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Shear stress occurs when the force  occurs in shear, or perpendicular to the normal.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${rdfs}label`),
      literal(`Shear Stress`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ShearStress`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Stress`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(r, \\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Short-Range Order Parameter" is the fraction of the nearest-neighbor atom pairs in an Ising ferromagnet having magnetic moments in one direction, minus the fraction having magnetic moments in the opposite direction.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Short-RangeOrderParameter`),
      namedNode(`${rdfs}label`),
      literal(`Short-Range Order Parameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalDetectionThreshold`),
      namedNode(`${rdfs}label`),
      literal(`Signal Detection Threshold`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Signal_strength`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L1I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In telecommunications, particularly in radio, signal strength refers to the magnitude of the electric field at a reference point that is a significant distance from the transmitting antenna. It may also be referred to as received signal level or field strength. Typically, it is expressed in voltage per length or signal power received by a reference antenna. High-powered transmissions, such as those used in broadcasting, are expressed in dB-millivolts per metre (dBmV/m).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${rdfs}label`),
      literal(`Signal Strength`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricField`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SignalStrength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${qudt}symbol`),
      literal(`R_o`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${rdfs}label`),
      literal(`Single Stage Launcher Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SingleStageLauncherMassRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MassRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Slowing-Down Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the neutron source and the point where a neutron reaches a given energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${qudt}symbol`),
      literal(`L_s^2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${rdfs}label`),
      literal(`Slowing-Down Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownArea`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Area`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M3-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://encyclopedia2.thefreedictionary.com/slowing-down+density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q = -\\frac{dn}{dt}\\), where \\(n\\) is the number density and \\(dt\\) is the duration.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Slowing-Down Density" is a measure of the rate at which neutrons lose energy in a nuclear reactor through collisions; equal to the number of neutrons that fall below a given energy per unit volume per unit time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${qudt}symbol`),
      literal(`q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownDensity`),
      namedNode(`${rdfs}label`),
      literal(`Slowing-Down Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://nuclearpowertraining.tpub.com/h1013v2/css/h1013v2_32.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Slowing-Down Length" is the average straight-line distance that a fast neutron will travel between its introduction into the slowing-downmedium (moderator) and thermalization.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${qudt}symbol`),
      literal(`L_s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${rdfs}label`),
      literal(`Slowing-Down Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Slowing-DownLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A specific volume that is the ratio of the amount of substance adsorbed per unit weight of organic carbon in the soil or sediment to the concentration of the chemical in aqueous solution at equilibrium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Soil Adsorption Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoilAdsorptionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Solid_angle`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${rdfs}label`),
      literal(`Solid Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidAngle`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AreaRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://pveducation.org/pvcdrom/pn-junction/diffusion-length`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L = \\sqrt{D\\tau}\\), where \\(D\\) is the diffusion coefficient and \\(\\tau\\) is lifetime.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Solid State Diffusion Length" is the average distance traveled by a particle, such as a minority carrier in a semiconductor `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${qudt}symbol`),
      literal(`L, L_n, L_p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${rdfs}label`),
      literal(`Diffusion Length (Solid State Physics)`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SolidStateDiffusionLength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoMOL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoMOL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L-3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An amount of substance per unit volume that is the concentration of a saturated solution expressed as the ratio of the solute concentration over the volume of water.  A substance's solubility fundamentally depends on several physical and chemical properties of the solution as well as the environment it is in.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${rdfs}label`),
      literal(`Water Solubility`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Solubility_Water`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AmountOfSubstancePerUnitVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${dcterms}description`),
      literal(`Sound energy density is the time-averaged sound energy in a given volume divided by that volume. The sound energy density or sound density (symbol \\(E\\) or \\(w\\)) is an adequate measure to describe the sound field at a given point as a sound energy value.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_energy_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E = \\frac{I}{c}\\), where \\(I\\) is the sound intensity in \\(\\frac{W}{m^2}\\) and \\(c\\) is the sound speed in \\(\\frac{m}{s}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Sound energy density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundEnergyDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M2H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.acoustic-glossary.co.uk/definitions-s.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E = \\int_{t1}^{t2}p^2dt\\), where \\(t1\\) and \\(t2\\) are the starting and ending times for the integral and \\(p\\) is the sound pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound Exposure is the energy of the A-weighted sound calculated over the measurement time(s). For a given period of time, an increase of 10 dB(A) in sound pressure level corresponds to a tenfold increase in E.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${qudt}symbol`),
      literal(`E`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposure`),
      namedNode(`${rdfs}label`),
      literal(`Sound exposure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${dcterms}description`),
      literal(`Sound Exposure Level abbreviated as \\(SEL\\) and \\(LAE\\), is the total noise energy produced from a single noise event, expressed as a logarithmic ratio from a reference level.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.diracdelta.co.uk/science/source/s/o/sound%20exposure%20level/source.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L_E = 10 \\log_{10} \\frac{E}{E_0} dB\\), where \\(E\\) is sound power and the reference value is \\(E_0 = 400 \\mu Pa^2 s\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundExposureLevel`),
      namedNode(`${rdfs}label`),
      literal(`Sound exposure level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}abbreviation`),
      literal(`w/m2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_intensity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I = pv\\), where \\(p\\) is the sound pressure and \\(v\\) is sound particle velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound intensity or acoustic intensity (\\(I\\)) is defined as the sound power \\(P_a\\) per unit area \\(A\\). The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${rdfs}label`),
      literal(`Sound intensity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}PowerPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${dcterms}description`),
      literal(`In a compressible sound transmission medium - mainly air - air particles get an accelerated motion: the particle acceleration or sound acceleration with the symbol a in \\(m/s2\\). In acoustics or physics, acceleration (symbol: \\(a\\)) is defined as the rate of change (or time derivative) of velocity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GALILEO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-M2-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Particle_acceleration`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a = \\frac{\\partial v}{\\partial t}\\), where \\(v\\) is sound particle velocity and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${rdfs}label`),
      literal(`Sound particle acceleration`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleAcceleration`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}abbreviation`),
      literal(`l`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Particle_displacement`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound Particle Displacement is the nstantaneous displacement of a particle in a medium from what would be its position in the absence of sound waves.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${qudt}symbol`),
      literal(`ξ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${rdfs}label`),
      literal(`Sound Particle Displacement`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleDisplacement`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Particle_velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(v = \\frac{\\partial\\delta }{\\partial t}\\), where \\(\\delta\\) is sound particle displacement and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound Particle velocity is the velocity v of a particle (real or imagined) in a medium as it transmits a wave. In many cases this is a longitudinal wave of pressure as with sound, but it can also be a transverse wave as with the vibration of a taut string. When applied to a sound wave through a medium of a fluid like air, particle velocity would be the physical speed of a parcel of fluid as it moves back and forth in the direction the sound wave is travelling as it passes.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Sound particle velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundParticleVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${dcterms}description`),
      literal(`Sound power or acoustic power \\(P_a\\) is a measure of sonic energy \\(E\\) per time \\(t\\) unit. It is measured in watts and can be computed as sound intensity (\\(I\\)) times area (\\(A\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_power`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(P_a = IA\\), where \\(I\\) is the sound intensity in \\(\\frac{W}{m^2}\\) and \\(A\\) is the area in \\(m^2\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${qudt}symbol`),
      literal(`P`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${rdfs}label`),
      literal(`Sound power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${dcterms}description`),
      literal(`Sound Power Level abbreviated as \\(SWL\\) expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_power#Sound_power_level`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L_W = 10 \\log_{10} \\frac{P}{P_0} dB\\), where \\(P\\) is sound power and the reference value is \\(P_0 =1pW\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPowerLevel`),
      namedNode(`${rdfs}label`),
      literal(`Sound power level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Static_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound Pressure is the difference between instantaneous total pressure and static pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${rdfs}label`),
      literal(`Sound pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${dcterms}description`),
      literal(`Sound pressure level (\\(SPL\\)) or sound level is a logarithmic measure of the effective sound pressure of a sound relative to a reference value. It is measured in decibels (dB) above a standard reference level.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_pressure#Sound_pressure_level`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(L_P = 10 \\log_{10} \\frac{p^2}{p_0^2} dB\\), where \\(p\\) is sound pressure and the reference value in airborne acoustics is \\(p_0 = 20 \\mu Pa\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${qudt}symbol`),
      literal(`L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundPressureLevel`),
      namedNode(`${rdfs}label`),
      literal(`Sound pressure level`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_reduction_index`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(R = 10 \\log (\\frac{1}{\\tau}) dB\\), where \\(\\tau\\) is the transmission factor.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Sound Reduction Index is used to measure the level of sound insulation provided by a structure such as a wall, window, door, or ventilator.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundReductionIndex`),
      namedNode(`${rdfs}label`),
      literal(`Sound reduction index`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${dcterms}description`),
      literal(`Sound Volume Velocity is the product of particle velocity \\(v\\) and the surface area \\(S\\) through which an acoustic wave of frequency \\(f\\) propagates. Also, the surface integral of the normal component of the sound particle velocity over the cross-section (through which the sound propagates). It is used to calculate acoustic impedance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Acoustic_impedance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q= vS\\), where \\(v\\) is sound particle velocity and \\(S\\) is the surface area through which an acoustic wave of frequence \\(f\\) propagates.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SoundVolumeVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Sound volume velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${dcterms}description`),
      literal(`"Source Voltage}, also referred to as \\textit{Source Tension" is the voltage between the two terminals of a voltage source when there is no

electric current through the source. The name "electromotive force} with the abbreviation \\textit{EMF" and the symbol \\(E\\) is deprecated.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${qudt}symbol`),
      literal(`U_s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${rdfs}label`),
      literal(`Source Voltage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Source Voltage Between Substances" is the source voltage between substance a and b.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${qudt}symbol`),
      literal(`E_{ab}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${rdfs}label`),
      literal(`Source Voltage Between Substances`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SourceVoltageBetweenSubstances`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Voltage`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Summation_(neurophysiology)#Spatial_summation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Spatial Summation Function" is he ability to produce a composite signal from the signals coming into the eyes from different directions.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${rdfs}label`),
      literal(`Spatial Summation Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpatialSummationFunction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-SEC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAYL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificAcousticImpedance`),
      namedNode(`${rdfs}label`),
      literal(`Specific Acoustic Impedance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBQ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBQ-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBQ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Specific_activity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a = \\frac{A}{m}\\), where \\(A\\) is the activity of a sample and \\(m\\) is its mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Specific Activity" is the number of decays per unit time of a radioactive sample. The SI unit of radioactive activity is the becquerel (Bq), in honor of the scientist Henri Becquerel.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificActivity`),
      namedNode(`${rdfs}label`),
      literal(`Specific Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textbf{Specific Energy}\\) is defined as the energy per unit mass. Common metric units are \\(J/kg\\). It is an intensive property. Contrast this with energy, which is an extensive property. There are two main types of specific energy: potential energy and specific kinetic energy. Others are the \\(\\textbf{gray}\\) and \\(\\textbf{sievert}\\), which are measures for the absorption of radiation. The concept of specific energy applies to a particular or theoretical way of extracting useful energy from the material considered that is usually implied by context. These intensive properties are each symbolized by using the lower case letter of the symbol for the corresponding extensive property, which is symbolized by a capital letter. For example, the extensive thermodynamic property enthalpy is symbolized by \\(H\\); specific enthalpy is symbolized by \\(h\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Specific_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Specific_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(e = E/m\\), where \\(E\\) is energy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`e`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${unit}GRAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${unit}SV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-FT-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/energy-imparted`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For ionizing radiation, \\(z = \\frac{\\varepsilon}{m}\\), where \\(\\varepsilon\\) is the energy imparted to irradiated matter and \\(m\\) is the mass of that matter.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Specific Energy Imparted", is the energy imparted to an element of irradiated matter divided by the mass, dm, of that element.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${qudt}symbol`),
      literal(`z`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${rdfs}label`),
      literal(`Specific Energy Imparted`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnergyImparted`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Specific Enthalpy}\\) is enthalpy per mass of substance involved. Specific enthalpy is denoted by a lower case h, with dimension of energy per mass (SI unit: joule/kg). In thermodynamics, \\(\\textit{enthalpy}\\) is the sum of the internal energy U and the product of pressure p and volume V of a system: \\(H = U + pV\\).  The internal energy U and the work term pV have dimension of energy, in SI units this is joule; the extensive (linear in size) quantity H has the same dimension.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Entropy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(h = H/m\\), where \\(H\\) is enthalpy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${qudt}symbol`),
      literal(`h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Enthalpy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Enthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Entropy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(s = S/m\\), where \\(S\\) is entropy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Specific Entropy" is entropy per unit of mass.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Entropy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificEntropy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Entropy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(g = G/m\\), where \\(G\\) is Gibbs energy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is "Specific Gibbs Energy}, which is \\textit{Gibbs Energy} per mass of substance involved. \\textit{Specific Gibbs Energy" is denoted by a lower case g, with dimension of energy per mass (SI unit: joule/kg).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Gibbs Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-LB-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-GM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-GM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-GM-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Specific_heat_capacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.taftan.com/thermodynamics/CP.HTM`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Specific Heat Capacity} of a solid or liquid is defined as the heat required to raise unit mass of substance by one degree of temperature. This is \\textit{Heat Capacity} divied by \\textit{Mass". Note that there are corresponding molar quantities.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}label`),
      literal(`Specific Heat Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}HeatCapacity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat at a constant pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${qudt}symbol`),
      literal(`c_p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}label`),
      literal(`Specific heat capacity at constant pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat per constant volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${qudt}symbol`),
      literal(`c_v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}label`),
      literal(`Specific heat capacity at constant volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat per constant volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${qudt}symbol`),
      literal(`c_{sat}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}label`),
      literal(`Specific Heat Capacity at Saturation`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatCapacityAtSaturation`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHeatCapacityAtConstantVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat at a constant pressure.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatPressure`),
      namedNode(`${rdfs}label`),
      literal(`Specific Heat Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM-K-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific heat per constant volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatVolume`),
      namedNode(`${rdfs}label`),
      literal(`Specific Heat Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${dcterms}description`),
      literal(`The ratio of specific heats, for the exhaust gases adiabatic gas constant, is the relative amount of compression/expansion energy that goes into temperature \\(T\\) versus pressure \\(P\\) can be characterized by the heat capacity ratio: \\(\\gamma\\frac{C_P}{C_V}\\), where \\(C_P\\) is the specific heat (also called heat capacity) at constant pressure, while \\(C_V\\) is the specific heat at constant volume. `, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${rdfs}label`),
      literal(`Specific Heats Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHeatsRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${dcterms}description`),
      literal(`Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is \\(\\textit{Specific Helmholtz Energy}\\), which is \\(\\textit{Helmholz Energy}\\) per mass of substance involved.\\( \\textit{Specific Helmholz Energy}\\) is denoted by a lower case u, with dimension of energy per mass (SI unit: joule/kg).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a = A/m\\), where \\(A\\) is Helmholtz energy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Helmholtz Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${dcterms}description`),
      literal(`The impulse produced by a rocket divided by the mass \\(mp\\) of propellant consumed. Specific impulse \\({I_{sp}}\\) is a widely used measure of performance for chemical, nuclear, and electric rockets. It is usually given in seconds for both U.S. Customary and International System (SI) units.  The impulse produced by a rocket is the thrust force \\(F\\) times its duration \\(t\\) in seconds. \\(I_{sp}\\) is the thrust per unit mass flowrate, but with \\(g_o\\), is the thrust per weight flowrate. The specific impulse is given by the equation: \\(I_{sp} = \\frac{F}{\\dot{m}g_o}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.grc.nasa.gov/WWW/K-12/airplane/specimp.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${rdfs}label`),
      literal(`Specific Impulse`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${rdfs}label`),
      literal(`Specific Impulse by Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${rdfs}label`),
      literal(`Specific Impulse by Weight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificImpulseByWeight`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.citizendium.org/wiki/Enthalpy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(u = U/m\\), where \\(U\\) is thermodynamic energy and \\(m\\) is mass.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is specific internal energy, which is energy per mass of substance involved. Specific internal energy is denoted by a lower case u, with dimension of energy per mass (SI unit: joule/kg).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Specific Internal Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MassieuFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}PlanckFunction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificEnthalpy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificGibbsEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificInternalEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificHelmholtzEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-M2-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://goldbook.iupac.org/O04313.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_m = \\alpha \\frac{A}{m}\\), where \\(\\alpha\\) is the angle of optical rotation, and \\(m\\) is the mass of the optically active component in the path of a linearly polarized light beam of cross sectional area \\(A\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_m\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Specific Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the mass concentration of the substance giving the specific optical rotatory power.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificOpticalRotatoryPower`),
      namedNode(`${rdfs}label`),
      literal(`Specific Optical Rotatory Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Specific_thrust`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${qudt}id`),
      literal(`Q-160-100`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Specific_thrust`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Specific impulse (usually abbreviated Isp) is a way to describe the efficiency of rocket and jet engines. It represents the force with respect to the amount of propellant used per unit time.[1] If the "amount" of propellant is given in terms of mass (such as kilograms), then specific impulse has units of velocity. If it is given in terms of Earth-weight (such as kiloponds), then specific impulse has units of time. The conversion constant between the two versions of specific impulse is g. The higher the specific impulse, the lower the propellant flow rate required for a given thrust, and in the case of a rocket the less propellant is needed for a given delta-v per the Tsiolkovsky rocket equation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${rdfs}label`),
      literal(`Specific thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificThrust`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}SpecificImpulse`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${dcterms}description`),
      literal(`"Specific Volume" (\\(\nu\\)) is the volume occupied by a unit of mass of a material. It is equal to the inverse of density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciL-PER-GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M-1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Specific_volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(sv = \\frac{1}{\\rho}\\), where \\(\\rho\\) is mass density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${rdfs}label`),
      literal(`Specific Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpecificVolume`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Density`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${dcterms}description`),
      literal(`"Spectral Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone with energy \\(E\\) in an energy interval, divided by the solid angle \\(d\\Omega\\) of that cone and the range \\(dE\\) of that interval.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SR-J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = \\int \\int \\sigma_{\\Omega,E} d\\Omega dE\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma_{\\Omega, E}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Spectral Angular Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralAngularCrossSection`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${dcterms}description`),
      literal(`"Spectral Cross-section" is the cross-section for a process in which the energy of the ejected or scattered particle is in an interval of energy, divided by the range \\(dE\\) of this interval.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = \\int \\sigma_E dE\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma_E\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Spectral Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralCrossSection`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}AngularCrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Luminous_efficacy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(V(\\lambda) = \\frac{\\Phi_\\lambda(\\lambda_m)}{\\Phi_\\lambda(\\lambda)}\\), where \\(\\Phi_\\lambda(\\lambda_m)\\) is the spectral radiant flux at wavelength \\(\\lambda_m\\) and \\(\\Phi_\\lambda(\\lambda)\\) is the spectral radiant flux at wavelength \\(\\lambda\\), such that both radiations produce equal luminous sensations under specified photometric conditions and \\(\\lambda_m\\) is chosen so that the maximum value of this ratio is equal to 1.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The Spectral Luminous Efficiency is a measure of how well a light source produces visible light. It is the ratio of luminous flux to power. A common choice is to choose units such that the maximum possible efficacy, 683 lm/W, corresponds to an efficiency of 100%.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralLuminousEfficiency`),
      namedNode(`${rdfs}label`),
      literal(`Spectral Luminous Efficiency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M4`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA-PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}expression`),
      literal(`\\(M-PER-L2-T2\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Spectral Radiant Energy Density" is the spectral concentration of radiant energy density (in terms of wavelength), or the spectral radiant energy density (in terms of wave length).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpectralRadiantEnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Spectral Radiant Energy Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BFT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Speed`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Speed is the magnitude of velocity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Speed`),
      namedNode(`${rdfs}label`),
      literal(`Speed`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${dcterms}description`),
      literal(`The quantity kind \\(\\textbf{Speed of Light}\\) is the speed of electomagnetic waves in a given medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BFT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Speed_of_light`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=113-01-34`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}label`),
      literal(`Speed of Light`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}MagneticConstant`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}PermittivityOfVacuum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${constant}SpeedOfLight_Vacuum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfLight`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Speed`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BFT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaC-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Speed_of_sound`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Speed_of_sound`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(c = \\sqrt{\\frac{K}{\\rho}}\\), where \\(K\\) is the coefficient of stiffness, the bulk modulus (or the modulus of bulk elasticity for gases), and \\(\\rho\\) is the density. Also, \\(c^2 = \\frac{\\partial p}{\\partial \\rho}\\), where \\(p\\) is the pressure and \\(\\rho\\) is the density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The speed of sound is the distance travelled during a unit of time by a sound wave propagating through an elastic medium.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${qudt}symbol`),
      literal(`c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${rdfs}label`),
      literal(`Speed of sound`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpeedOfSound`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Speed`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${dcterms}description`),
      literal(`Spherical illuminance is equal to quotient of the total luminous flux \\(\\Phi_v\\) incident on a small sphere by the cross section area of that sphere.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LUX`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PHOT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I1M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://eilv.cie.co.at/term/1245`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(E_v,0 = \\int_{4\\pi sr}{L_v}{d\\Omega}\\), where \\(d\\Omega\\) is the solid angle of each elementary beam passing through the given point and \\(L_v\\) is its luminance at that point in the direction of the beam.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${rdfs}label`),
      literal(`Illuminance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SphericalIlluminance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Illuminance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Spin_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In quantum mechanics and particle physics "Spin" is an intrinsic form of angular momentum carried by elementary particles, composite particles (hadrons), and atomic nuclei.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${rdfs}label`),
      literal(`Spin`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Spin`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(s^2 = \\hbar^2 s(s + 1)\\), where \\(s\\) is the spin quantum number and \\(\\hbar\\) is the Planck constant.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Spin Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}OrbitalAngularMomentumQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}Energy_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M2H0T-4D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Square Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SquareEnergy`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${rdfs}label`),
      literal(`Stage Propellant Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StagePropellantMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${qudt}symbol`),
      literal(`M_S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${rdfs}label`),
      literal(`Stage Structure Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StageStructuralMass`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${dcterms}description`),
      literal(`The "Standard Absolute Activity" is proportional to the absoulte activity of the pure substance \\(B\\) at the same temperature and pressure multiplied by the standard pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Activity_coefficient`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\lambda_B^\\Theta = \\lambda_B^*(p^\\Theta)\\), where \\(\\lambda_B^\\Theta\\) the absolute activity of the pure substance \\(B\\) at the same temperature and pressure, and \\(p^\\Theta\\) is standard pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda_B^\\Theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardAbsoluteActivity`),
      namedNode(`${rdfs}label`),
      literal(`Standard Absolute Activity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-MOL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}expression`),
      literal(`\\(j-mol^{-1}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A-1E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Chemical_potential`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu_B^\\Theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Standard Chemical Potential" is the value of the chemical potential at standard conditions`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${rdfs}label`),
      literal(`Standard Chemical Potential`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardChemicalPotential`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ChemicalPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${dcterms}description`),
      literal(`In celestial mechanics the standard gravitational parameter of a celestial body is the product of the gravitational constant G and the mass M of the body. Expressed as \\(\\mu = G \\cdot M\\). The SI units of the standard gravitational parameter are \\(m^{3}s^{-2}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM3-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Standard_gravitational_parameter`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Standard_gravitational_parameter`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StandardGravitationalParameter`),
      namedNode(`${rdfs}label`),
      literal(`Standard Gravitational Parameter`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${rdfs}label`),
      literal(`Static Friction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFriction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Friction`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Friction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\mu = \\frac{F_max}{N}\\), where \\(F_max\\) is the maximum tangential component of the contact force and \\(N\\) is the normal component of the contact force between two bodies at relative rest.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Static Friction Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticFrictionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}FrictionCoefficient`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${dcterms}description`),
      literal(`"Static Pressure" is the pressure at a nominated point in a fluid. Every point in a steadily flowing fluid, regardless of the fluid speed at that point, has its own static pressure \\(P\\), dynamic pressure \\(q\\), and total pressure \\(P_0\\). The total pressure is the sum of the dynamic and static pressures, that is \\(P_0 = P + q\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}abbreviation`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Static_pressure`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${qudt}symbol`),
      literal(`p`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${rdfs}label`),
      literal(`Static pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StaticPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Statistical_weight`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A "Statistical Weight" is the relative probability (possibly unnormalized) of a particular feature of a state.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${qudt}symbol`),
      literal(`g`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StatisticalWeight`),
      namedNode(`${rdfs}label`),
      literal(`Statistical Weight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT-PER-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SAMPLE-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraHZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}failures-in-time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Stochastic_process`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stochastic_process`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In probability theory, a stochastic process, or sometimes random process  is a collection of random variables; this is often used to represent the evolution of some random value, or system, over time. This is the probabilistic counterpart to a deterministic process (or deterministic system).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${qudt}symbol`),
      literal(`X`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${rdfs}label`),
      literal(`Stochastic Process`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StochasticProcess`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Frequency`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stoichiometry`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\nu_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Chemical reactions, as macroscopic unit operations, consist of simply a very large number of elementary reactions, where a single molecule reacts with another molecule. As the reacting molecules (or moieties) consist of a definite set of atoms in an integer ratio, the ratio between reactants in a complete reaction is also in integer ratio. A reaction may consume more than one molecule, and the "Stoichiometric Number" counts this number, defined as positive for products (added) and negative for reactants (removed).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${rdfs}label`),
      literal(`Stoichiometric Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StoichiometricNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Strain`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\epsilon\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In any branch of science dealing with materials and their behaviour, strain is the geometrical expression of deformation caused by the action of stress on a physical body. Strain is calculated by first assuming a change between two body states: the beginning state and the final state. Then the difference in placement of two points in this body in those two states expresses the numerical value of strain. Strain therefore expresses itself as a change in size and/or shape. [Wikipedia]`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${qudt}url`),
      literal(`http://www.freestudy.co.uk/mech%20prin%20h2/stress.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${rdfs}label`),
      literal(`Strain`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}LinearStrain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Strain`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-PER-FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Defined as the 'work done' for a given strain, that is the area under the stress-strain curve after a specified eation. Source(s): http://www.prepol.com/product-range/product-subpages/terminology`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${qudt}symbol`),
      literal(`u`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${rdfs}label`),
      literal(`Strain Energy Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StrainEnergyDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${dcterms}description`),
      literal(`Stress is a measure of the average amount of force exerted per unit area of a surface within a deformable body on which internal forces act. In other words, it is a measure of the intensity or internal distribution of the total internal forces acting within a deformable body across imaginary surfaces. These internal forces are produced between the particles in the body as a reaction to external forces applied on the body. Stress is defined as \\({\\rm{Stress}} = \\frac{F}{A}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\({\\rm{Stress}} = \\frac{F}{A}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${qudt}url`),
      literal(`http://www.freestudy.co.uk/mech%20prin%20h2/stress.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${rdfs}label`),
      literal(`Stress`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Stress`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForcePerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM-PER-CentiM-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM-PER-MilliM-MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M-1H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/w/index.php?title=Photoelasticity&oldid=1109858854#Experimental_principles`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`When a ray of light passes through a photoelastic material, its electromagnetic wave components are resolved along the two principal stress directions and each component experiences a different refractive index due to the birefringence. The difference in the refractive indices leads to a relative phase retardation between the two components. Assuming a thin specimen made of isotropic materials, where two-dimensional photoelasticity is applicable, the magnitude of the relative retardation is given by the stress-optic law \\(\\Delta ={\\frac {2\\pi t}{\\lambda }}C(\\sigma _{1}-\\sigma _{2})\\), where \\(\\Delta\\) is the induced retardation, \\(C\\) is the stress-optic coefficient, \\(t\\) is the specimen thickness, \\(\\lambda\\) is the vacuum wavelength, and \\(\\sigma_1\\) and \\(\\sigma_2\\) are the first and second principal stresses, respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`When a ray of light passes through a photoelastic material, its electromagnetic wave components are resolved along the two principal stress directions and each component experiences a different refractive index due to the birefringence. The difference in the refractive indices leads to a relative phase retardation between the two components. Assuming a thin specimen made of isotropic materials, where two-dimensional photoelasticity is applicable, the magnitude of the relative retardation is given by the stress-optic law Δ=((2πt)/λ)C(σ₁-σ₂), where Δ is the induced retardation, C is the stress-optic coefficient, t is the specimen thickness, λ is the vacuum wavelength, and σ₁ and σ₂ are the first and second principal stresses, respectively.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StressOpticCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Stress-Optic Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\gamma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Structural efficiency is a function of the weight of structure to the afforded vehicle's strength.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${rdfs}label`),
      literal(`Structural Efficiency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructuralEfficiency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Structure_factor`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(F(h, k, l) = \\sum_{n=1}^N f_n\\exp{[2\\pi i(hx_n + ky_n +lz_n)]}\\), where \\(f_n\\) is the atomic scattering factor for atom \\(n\\), and \\(x_n\\), \\(y_n\\), and \\(z_n\\) are fractional coordinates in the unit cell; for \\(h\\), \\(k\\), and \\(l\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Structure Factor" is a mathematical description of how a material scatters incident radiation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${qudt}symbol`),
      literal(`F(h, k, l)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}StructureFactor`),
      namedNode(`${rdfs}label`),
      literal(`Structure Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Superconductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Superconduction Transition Temperature" is the critical thermodynamic temperature of a superconductor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T_c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Superconduction Transition Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}CurieTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductionTransitionTemperature`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}NeelTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/BCS_theory`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Superconductor Energy Gap" is the width of the forbidden energy band in a superconductor.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${qudt}symbol`),
      literal(`Δ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${rdfs}label`),
      literal(`Superconductor Energy Gap`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SuperconductorEnergyGap`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}GapEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BQ-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a_s = \\frac{A}{S}\\), where \\(S\\) is the total area of the surface of a sample and \\(A\\) is its activity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Surface Activity Density" is undefined.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${qudt}symbol`),
      literal(`a_s`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceActivityDensity`),
      namedNode(`${rdfs}label`),
      literal(`Surface Activity Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}expression`),
      literal(`\\(surface-heat-xfer-coeff\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q = h (T_s - T_r)\\), where \\(T_s\\) is areic heat flow rate is the thermodynamic temperature of the surface, and is a reference thermodynamic temperature characteristic of the adjacent surroundings.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceCoefficientOfHeatTransfer`),
      namedNode(`${rdfs}label`),
      literal(`Surface Coefficient of Heat Transfer`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-KiloM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Area_density`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\rho_A = \\frac{dm}{dA}\\), where \\(m\\) is mass and \\(A\\) is area.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\rho_A\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceDensity`),
      namedNode(`${rdfs}label`),
      literal(`Surface Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoPA-PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}hasDimension`),
      namedNode(`${qudt}DIM_ISO-MT-2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Surface_tension`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\gamma = \\frac{dF}{dl}\\), where \\(F\\) is the force component perpendicular to a line element in a surface and \\(l\\) is the length of the line element.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Surface Tension" is a contractive tendency of the surface of a liquid that allows it to resist an external force.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${qudt}symbol`),
      literal(`γ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${rdfs}label`),
      literal(`Surface Tension`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SurfaceTension`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Susceptance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E2L-2I0M-1H0T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Susceptance?oldid=430151986`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-12-54`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(B = \\lim{\\underline{Y}}\\), where \\(\\underline{Y}\\) is admittance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Susceptance" is the imaginary part of admittance. The inverse of admittance is impedance and the real part of admittance is conductance. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${qudt}symbol`),
      literal(`B`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdfs}label`),
      literal(`Susceptance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Conductance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Susceptance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Impedance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.oxfordreference.com/view/10.1093/acref/9780199549351.001.0001/acref-9780199549351-e-1162`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${rdfs}label`),
      literal(`Systolic Blood Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}DiastolicBloodPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}SystolicBloodPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AMU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CARAT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CWT_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DRAM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DWT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EarthMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GRAIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Hundredweight_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloTON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LunarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_TROY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Pennyweight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Quarter_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SLUG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SolarMass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Stone_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TONNE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Assay`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_LONG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHORT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`An informal mass limit established by a Project Office (at the Element Integrated Product Team (IPT) level or below) to control mass.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${rdfs}label`),
      literal(`Target Bogie Mass`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TARGET-BOGIE-MASS`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Mass`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliDEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Temperature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${rdfs}label`),
      literal(`Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Temperature`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MOL-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A1E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureAmountOfSubstance`),
      namedNode(`${rdfs}label`),
      literal(`Temperature Amount of Substance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD1/HTML/link/ifctemperaturegradientmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The temperature gradient measures the difference of a temperature per length, as for instance used in an external wall or its layers. It is usually measured in K/m.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureGradient`),
      namedNode(`${rdfs}label`),
      literal(`Temperature Gradient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M-1H1T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerMagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Temperature per Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(`${rdfs}label`),
      literal(`Temperature per Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperaturePerTime_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Temperature per Time Squared`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC2/HTML/link/ifctemperaturerateofchangemeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The "Temperature Rate of Change" measures the difference of a temperature per time (positive: rise, negative: fall), as for instance used with heat sensors. It is for example measured in K/s.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${rdfs}label`),
      literal(`Temperature Rate of Change`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRateOfChange`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}TemperaturePerTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${rdfs}label`),
      literal(`Temperature Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemperatureRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-SEC-SR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Summation_(neurophysiology)#Temporal_summation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Temporal Summation Function" is the ability of the human eye to produce a composite signal from the signals coming into an eye during a short time interval.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TemporalSummationFunction`),
      namedNode(`${rdfs}label`),
      literal(`Temporal Summation Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Tension`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${rdfs}label`),
      literal(`Tension`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Tension`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ForceMagnitude`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The heat transfer coefficient is also known as thermal admittance in the sense that the material may be seen as admitting heat to flow.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Admittance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalAdmittance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_insulation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G = 1/R\\), where \\(R\\) is "Thermal Resistance"`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`This quantity is also called "Heat Transfer Coefficient".`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${qudt}symbol`),
      literal(`G`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Conductance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${dcterms}description`),
      literal(`In physics, thermal conductivity, \\(k\\) (also denoted as \\(\\lambda\\)), is the property of a material's ability to conduct heat. It appears primarily in Fourier's Law for heat conduction and is the areic heat flow rate divided by temperature gradient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-FT-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-IN-PER-FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-IN-PER-HR-FT2-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-IN-PER-SEC-FT2-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-FT-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-FT-PER-HR-FT2-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-IN-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH-IN-PER-FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-CentiM-SEC-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM-SEC-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_IT-PER-HR-M-DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}expression`),
      literal(`\\(thermal-k\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_conductivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\lambda = \\frac{\\varphi}{T}\\), where \\(\\varphi\\) is areic heat flow rate and \\(T\\) is temperature gradient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\lambda\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalConductivity`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Conductivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thermopedia.com/content/1189/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\alpha_T = \\frac{k_T}{(x_A x_B)}\\), where \\(k_T\\) is the thermal diffusion ratio, and \\(x_A\\) and \\(x_B\\) are the local amount-of-substance fractions of the two substances \\(A\\) and \\(B\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha_T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Thermal diffusion is a phenomenon in which a temperature gradient in a mixture of fluids gives rise to a flow of one constituent relative to the mixture as a whole. in the context of the equation that describes thermal diffusion, the "Thermal Diffusion Factor" is .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionFactor`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Diffusion Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thermopedia.com/content/1189/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}latexDefinition`),
      literal(`In a steady state of a binary mixture in which thermal diffusion occurs, \\(grad x_B  = -(\\frac{k_T}{T}) grad T\\), where \\(x_B\\) is the amount-of-substance fraction of the heavier substance \\(B\\), and \\(T\\) is the local thermodynamic temperature.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Thermal Diffusion Ratio" is proportional to the product of the component concentrations.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${qudt}symbol`),
      literal(`k_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatio`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Diffusion Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.thermopedia.com/content/1189/`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(D_T  = kT \\cdot D\\), where \\(k_T\\) is the thermal diffusion ratio, and \\(D\\) is the diffusion coefficient.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Thermal Diffusion Coefficient" is .`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`D_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusionRatioCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Diffusion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${dcterms}description`),
      literal(`In heat transfer analysis, thermal diffusivity (usually denoted \\(\\alpha\\) but \\(a\\), \\(\\kappa\\),\\(k\\), and \\(D\\) are also used) is the thermal conductivity divided by density and specific heat capacity at constant pressure. The formula is: \\(\\alpha = {k \\over {\\rho c_p}}\\), where k is thermal conductivity (\\(W/(\\mu \\cdot K)\\)), \\(\\rho\\) is density (\\(kg/m^{3}\\)), and \\(c_p\\) is specific heat capacity (\\(\\frac{J}{(kg \\cdot K)}\\)) .The denominator \\(\\rho c_p\\), can be considered the volumetric heat capacity (\\(\\frac{J}{(m^{3} \\cdot K)}\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-HZ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thermal_diffusivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_diffusivity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(a = \\frac{\\lambda}{\\rho   c_\\rho}\\), where \\(\\lambda\\) is thermal conductivity, \\(\\rho\\) is mass density and \\(c_\\rho\\) is specific heat capacity at constant pressure.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\alpha\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${qudt}symbol`),
      literal(`a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Diffusivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalDiffusivity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AreaPerTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thermal_efficiency`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Thermal efficiency is a dimensionless performance measure of a thermal device such as an internal combustion engine, a boiler, or a furnace. The input to the device is heat, or the heat-content of a fuel that is consumed. The desired output is mechanical work, or heat, or possibly both.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Efficiency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEfficiency`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${dcterms}description`),
      literal(`"Thermal Energy} is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): \\(U_{thermal} = C(T) \\cdot T\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_MEAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_15_DEG_C`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_MEAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_Mean`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thermal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalEnergyLength`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Energy Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/DEV/IFC4_3/RC2/HTML/link/ifcthermalexpansioncoefficientmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The "Thermal Expansion Coefficient" is a measure of the thermal expansion coefficient of a material, which expresses its elongation (as a ratio) per temperature difference. It is usually measured in 1/K. A positive elongation per (positive) rise of temperature is expressed by a positive value.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Expansion Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalExpansionCoefficient`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}ExpansionRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Thermal Insulance}\\) is the reduction of heat transfer (the transfer of thermal energy between objects of differing temperature) between objects in thermal contact or in range of radiative influence. In building technology, this quantity is often called \\(\\textit{Thermal Resistance}\\), with the symbol \\(R\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CLO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-HR-FT2-PER-BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-HR-DEG_F-PER-BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-HR-DEG_C-PER-KiloCAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2-K-PER-W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M-1H1T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_insulation`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(M = 1/K\\), where \\(K\\) is "Coefficient of Heat Transfer"`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${qudt}symbol`),
      literal(`M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Insulance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Thermal Resistance}\\) is a heat property and a measure of a temperature difference by which an object or material resists a heat flow (heat per time unit or thermal resistance). Thermal resistance is the reciprocal thermal conductance. the thermodynamic temperature difference divided by heat flow rate. Thermal resistance \\(R\\) has the units \\(\\frac{m^2 \\cdot K}{W}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-HR-PER-BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-PER-W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thermal_resistance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-2I0M-1H1T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Thermal_resistance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${qudt}symbol`),
      literal(`R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Resistance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}HeatFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ThermalInsulance`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistance`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${dcterms}description`),
      literal(`The reciprocal of thermal conductivity is thermal resistivity, measured in \\(kelvin-metres\\) per watt (\\(K \\cdot m/W\\)).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_F-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2-PER-BTU_IT-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-M-PER-W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-K-PER-W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M-1H1T3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalResistivity`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Resistivity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-HR-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-FT2-SEC-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2-DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH-PER-SEC-CentiM2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Thermal_transmittance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Thermal transmittance is the rate of transfer of heat through matter. The thermal transmittance of a material (such as insulation or concrete) or an assembly (such as a wall or window) is expressed as a U-value. The concept of thermal transmittance is closely related to that of thermal resistance. The thermal resistance of a structure is the reciprocal of its thermal transmittance.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Transmittance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalTransmittance`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CoefficientOfHeatTransfer`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Four_factor_formula`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Thermal Utilization Factor" in an infinite medium, is the ratio of the number of thermal absorbed in a fissionable nuclide or in a nuclear fuel, as specified, to the total number of thermal neutrons absorbed.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${qudt}symbol`),
      literal(`f`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactor`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Utilization Factor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DECADE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Flight`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaBasePair`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OCT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RPK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_ELEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SUSCEPTIBILITY_MAG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Probability that a neutron that gets absorbed does so in the fuel material.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${qudt}symbol`),
      literal(`f`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${rdfs}label`),
      literal(`Thermal Utilization Factor For Fission`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermalUtilizationFactorForFission`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Dimensionless`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gamma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gs`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(G_n - G_s = \\frac{1}{2}\\frac{B_c^2 \\cdot V}{\\mu_0}\\), where \\(G_n\\) and \\(G_s\\) are the Gibbs energies at zero magnetic flux density in a normal conductor and superconductor, respectively, \\(\\mu_0\\) is the magnetic constant, and \\(V\\) is volume.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Thermodynamic Critical Magnetic Flux Density" is the maximum magnetic field strength below which a material remains superconducting.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${qudt}symbol`),
      literal(`B_c`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Thermodynamic Critical Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicCriticalMagneticFluxDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`For a closed thermodynamic system, \\(\\Delta U = Q + W\\), where \\(Q\\) is amount of heat transferred to the system and \\(W\\) is work done on the system provided that no chemical reactions occur.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Thermodynamic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}EnergyInternal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}InternalEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${dcterms}description`),
      literal(`Thermodynamic Entropy is a measure of the unavailability of a system’s energy to do work. It is a measure of the randomness of molecules in a system and is central to the second law of thermodynamics and the fundamental thermodynamic relation, which deal with physical processes and whether they occur spontaneously. The dimensions of entropy are energy divided by temperature, which is the same as the dimensions of Boltzmann's constant (\\(kB\\)) and heat capacity. The SI unit of entropy is \\(joule\\ per\\ kelvin\\). [Wikipedia]`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${rdfs}label`),
      literal(`Thermodynamic Entropy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicEntropy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_R`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTemperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/page/Thermodynamic_temperature`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Theta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.
Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.
In thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${qudt}symbol`),
      literal(`T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Thermodynamic Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThermodynamicTemperature`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Temperature`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thickness`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.merriam-webster.com/dictionary/thickness`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Thickness" is the the smallest of three dimensions: length, width, thickness.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${qudt}symbol`),
      literal(`d`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${rdfs}label`),
      literal(`Thickness`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thickness`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H-1T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.daviddarling.info/encyclopedia/T/Thomson_effect.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\mu\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Thomson Coefficient" represents Thomson heat power developed, divided by the electric current and the temperature difference.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThomsonCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Thomson Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${dcterms}description`),
      literal(`Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.
The pushing or pulling force developed by an aircraft engine or a rocket engine.
The force exerted in any direction by a fluid jet or by a powered screw, as, the thrust of an antitorque rotor.
Specifically, in rocketry, \\( F\\,= m\\cdot v\\) where m is propellant mass flow and v is exhaust velocity relative to the vehicle. Also called momentum thrust.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Thrust`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${rdfs}label`),
      literal(`Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Thrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The thrust force of a jet-propulsion engine per unit of frontal area per unit of incompressible dynamic pressure `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${qudt}symbol`),
      literal(`C_{F}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustCoefficient`),
      namedNode(`${rdfs}label`),
      literal(`Thrust Coefficient`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-LB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M1H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${rdfs}label`),
      literal(`Thrust To Mass Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToMassRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Acceleration`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\psi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Thrust-to-weight ratio is a ratio of thrust to weight of a rocket, jet engine, propeller engine, or a vehicle propelled by such an engine. It is a dimensionless quantity and is an indicator of the performance of the engine or vehicle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${rdfs}label`),
      literal(`Thrust To Weight Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrustToWeightRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\eta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}ThrusterPowerToThrustEfficiency`),
      namedNode(`${rdfs}label`),
      literal(`Thruster Power To Thrust Efficiency`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Time`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${qudt}symbol`),
      literal(`t`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time`),
      namedNode(`${rdfs}label`),
      literal(`Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}abbreviation`),
      literal(`w/m2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-FT2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-CentiM2-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Sound_intensity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I = \\frac{1}{t2 - t1} \\int_{t1}^{t2}i(t)dt\\), where \\(t1\\) and \\(t2\\) are the starting and ending times for the integral and \\(i\\) is sound intensity.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Sound intensity or acoustic intensity (\\(I\\)) is defined as the sound power \\(P_a\\) per unit area \\(A\\). The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${qudt}symbol`),
      literal(`I`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${rdfs}label`),
      literal(`Time averaged sound intensity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeAveragedSoundIntensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}SoundIntensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${rdfs}label`),
      literal(`Time Percentage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimePercentage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${rdfs}label`),
      literal(`Time Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Time_Squared`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${rdfs}label`),
      literal(`Time Squared`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeSquared`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG_C-WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}K-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H1T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31890`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TimeTemperature`),
      namedNode(`${rdfs}label`),
      literal(`Time Temperature`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Time_Squared`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Time_Squared`),
      namedNode(`${rdfs}label`),
      literal(`Time Squared`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${dcterms}description`),
      literal(`In physics, a torque (\\(\\tau\\)) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters (\\(N m\\)). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet").
Mathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: \\(τ = r x F\\)
where,
r is the particle's position vector relative to the fulcrum
F is the force acting on the particles,
or, more generally, torque can be defined as the rate of change of angular momentum: \\(τ = dL/dt\\)
where,
L is the angular momentum vector
t stands for time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F-IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Torque`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Torque`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\tau = M \\cdot e_Q\\), where \\(M\\) is the momentof force and \\(e_Q\\) is a unit vector directed along a \\(Q-axis\\) with respect to which the torque is considered.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Torque`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${rdfs}label`),
      literal(`Torque`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Torque`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}MomentOfForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-RAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerAngle`),
      namedNode(`${rdfs}label`),
      literal(`Torque per Angle`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TorquePerLength`),
      namedNode(`${rdfs}label`),
      literal(`Torque per Length`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${dcterms}description`),
      literal(`"Total Angular Momentum" combines both the spin and orbital angular momentum of all particles and fields. In atomic and nuclear physics, orbital angular momentum is usually denoted by \\(l\\) or \\(L\\) instead of \\(\\Lambda\\). The magnitude of \\(J\\) is quantized so that \\(J^2 = \\hbar^2 j(j + 1)\\), where \\(j\\) is the total angular momentum quantum number.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-M2-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Angular_momentum#Spin.2C_orbital.2C_and_total_angular_momentum`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${qudt}symbol`),
      literal(`J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${rdfs}label`),
      literal(`Total Angular Momentum`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentum`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularMomentum`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${dcterms}description`),
      literal(`The "Total Angular Quantum Number" describes the magnitude of total angular momentum \\(J\\), where \\(j\\) refers to a specific particle and \\(J\\) is used for the whole system.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Quantum_number`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${qudt}symbol`),
      literal(`j`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${rdfs}label`),
      literal(`Total Angular Momentum Quantum Number`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}QuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}MagneticQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}PrincipalQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAngularMomentumQuantumNumber`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}SpinQuantumNumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.answers.com/topic/atomic-stopping-power`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S_a = \\frac{S}{n}\\), where \\(S\\) is the total linear stopping power and \\(n\\) is the number density of the atoms in the substance.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Total Atomic Stopping Power" for an ionizing particle passing through an element, is the particle's energy loss per atom within a unit area normal to the particle's path; equal to the linear energy transfer (energy loss per unit path length) divided by the number of atoms per unit volume.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${qudt}symbol`),
      literal(`S_a`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalAtomicStoppingPower`),
      namedNode(`${rdfs}label`),
      literal(`Total Atomic Stopping Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaARE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIL_Circ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckArea`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Cross_section_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}normativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Total Cross-section" is related to the absorbance of the light intensity through Beer-Lambert's law. It is the sum of all cross-sections corresponding to the various reactions or processes between an incident particle of specified type and energy and a target particle.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${qudt}symbol`),
      literal(`σₜ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${rdfs}label`),
      literal(`Total Cross-section`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCrossSection`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}CrossSection`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L0I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(I_{tot}= I + I_D\\), where \\(I\\) is electric current and \\(I_D\\) is displacement current.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Total Current" is the sum of the electric current that is flowing through a surface and the displacement current.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`I_t`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${qudt}symbol`),
      literal(`I_{tot}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdfs}label`),
      literal(`Total Current`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}DisplacementCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrent`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrent`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}A-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E1L-2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(J_{tot}= J + J_D\\), where \\(J\\) is electric current density and \\(J_D\\) is displacement current density.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(J_{tot}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Total Current Density" is the sum of the electric current density and the displacement current density.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdfs}label`),
      literal(`Total Current Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}DisplacementCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalCurrentDensity`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricCurrentDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${dcterms}description`),
      literal(`"Total Ionization" by a particle, total mean charge, divided by the elementary charge, \\(e\\), of all positive ions produced by an ionizing charged particle along its entire path and along the paths of any secondary charged particles.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Ionization#Classical_ionization`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(N = \\int N_i dl\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${qudt}symbol`),
      literal(`N_i`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalIonization`),
      namedNode(`${rdfs}label`),
      literal(`Total Ionization`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-PER-ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stopping_power_(particle_radiation)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S = -\\frac{dE}{dx}\\), where \\(-dE\\) is the energy decrement in the \\(x-direction\\) along an elementary path with the length \\(dx\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The "Total Linear Stopping Power" is defined as the average energy loss of the particle per unit path length.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${qudt}symbol`),
      literal(`S`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalLinearStoppingPower`),
      namedNode(`${rdfs}label`),
      literal(`Total Linear Stopping Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-M2-PER-KiloGM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L4I0M0H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Stopping_power_(particle_radiation)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31895`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(S_m = \\frac{S}{\\rho}\\), where \\(S\\) is the total linear stopping power and \\(\\rho\\) is the mass density of the sample.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`If a substance is compared in gaseous and solid form, then the linear stopping powers of the two states are very different just because of the different density. One therefore often divides S(E) by the density of the material to obtain the "Mass Stopping Power". The mass stopping power then depends only very little on the density of the material.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${qudt}symbol`),
      literal(`S_m`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalMassStoppingPower`),
      namedNode(`${rdfs}label`),
      literal(`Total Mass Stopping Power`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${dcterms}description`),
      literal(` The total pressure is the sum of the dynamic and static pressures, that is \\(P_0 = P + q\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${qudt}symbol`),
      literal(`P_0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${rdfs}label`),
      literal(`Total Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TotalPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_t}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Touch Thresholds" are thresholds for touch, vibration and other stimuli to the skin.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TouchThresholds`),
      namedNode(`${rdfs}label`),
      literal(`Touch Thresholds`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Transmittance`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\tau = \\frac{\\Phi_t}{\\Phi_m}\\), where \\(\\Phi_t\\) is the transmitted radiant flux or the transmitted luminous flux, and \\(\\Phi_m\\) is the radiant flux or luminous flux of the incident radiation.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\tau, T\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Transmittance is the fraction of incident light (electromagnetic radiation) at a specified wavelength that passes through a sample.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Transmittance`),
      namedNode(`${rdfs}label`),
      literal(`Transmittance`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A_{10}(\\lambda) = -lg(\\tau(\\lambda))\\), where \\(\\tau\\) is the transmittance at a given wavelength \\(\\lambda\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Transmittance is the fraction of incident light (electromagnetic radiation) at a specified wavelength that passes through a sample.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}symbol`),
      literal(`A_10, D`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TransmittanceDensity`),
      namedNode(`${rdfs}label`),
      literal(`Transmittance Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`u_{e}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${rdfs}label`),
      literal(`True Exhaust Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}TrueExhaustVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NTU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Turbidity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Turbidity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Turbidity is the cloudiness or haziness of a fluid, or of air, caused by individual particles (suspended solids) that are generally invisible to the naked eye, similar to smoke in air. Turbidity in open water is often caused by phytoplankton and the measurement of turbidity is a key test of water quality. The higher the turbidity, the higher the risk of the drinkers developing gastrointestinal diseases, especially for immune-compromised people, because contaminants like virus or bacteria can become attached to the suspended solid. The suspended solids interfere with water disinfection with chlorine because the particles act as shields for the virus and bacteria. Similarly suspended solids can protect bacteria from UV sterilisation of water. Fluids can contain suspended solid matter consisting of particles of many different sizes. While some suspended material will be large enough and heavy enough to settle rapidly to the bottom container if a liquid sample is left to stand (the settleable solids), very small particles will settle only very slowly or not at all if the sample is regularly agitated or the particles are colloidal. These small solid particles cause the liquid to appear turbid.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turbidity`),
      namedNode(`${rdfs}label`),
      literal(`Turbidity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Turns" is the number of turns in a winding.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${qudt}symbol`),
      literal(`N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${rdfs}label`),
      literal(`Turns`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Turns`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Count`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gamma`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Gs`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGAUSS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}T_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L0I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Upper Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for disappearance of bulk superconductivity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${qudt}symbol`),
      literal(`B_{c2}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${rdfs}label`),
      literal(`Upper Critical Magnetic Flux Density`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}UpperCriticalMagneticFluxDensity`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}LowerCriticalMagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}expression`),
      literal(`\\(VT\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${rdfs}label`),
      literal(`Vacuum Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VacuumThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Thrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M2-PA-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoGM-PER-M2-PA-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERM_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.designingbuildings.co.uk/wiki/Vapour_Permeability`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`Vapour permeability, or "Breathability" in a building refers to the ease with which water vapour passes through building elements. Building elements where vapour permeability is poorly designed can result in condensation, leading to unhealthy living environments and degradation of fabric.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPermeability`),
      namedNode(`${rdfs}label`),
      literal(`Vapor Permeability`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A pressure that is the one exerted by a substance vapor in thermodynamic equilibrium with either its solid or liquid phase at a given temperature in a closed system.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${rdfs}label`),
      literal(`Vapor Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VaporPressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Vehicle Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VehicleVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Velocity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving. `),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${qudt}symbol`),
      literal(`v`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${rdfs}label`),
      literal(`Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Velocity`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}LinearVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-SEC-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Ventilation_(architecture)#Ventilation_rates_for_indoor_air_quality`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Ventilation Rate is often expressed by the volumetric flowrate of outdoor air introduced to a building. However, ASHRAE now recommends ventilation rates dependent upon floor area.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VentilationRatePerFloorArea`),
      namedNode(`${rdfs}label`),
      literal(`Ventilation Rate per Floor Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-KiloYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaHZ-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM-PER-YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The rate at which a body moves upwards at an angle of 90 degrees to the ground. It is the component of a projectile's velocity which is concerned with lifting the projectile.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${qudt}symbol`),
      literal(`V_{Z}`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${rdfs}label`),
      literal(`Vertical Velocity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VerticalVelocity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Velocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRAME-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Frame_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Frame rate (also known as frame frequency) is the frequency (rate) at which an imaging device produces unique consecutive images called frames. The term applies equally well to computer graphics, video cameras, film cameras, and motion capture systems. Frame rate is most often expressed in frames per second (FPS) and is also expressed in progressive scan monitors as hertz (Hz).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${rdfs}label`),
      literal(`Video Frame Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VideoFrameRate`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InformationFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Viscosity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Viscosity is a measure of the resistance of a fluid which is being deformed by either shear stress or extensional stress. In general terms it is the resistance of a liquid to flow, or its "thickness". Viscosity describes a fluid's internal resistance to flow and may be thought of as a measure of fluid friction. [Wikipedia]. Please note that the general concept of Viscosity is dimensionally ambiguous and thus is not associated with a DimensionVector. Narrower definitions including DynamicViscosity and KinematicViscosity are preferable.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Viscosity`),
      namedNode(`${rdfs}label`),
      literal(`Viscosity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Radiant_energy`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31892`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`Q`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Visible Radiant Energy", also known as luminous energy, is the energy of electromagnetic waves. It is energy of the particles that are emitted, transferred, or received as radiation.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}symbol`),
      literal(`Q`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${qudt}systemDerivedQuantityKind`),
      namedNode(`${qudt}SOQ_SI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Visible Radiant Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisibleRadiantEnergy`),
      namedNode(`${skos}closeMatch`),
      namedNode(`${quantitykind}LuminousEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Absolute_threshold#Vision`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_v}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Vision Thresholds" is the thresholds of sensitivity of the eye.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VisionThresholds`),
      namedNode(`${rdfs}label`),
      literal(`Vision Thresholds`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Voltage}\\), also referred to as \\(\\textit{Electric Tension}\\), is the difference between electrical potentials of two points. For an electric field within a medium, \\(U_{ab} = - \\int_{r_a}^{r_b} E . {dr}\\), where \\(E\\) is electric field strength.
For an irrotational electric field, the voltage is independent of the path between the two points \\(a\\) and \\(b\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Ab`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V_Stat`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(U_{ab} = V_a - V_b\\), where \\(V_a\\) and \\(V_b\\) are electric potentials at points \\(a\\) and \\(b\\), respectively.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(U_{ab}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${qudt}symbol`),
      literal(`U`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${rdfs}label`),
      literal(`Voltage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotential`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectricPotentialDifference`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Voltage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}EnergyPerElectricCharge`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${dcterms}isReplacedBy`),
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${rdfs}label`),
      literal(`Voltage Percentage`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${owl}deprecated`),
      literal(`true`, namedNode(`${xsd}boolean`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePercentage`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=131-11-26`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${qudt}latexDefinition`),
      literal(`When \\(u = \\hat{U} \\cos{(\\omega t + \\alpha)}\\), where \\(u\\) is the voltage, \\(\\omega\\) is angular frequency, \\(t\\) is time, and \\(\\alpha\\) is initial phase, then \\(\\underline{U} = Ue^{ja}\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\underline{U}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Voltage Phasor" is a representation of voltage as a sinusoidal integral quantity using a complex quantity whose argument is equal to the initial phase and whose modulus is equal to the root-mean-square value. A phasor is a constant complex number, usually expressed in exponential form, representing the complex amplitude (magnitude and phase) of a sinusoidal function of time. Phasors are used by electrical engineers to simplify computations involving sinusoids, where they can often reduce a differential equation problem to an algebraic one.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltagePhasor`),
      namedNode(`${rdfs}label`),
      literal(`Voltage Phasor`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E-1L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${rdfs}label`),
      literal(`Voltage Ratio`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VoltageRatio`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AC-FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FBM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckVolume`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}STR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}Standard`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TBSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_SHIPPING_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TSP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Volume`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Volume`),
      namedNode(`${rdfs}label`),
      literal(`Volume`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_UK_PET-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US_PET-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BBL_US_PET-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BU_US_DRY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GI_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_VOL_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PINT_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PK_US_DRY-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_UK-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QT_US-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Volumetric_flow_rate`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(q_V = \\frac{dV}{dt}\\), where \\(V\\) is volume and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`Volumetric Flow Rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${qudt}symbol`),
      literal(`q_V`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${rdfs}label`),
      literal(`Volume Flow Rate`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-CentiM3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM3-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM3-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM3-PER-MilliL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-L`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM3-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Volume_fraction`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31894`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\varphi_B = \\frac{x_B V_{m,B}^*}{\\sum x_i V_{m,i}^*}\\), where \\(V_{m,i}^*\\) is the molar volume of the pure substances \\(i\\) at the same temperature and pressure, \\(x_i\\) denotes the amount-of-substance fraction of substance \\(i\\), and \\(\\sum\\) denotes summation over all substances \\(i\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\varphi_B\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Volume Fraction" is the volume of a constituent divided by the volume of all constituents of the mixture prior to mixing. Volume fraction is also called volume concentration in ideal solutions where the volumes of the constituents are additive (the volume of the solution is equal to the sum of the volumes of its ingredients).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${rdfs}label`),
      literal(`Volume Fraction`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeFraction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}DimensionlessRatio`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-HA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerArea`),
      namedNode(`${rdfs}label`),
      literal(`Volume per Unit Area`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAL_US-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${rdfs}label`),
      literal(`Volume per Unit Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumePerUnitTime`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}VolumeFlowRate`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${dcterms}description`),
      literal(`Volume, or volumetric, Strain, or dilatation (the relative variation of the volume) is the trace of the tensor \\(\\vartheta\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciB_M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FRACTION`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NUM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERCENT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PERMITTIVITY_REL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPB`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PPTR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}UNITLESS`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T0D1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Deformation_(mechanics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\vartheta = \\frac{\\Delta V}{V_0}\\), where \\(\\Delta V\\) is the increase in volume and \\(V_0\\) is the volume in a reference state to be specified.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\vartheta\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${rdfs}label`),
      literal(`Volume Strain`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeStrain`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Strain`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM3-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT3-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}L-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M3-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD3-PER-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M0H-1T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.

Different coefficients of thermal expansion can be defined for a substance depending on whether the expansion is measured by:

    * linear thermal expansion
    * area thermal expansion
    * volumetric thermal expansion

These characteristics are closely related. The volumetric thermal expansion coefficient can be defined for both liquids and solids. The linear thermal expansion can only be defined for solids, and is common in engineering applications.

Some substances expand when cooled, such as freezing water, so they have negative thermal expansion coefficients. [Wikipedia]`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumeThermalExpansion`),
      namedNode(`${rdfs}label`),
      literal(`Volume Thermal Expansion`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-CentiM2-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliL-PER-CentiM2-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://en.wikipedia.org/wiki/Volumetric_flux`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In fluid dynamics, the volumetric flux is the rate of volume flow across a unit area (m3·s−1·m−2).[Wikipedia]`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}qkdvDenominator`),
      namedNode(`${qkdv}A0E0L2I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${qudt}qkdvNumerator`),
      namedNode(`${qkdv}A0E0L3I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricFlux`),
      namedNode(`${rdfs}label`),
      literal(`Volumetric Flux`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Volumetric Heat Capacity (VHC)}\\), also termed \\(\\textit{volume-specific heat capacity}\\), describes the ability of a given volume of a substance to store internal energy while undergoing a given temperature change, but without undergoing a phase transition. It is different from specific heat capacity in that the VHC is a \\(\\textit{per unit volume}\\) measure of the relationship between thermal energy and temperature of a material, while the specific heat is a \\(\\textit{per unit mass}\\) measure (or occasionally per molar quantity of the material).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2-DEG_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-PER-K`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Volumetric_heat_capacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H-1T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Volumetric_heat_capacity`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumetricHeatCapacity`),
      namedNode(`${rdfs}label`),
      literal(`Volumetric Heat Capacity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${dcterms}description`),
      literal(`\\(\\textit{Volumic Electromagnetic Energy}\\), also known as the \\(\\textit{Electromagnetic Energy Density}\\), is the energy associated with an electromagnetic field, per unit volume of the field.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-M3`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}exactMatch`),
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=121-11-64`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=31891`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(w = (1/2) ( \\mathbf{E} \\cdot \\mathbf{D} + \\mathbf{B} \\cdot \\mathbf{H})\\), where \\(\\mathbf{E}\\) is electric field strength, \\(\\mathbf{D}\\) is electric flux density, \\(\\mathbf{M}\\) is magnetic flux density, and \\(\\mathbf{H}\\) is magnetic field strength.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(w\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}label`),
      literal(`Volumic Electromagnetic Energy`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFieldStrength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}ElectricFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFieldStrength_H`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}MagneticFluxDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}VolumicElectromagneticEnergy`),
      namedNode(`${owl}sameAs`),
      namedNode(`${quantitykind}ElectromagneticEnergyDensity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DEG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckFrequency_Ang`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}RAD-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}REV-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T-1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\omega\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`In the simplest sense, vorticity is the tendency for elements of a fluid to "spin." More formally, vorticity can be related to the amount of "circulation" or "rotation" (or more strictly, the local angular rate of rotation) in a fluid. The average vorticity in a small region of fluid flow is equal to the circulation C around the boundary of the small region, divided by the area A of the small region. Mathematically, vorticity is a vector field and is defined as the curl of the velocity field.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${rdfs}label`),
      literal(`Vorticity`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Vorticity`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}AngularVelocity`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=43012`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\overline{T_w}\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Warm Receptor Threshold" is the threshold of warm-sensitive free nerve-ending.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarmReceptorThreshold`),
      namedNode(`${rdfs}label`),
      literal(`Warm Receptor Threshold`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M6`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L6I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD1/HTML/link/ifcwarpingconstantmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The "Warping Constant" is a measure for the warping constant or warping resistance of a cross section under torsional loading. It is usually measured in m⁶.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingConstant`),
      namedNode(`${rdfs}label`),
      literal(`Warping Constant`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L3I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://standards.buildingsmart.org/IFC/RELEASE/IFC4/ADD1/HTML/link/ifcwarpingmomentmeasure.htm`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${qudt}plaintextDescription`),
      literal(`The warping moment measure is a measure for the warping moment, which occurs in warping torsional analysis. It is usually measured in kNm².`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WarpingMoment`),
      namedNode(`${rdfs}label`),
      literal(`Warping Moment`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${dcterms}description`),
      literal(`No pump can convert all of its mechanical power into water power. Mechanical power is lost in the pumping process due to friction losses and other physical losses. It is because of these losses that the horsepower going into the pump has to be greater than the water horsepower leaving the pump. The efficiency of any given pump is defined as the ratio of the water horsepower out of the pump compared to the mechanical horsepower into the pump.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Boiler`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Brake`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Electric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HP_Metric`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT-PER-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-L-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-IN3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-M3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI-YD3-PER-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPower`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_FG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-3D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${qudt}informativeReference`),
      literal(`https://www.uaex.edu/environment-nature/water/docs/IrrigSmart-3241-A-Understanding-water-horsepower.pdf`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${rdfs}label`),
      literal(`Water Horsepower`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WaterHorsepower`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Power`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${dcterms}description`),
      literal(`For a monochromatic wave, "wavelength" is the distance between two successive points in a direction perpendicular to the wavefront where at a given instant the phase differs by \\(2\\pi\\). The wavelength of a sinusoidal wave is the spatial period of the wave—the distance over which the wave's shape repeats. The SI unit of wavelength is the meter.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Wavelength`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\lambda = \\frac{c}{\nu}\\), where \\(\\lambda\\) is the wave length, \\(\nu\\) is the frequency, and \\(c\\) is the speed of light in the medium.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${qudt}symbol`),
      literal(`λ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${vaem}todo`),
      literal(`belongs to SOQ-ISO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${rdfs}label`),
      literal(`Wavelength`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavelength`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DPI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MESH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PER-PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Wavenumber`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(\\sigma = \\frac{\nu}{c}\\), where \\(\\sigma\\) is the wave number, \\(\nu\\) is the frequency, and \\(c\\) is the speed of light in the medium.

Or:

\\(k = \\frac{2\\pi}{\\lambda}= \\frac{2\\pi\\upsilon}{\\upsilon_p}=\\frac{\\omega}{\\upsilon_p}\\), where \\(\\upsilon\\) is the frequency of the wave, \\(\\lambda\\) is the wavelength, \\(\\omega = 2\\pi \\upsilon\\) is the angular frequency of the wave, and \\(\\upsilon_p\\) is the phase velocity of the wave.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\sigma\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector. Light passing through different media keeps its frequency, but not its wavelength or wavenumber. The unit for wavenumber commonly used in spectroscopy is centimetre to power minus one, PER-CM, rather than metre to power minus one, PER-M.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${rdfs}label`),
      literal(`Wavenumber`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${quantitykind}AngularWavenumber`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Wavenumber`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}InverseLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiPOISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DAY_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}H-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MIN_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanGREGORIAN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_MeanJulian`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MO_Synodic`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaYR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-KiloOHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliH-PER-OHM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA-SEC-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}POISE-PER-BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckTime`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}SH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}WK`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Common`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_Sidereal`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YR_TROPICAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L0I0M0H0T1D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${rdfs}comment`),
      literal(`Web Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${rdfs}label`),
      literal(`Web Time`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTime`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Time`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ATM_T`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BARYE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM-PER-M-SEC2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloLB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPA_A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F-PER-IN2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroATM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliBAR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_H2O`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM_HGA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliPA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliTORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-CentiM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-M2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N-PER-MilliM2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL-PER-FT2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PSI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckPressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TORR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L-1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${rdfs}label`),
      literal(`Web Time Average Pressure`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAveragePressure`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Pressure`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${rdfs}comment`),
      literal(`Web Time Avg Thrust (Mlbf)`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${rdfs}label`),
      literal(`Web Time Average Thrust`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WebTimeAverageThrust`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Thrust`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DYN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KIP_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloGM_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloP`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloPOND`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaLB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}OZ_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckForce`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TON_F_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}dbpediaMatch`),
      literal(`http://dbpedia.org/resource/Weight`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`The force with which a body is attracted toward an astronomical body.  Or, the product of the mass of a body and the acceleration acting on a body.  In a dynamic situation, the weight can be a multiple of that under resting conditions. Weight also varies on other planets in accordance with their gravity.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}symbol`),
      literal(`bold letter W`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${qudt}url`),
      literal(`http://en.wikipedia.org/wiki/Weight`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${rdfs}label`),
      literal(`Weight`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Weight`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Force`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ANGSTROM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AU`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT-PER-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CentiM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DecaM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}DeciM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FATH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FUR_Long`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GAUGE_FR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}HectoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}IN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}LY`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}M`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_N`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MI_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliIN`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}NanoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PARSEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PCA`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PicoM`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckLength`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ROD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}YD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L1I0M0H0T0D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Width" is the middle of three dimensions: length, width, thickness.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${rdfs}label`),
      literal(`Width`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Width`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Length`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${dcterms}description`),
      literal(`The net work is equal to the change in kinetic energy. This relationship is called the work-energy theorem: \\(Wnet = K. E._f − K. E._o \\), where \\(K. E._f\\) is the final kinetic energy and \\(K. E._o\\) is the original kinetic energy. Potential energy, also referred to as stored energy, is the ability of a system to do work due to its position or internal structure. Change in potential energy is equal to work. The potential energy equations can also be derived from the integral form of work, \\(\\Delta P. E. = W = \\int  F \\cdot dx\\).`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Work_(physics)`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://www.cliffsnotes.com/study_guide/Work-and-Energy.topicArticleId-10453,articleId-10418.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31889`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}latexDefinition`),
      literal(`\\(A = \\int Pdt\\), where \\(P\\) is power and \\(t\\) is time.`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy.`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${qudt}symbol`),
      literal(`A`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${rdfs}label`),
      literal(`Work`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}Work`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}AttoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}BTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}CAL_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ERG`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}EV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}E_h`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}ExaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-LB_F`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FT-PDL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}FemtoJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}GigaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}J`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_IT`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloBTU_TH`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloCAL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}KiloW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaEV`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaTOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaV-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MegaW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MicroJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}MilliJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PetaJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}PlanckEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}QUAD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_EEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}THM_US`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TOE`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraJ`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TeraW-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}TonEnergy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}V-A_Reactive-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-HR`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}applicableUnit`),
      namedNode(`${unit}W-SEC`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}hasDimensionVector`),
      namedNode(`${qkdv}A0E0L2I0M1H0T-2D0`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}informativeReference`),
      literal(`http://en.wikipedia.org/wiki/Work_function`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}isoNormativeReference`),
      literal(`http://www.iso.org/iso/catalogue_detail?csnumber=31897`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}latexSymbol`),
      literal(`\\(\\Phi\\)`, namedNode(`${qudt}LatexString`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${qudt}plainTextDescription`),
      literal(`"Work Function" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The minimum energy (usually measured in electronvolts) needed to remove an electron from a solid to a point immediately outside the solid surface (or energy needed to move an electron from the Fermi level into vacuum).`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${rdf}type`),
      namedNode(`${qudt}QuantityKind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${rdfs}label`),
      literal(`Work Function`, 'en'),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${quantitykind}WorkFunction`),
      namedNode(`${skos}broader`),
      namedNode(`${quantitykind}Energy`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${vaem}hasGraphMetadata`),
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${rdfs}label`),
      literal(`QUDT VOCAB Quantity Kinds  Release 2.1.25`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${owl}imports`),
      namedNode(`${ns21}qudt`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${owl}imports`),
      namedNode(`${ns1}dimensionvector`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns3}quantitykind`),
      namedNode(`${owl}versionIRI`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns22}QUDT-QUANTITY-KINDS-VocabCatalogEntry_v1.2`),
      namedNode(`${rdf}type`),
      namedNode(`${vaem}CatalogEntry`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns22}QUDT-QUANTITY-KINDS-VocabCatalogEntry_v1.2`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${ns22}QUDT-QUANTITY-KINDS-VocabCatalogEntry_v1.2`),
      namedNode(`${rdfs}label`),
      literal(`QUDT Quantity Kinds Vocabulary Catalog Entry v1.2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}contributor`),
      literal(`Jack Hodges`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}contributor`),
      literal(`Steve Ray`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}created`),
      literal(`2019-08-01T16:25:54.850+00:00`, namedNode(`${xsd}dateTime`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}creator`),
      literal(`Ralph Hodgson`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}creator`),
      literal(`Steve Ray`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}description`),
      literal(`Provides the set of all quantity kinds.`, namedNode(`${rdf}HTML`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}modified`),
      literal(`2023-03-02T11:52:16.055-05:00`, namedNode(`${xsd}dateTime`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}rights`),
      literal(`The QUDT Ontologies are issued under a Creative Commons Attribution 4.0 International License (CC BY 4.0), available at https://creativecommons.org/licenses/by/4.0/. Attribution should be made to QUDT.org`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${dcterms}subject`),
      literal(`QUANTITY-KINDS-ALL`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}applicableDiscipline`),
      literal(`All disciplines`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}applicableDomain`),
      literal(`Science, Medicine and Engineering`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}dateCreated`),
      literal(`2019-08-01T21:26:38`, namedNode(`${xsd}dateTime`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}graphTitle`),
      literal(`QUDT Quantity Kinds Version 2.1.25`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}hasGraphRole`),
      namedNode(`${vaem}VocabularyGraph`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}intent`),
      literal(`TBD`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}isMetadataFor`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}latestPublishedVersion`),
      literal(`https://qudt.org/doc/2023/03/DOC_VOCAB-QUANTITY-KINDS-ALL-v2.1.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}logo`),
      literal(`https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}namespace`),
      literal(`http://qudt.org/vocab/quantitykind/`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}namespacePrefix`),
      literal(`quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}owner`),
      literal(`qudt.org`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}previousPublishedVersion`),
      literal(`https://qudt.org/doc/2023/01/DOC_VOCAB-QUANTITY-KINDS-ALL-v2.1.html`, namedNode(`${xsd}anyURI`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}revision`),
      literal(`2.1`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}specificity`),
      literal(`1`, namedNode(`${xsd}integer`)),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}turtleFileURL`),
      literal(`http://qudt.org/2.1/vocab/quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}contributor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}creator`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}description`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}rights`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}subject`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dc11}title`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}contributor`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}created`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}creator`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}description`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}modified`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}rights`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}subject`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${dcterms}title`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${ns22}QUDT-Attribution`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${ns22}QUDT-QUANTITY-KINDS-VocabCatalogEntry_v1.2`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${ns24}QUDT-Attribution`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${skos}closeMatch`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}usesNonImportedResource`),
      namedNode(`${skos}exactMatch`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}withAttributionTo`),
      namedNode(`${ns22}QUDT-Attribution`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${vaem}withAttributionTo`),
      namedNode(`${ns24}QUDT-Attribution`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${rdf}type`),
      namedNode(`${vaem}GraphMetaData`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns1}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(`${ns3}quantitykind`),
      namedNode(quantitykind)
    ),
    quad(
      namedNode(`${vaem}GMD_QUDT-QUANTITY-KINDS-ALL`),
      namedNode(`${rdfs}label`),
      literal(`QUDT Quantity Kinds Vocabulary Version 2.1.25`),
      namedNode(quantitykind)
    ),

  ]
}

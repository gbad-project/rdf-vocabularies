/* This file was automatically generated. Do not edit by hand. */

const {
  shex,
  dcterms,
  xsd,
  rdf,
  owl,
  rdfs,
  ns7,
  ns8
} = {
  'shex': 'http://www.w3.org/ns/shex#',
  'dcterms': 'http://purl.org/dc/terms/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns7': 'http://shex.io/',
  'ns8': 'https://github.com/shexSpec/shexspec.github.io/commit/'
}

export default ({ blankNode, literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  const blankNodes: import('rdf-js').BlankNode[] = []
  for (let i = 0; i < 55; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      namedNode(shex),
      namedNode(`${dcterms}date`),
      literal(`2017-07-07`, namedNode(`${xsd}date`)),
      namedNode(shex)
    ),
    quad(
      namedNode(shex),
      namedNode(`${dcterms}description`),
      literal(`This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex-semantics]] along with the default JSON-LD Context and shape expression to validate RDF versions of shapes.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(shex),
      namedNode(`${dcterms}title`),
      literal(`Shape Expression Vocabulary`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(shex),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(shex)
    ),
    quad(
      namedNode(shex),
      namedNode(`${rdfs}seeAlso`),
      namedNode(`${ns7}shex-semantics`),
      namedNode(shex)
    ),
    quad(
      namedNode(shex),
      namedNode(`${owl}versionInfo`),
      namedNode(`${ns8}e05f8e97471f5271f50612bed253102f770364b4`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Annotation`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Annotation`),
      namedNode(`${rdfs}comment`),
      literal(`Annotations provide a format-independent way to provide additional information about elements in a schema. `, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Annotation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Annotation`),
      namedNode(`${rdfs}label`),
      literal(`Annotation`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}EachOf`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}EachOf`),
      namedNode(`${rdfs}comment`),
      literal(`A TripleExpression composed of one or more sub-expressions, all of which must match.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}EachOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}EachOf`),
      namedNode(`${rdfs}label`),
      literal(`Each Of`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}EachOf`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}TripleExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStem`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStem`),
      namedNode(`${rdfs}comment`),
      literal(`An IRI prefix used for matching IRIs.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStem`),
      namedNode(`${rdfs}label`),
      literal(`IRI Stem`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStem`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStemRange`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStemRange`),
      namedNode(`${rdfs}comment`),
      literal(`An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStemRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStemRange`),
      namedNode(`${rdfs}label`),
      literal(`IRI StemRange`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}IriStemRange`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Language`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Language`),
      namedNode(`${rdfs}comment`),
      literal(`An Language tag used for matching Literal Languages.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Language`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Language`),
      namedNode(`${rdfs}label`),
      literal(`Language`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStem`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStem`),
      namedNode(`${rdfs}comment`),
      literal(`An Language prefix used for matching Literal Languages.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStem`),
      namedNode(`${rdfs}label`),
      literal(`Language Stem`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStem`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStemRange`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStemRange`),
      namedNode(`${rdfs}comment`),
      literal(`An Language prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStemRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStemRange`),
      namedNode(`${rdfs}label`),
      literal(`Language StemRange`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LanguageStemRange`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStem`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStem`),
      namedNode(`${rdfs}comment`),
      literal(`An Literal prefix used for matching Literals.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStem`),
      namedNode(`${rdfs}label`),
      literal(`Literal Stem`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStem`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStemRange`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStemRange`),
      namedNode(`${rdfs}comment`),
      literal(`An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStemRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStemRange`),
      namedNode(`${rdfs}label`),
      literal(`Literal StemRange`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}LiteralStemRange`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeConstraint`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeConstraint`),
      namedNode(`${rdfs}comment`),
      literal(`A constraint on the type or value of an RDF Node.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeConstraint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeConstraint`),
      namedNode(`${rdfs}label`),
      literal(`Node Constraint`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeConstraint`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeKind`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeKind`),
      namedNode(`${rdfs}comment`),
      literal(`The set of kinds of RDF Nodes.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeKind`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}NodeKind`),
      namedNode(`${rdfs}label`),
      literal(`Node Kind`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}OneOf`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}OneOf`),
      namedNode(`${rdfs}comment`),
      literal(`A TripleExpression composed of one or more sub-expressions, one of which must match.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}OneOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}OneOf`),
      namedNode(`${rdfs}label`),
      literal(`One Of`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}OneOf`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}TripleExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Schema`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Schema`),
      namedNode(`${rdfs}comment`),
      literal(`A Schema contains the set of shapes, used for matching a focus node.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Schema`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Schema`),
      namedNode(`${rdfs}label`),
      literal(`Schema`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}SemAct`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}SemAct`),
      namedNode(`${rdfs}comment`),
      literal(`A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}SemAct`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}SemAct`),
      namedNode(`${rdfs}label`),
      literal(`Semantic Actions`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Shape`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Shape`),
      namedNode(`${rdfs}comment`),
      literal(`A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Shape`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Shape`),
      namedNode(`${rdfs}label`),
      literal(`Shape Or`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Shape`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeAnd`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeAnd`),
      namedNode(`${rdfs}comment`),
      literal(`A ShapeExpression composed of one or more sub-expressions, all of which must match.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeAnd`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeAnd`),
      namedNode(`${rdfs}label`),
      literal(`Shape And`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeAnd`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExpression`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExpression`),
      namedNode(`${rdfs}comment`),
      literal(`The abstract class of Shape Expressions.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExpression`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExpression`),
      namedNode(`${rdfs}label`),
      literal(`Shape Expression`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExternal`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExternal`),
      namedNode(`${rdfs}comment`),
      literal(`A reference to a shape defined in some external Schema.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExternal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExternal`),
      namedNode(`${rdfs}label`),
      literal(`Shape External`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeExternal`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeNot`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeNot`),
      namedNode(`${rdfs}comment`),
      literal(`A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeNot`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeNot`),
      namedNode(`${rdfs}label`),
      literal(`Shape Not`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeNot`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeOr`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeOr`),
      namedNode(`${rdfs}comment`),
      literal(`A ShapeExpression composed of one or more sub-expressions, one of which must match.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeOr`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeOr`),
      namedNode(`${rdfs}label`),
      literal(`Shape Or`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}ShapeOr`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Stem`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Stem`),
      namedNode(`${rdfs}comment`),
      literal(`Abstract class for Stems`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Stem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Stem`),
      namedNode(`${rdfs}label`),
      literal(`Stem`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}StemRange`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}StemRange`),
      namedNode(`${rdfs}comment`),
      literal(`Abstract Class for Stem Ranges`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}StemRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}StemRange`),
      namedNode(`${rdfs}label`),
      literal(`StemRange`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleConstraint`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleConstraint`),
      namedNode(`${rdfs}comment`),
      literal(`A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleConstraint`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleConstraint`),
      namedNode(`${rdfs}label`),
      literal(`Triple Constraint`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleConstraint`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${shex}TripleExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleExpression`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleExpression`),
      namedNode(`${rdfs}comment`),
      literal(`The abstract class of Triple Expressions.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleExpression`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}TripleExpression`),
      namedNode(`${rdfs}label`),
      literal(`Triple Expression`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Wildcard`),
      namedNode(`${rdf}type`),
      namedNode(`${rdfs}Class`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Wildcard`),
      namedNode(`${rdfs}comment`),
      literal(`Indicates that a stem is a Wildcard, rather than a URI prefix.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Wildcard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}Wildcard`),
      namedNode(`${rdfs}label`),
      literal(`Wildcard`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdfs}comment`),
      literal(`Annotations on a TripleExpression.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdfs}domain`),
      blankNodes[0],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdfs}label`),
      literal(`annotation`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}annotation`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}Annotation`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}bnode`),
      namedNode(`${rdf}type`),
      namedNode(`${shex}NodeKind`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}bnode`),
      namedNode(`${rdfs}comment`),
      literal(`Requires node to be a Blank Node`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}bnode`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}bnode`),
      namedNode(`${rdfs}label`),
      literal(`bnode`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdfs}comment`),
      literal(`Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Shape`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdfs}label`),
      literal(`closed`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}closed`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}boolean`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdfs}comment`),
      literal(`Code executed by Semantic Action.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}SemAct`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdfs}label`),
      literal(`code`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}code`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}string`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdfs}comment`),
      literal(`A datatype constraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdfs}label`),
      literal(`datatype`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}datatype`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Datatype`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdfs}comment`),
      literal(`Values that are excluded from value matching.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdfs}label`),
      literal(`exclusion`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}exclusion`),
      namedNode(`${rdfs}range`),
      blankNodes[1],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdfs}comment`),
      literal(`Expression associated with the TripleExpression.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Shape`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdfs}label`),
      literal(`expression`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expression`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}TripleExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdfs}comment`),
      literal(`List of 2 or more expressions associated with the TripleExpression.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdfs}domain`),
      blankNodes[2],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdfs}label`),
      literal(`expressions`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}expressions`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}TripleExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdfs}comment`),
      literal(`Base shape expressions for this shape.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Shape`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdfs}label`),
      literal(`extends`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extends`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdfs}comment`),
      literal(`Properties which may have extra values beyond those matched through a constraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Shape`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdfs}label`),
      literal(`extra`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}extra`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdfs}comment`),
      literal(`Regular expression flags`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdfs}label`),
      literal(`flags`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}flags`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}string`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}comment`),
      literal(`for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}label`),
      literal(`fraction digits`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}fractiondigits`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdfs}comment`),
      literal(`Constrains the subject of a triple, rather than the object.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdfs}label`),
      literal(`inverse`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}inverse`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}boolean`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}iri`),
      namedNode(`${rdf}type`),
      namedNode(`${shex}NodeKind`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}iri`),
      namedNode(`${rdfs}comment`),
      literal(`Requires node to be an IRI`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}iri`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}iri`),
      namedNode(`${rdfs}label`),
      literal(`iri`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdfs}comment`),
      literal(`The value used to match the language tag of a language-tagged string.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Language`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdfs}label`),
      literal(`language tag`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}languageTag`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}string`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}comment`),
      literal(`The exact length of the value of the cell.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}label`),
      literal(`length`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}length`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}stringFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}literal`),
      namedNode(`${rdf}type`),
      namedNode(`${shex}NodeKind`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}literal`),
      namedNode(`${rdfs}comment`),
      literal(`Requires node to be an rdf:Literal`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}literal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}literal`),
      namedNode(`${rdfs}label`),
      literal(`literal`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdfs}comment`),
      literal(`Maximum number of times this TripleExpression may match; -1 for “*”`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdfs}domain`),
      blankNodes[3],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdfs}label`),
      literal(`maximum cardinality`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}max`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}comment`),
      literal(`An atomic property that contains a single number that is the maximum valid value (exclusive).`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}label`),
      literal(`max exclusive`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}range`),
      blankNodes[4],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxexclusive`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}comment`),
      literal(`An atomic property that contains a single number that is the maximum valid value (inclusive).`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}label`),
      literal(`max inclusive`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}range`),
      blankNodes[5],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxinclusive`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}comment`),
      literal(`A numeric atomic property that contains a single integer that is the maximum length of the value.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}label`),
      literal(`max length`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}maxlength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}stringFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdfs}comment`),
      literal(`Minimum number of times this TripleExpression may match.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdfs}domain`),
      blankNodes[6],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdfs}label`),
      literal(`minimum cardinatliy`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}min`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}comment`),
      literal(`An atomic property that contains a single number that is the minimum valid value (exclusive).`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}label`),
      literal(`min exclusive`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}range`),
      blankNodes[7],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minexclusive`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}comment`),
      literal(`An atomic property that contains a single number that is the minimum valid value (inclusive).`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}label`),
      literal(`min inclusive`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}range`),
      blankNodes[8],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}mininclusive`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}comment`),
      literal(`An atomic property that contains a single integer that is the minimum length of the value.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}label`),
      literal(`min length`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}minlength`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}stringFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdfs}comment`),
      literal(`Identifier of SemAct extension.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}SemAct`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdfs}label`),
      literal(`name`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}name`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdfs}comment`),
      literal(`Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdfs}label`),
      literal(`node kind`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nodeKind`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}NodeKind`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nonliteral`),
      namedNode(`${rdf}type`),
      namedNode(`${shex}NodeKind`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nonliteral`),
      namedNode(`${rdfs}comment`),
      literal(`Requires node to be a Blank Node or IRI`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nonliteral`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}nonliteral`),
      namedNode(`${rdfs}label`),
      literal(`nonliteral`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}numericFacet`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}numericFacet`),
      namedNode(`${rdfs}comment`),
      literal(`Abstract property of numeric facets on a NodeConstraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}numericFacet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}numericFacet`),
      namedNode(`${rdfs}label`),
      literal(``, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}numericFacet`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}xsFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdfs}comment`),
      literal(`The object of an Annotation.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Annotation`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdfs}label`),
      literal(`object`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}object`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}comment`),
      literal(`A regular expression used for matching a value.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}label`),
      literal(`pattern`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}string`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}pattern`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}stringFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdfs}comment`),
      literal(`The predicate of a TripleConstraint or Annotation.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdfs}domain`),
      blankNodes[9],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdfs}label`),
      literal(`predicate`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}predicate`),
      namedNode(`${rdfs}range`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdfs}comment`),
      literal(`Semantic Actions on this TripleExpression.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdfs}domain`),
      blankNodes[10],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdfs}label`),
      literal(`semantic action`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}semActs`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}SemAct`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdfs}comment`),
      literal(`Shape Expression referenced by this shape.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}ShapeNot`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdfs}label`),
      literal(`shape expression`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExpr`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}comment`),
      literal(`A list of 2 or more Shape Expressions referenced by this shape.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}domain`),
      blankNodes[11],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}label`),
      literal(`shape expressions`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapeExprs`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}shapeExpr`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdfs}comment`),
      literal(`Shapes in this Schema.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Schema`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdfs}label`),
      literal(`shapes`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}shapes`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdfs}comment`),
      literal(`A ShapeExpression matched against the focus node prior to any other mapped expressions.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Schema`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdfs}label`),
      literal(`start`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}start`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdfs}comment`),
      literal(`Semantic Actions run on the Schema.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}Schema`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdfs}label`),
      literal(`start actions`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}startActs`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}SemAct`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdfs}comment`),
      literal(`A stem value used for matching or excluding values.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdfs}domain`),
      blankNodes[12],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdfs}label`),
      literal(`stem`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stem`),
      namedNode(`${rdfs}range`),
      blankNodes[13],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stringFacet`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stringFacet`),
      namedNode(`${rdfs}comment`),
      literal(`An abstract property of string facets on a NodeConstraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stringFacet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stringFacet`),
      namedNode(`${rdfs}label`),
      literal(``, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}stringFacet`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}xsFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}comment`),
      literal(`for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}label`),
      literal(`total digits`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}range`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}totaldigits`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${shex}numericFacet`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdfs}comment`),
      literal(`A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdfs}label`),
      literal(`value expression`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}valueExpr`),
      namedNode(`${rdfs}range`),
      namedNode(`${shex}ShapeExpression`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdfs}comment`),
      literal(`A value restriction on a NodeConstraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdfs}label`),
      literal(`values`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}values`),
      namedNode(`${rdfs}range`),
      blankNodes[14],
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}xsFacet`),
      namedNode(`${rdf}type`),
      namedNode(`${rdf}Property`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}xsFacet`),
      namedNode(`${rdfs}comment`),
      literal(`An abstract property of string and numeric facets on a NodeConstraint.`, 'en'),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}xsFacet`),
      namedNode(`${rdfs}domain`),
      namedNode(`${shex}NodeConstraint`),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}xsFacet`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(shex),
      namedNode(shex)
    ),
    quad(
      namedNode(`${shex}xsFacet`),
      namedNode(`${rdfs}label`),
      literal(``, 'en'),
      namedNode(shex)
    ),
    quad(
      blankNodes[0],
      namedNode(`${owl}unionOf`),
      blankNodes[15],
      namedNode(shex)
    ),
    quad(
      blankNodes[14],
      namedNode(`${owl}unionOf`),
      blankNodes[16],
      namedNode(shex)
    ),
    quad(
      blankNodes[11],
      namedNode(`${owl}unionOf`),
      blankNodes[17],
      namedNode(shex)
    ),
    quad(
      blankNodes[1],
      namedNode(`${owl}unionOf`),
      blankNodes[18],
      namedNode(shex)
    ),
    quad(
      blankNodes[8],
      namedNode(`${owl}unionOf`),
      blankNodes[19],
      namedNode(shex)
    ),
    quad(
      blankNodes[20],
      namedNode(`${rdf}first`),
      namedNode(`${shex}ShapeOr`),
      namedNode(shex)
    ),
    quad(
      blankNodes[20],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[21],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      blankNodes[21],
      namedNode(`${rdf}rest`),
      blankNodes[22],
      namedNode(shex)
    ),
    quad(
      blankNodes[12],
      namedNode(`${owl}unionOf`),
      blankNodes[23],
      namedNode(shex)
    ),
    quad(
      blankNodes[24],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}string`),
      namedNode(shex)
    ),
    quad(
      blankNodes[24],
      namedNode(`${rdf}rest`),
      blankNodes[25],
      namedNode(shex)
    ),
    quad(
      blankNodes[9],
      namedNode(`${owl}unionOf`),
      blankNodes[26],
      namedNode(shex)
    ),
    quad(
      blankNodes[23],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      blankNodes[23],
      namedNode(`${rdf}rest`),
      blankNodes[27],
      namedNode(shex)
    ),
    quad(
      blankNodes[25],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Wildcard`),
      namedNode(shex)
    ),
    quad(
      blankNodes[25],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[7],
      namedNode(`${owl}unionOf`),
      blankNodes[28],
      namedNode(shex)
    ),
    quad(
      blankNodes[3],
      namedNode(`${owl}unionOf`),
      blankNodes[29],
      namedNode(shex)
    ),
    quad(
      blankNodes[10],
      namedNode(`${owl}unionOf`),
      blankNodes[30],
      namedNode(shex)
    ),
    quad(
      blankNodes[4],
      namedNode(`${owl}unionOf`),
      blankNodes[31],
      namedNode(shex)
    ),
    quad(
      blankNodes[32],
      namedNode(`${rdf}first`),
      namedNode(`${shex}OneOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[32],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[5],
      namedNode(`${owl}unionOf`),
      blankNodes[33],
      namedNode(shex)
    ),
    quad(
      blankNodes[34],
      namedNode(`${rdf}first`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      blankNodes[34],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[35],
      namedNode(`${rdf}first`),
      namedNode(`${shex}OneOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[35],
      namedNode(`${rdf}rest`),
      blankNodes[34],
      namedNode(shex)
    ),
    quad(
      blankNodes[30],
      namedNode(`${rdf}first`),
      namedNode(`${shex}EachOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[30],
      namedNode(`${rdf}rest`),
      blankNodes[35],
      namedNode(shex)
    ),
    quad(
      blankNodes[36],
      namedNode(`${rdf}first`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      blankNodes[36],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[37],
      namedNode(`${rdf}first`),
      namedNode(`${shex}OneOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[37],
      namedNode(`${rdf}rest`),
      blankNodes[36],
      namedNode(shex)
    ),
    quad(
      blankNodes[38],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Language`),
      namedNode(shex)
    ),
    quad(
      blankNodes[38],
      namedNode(`${rdf}rest`),
      blankNodes[21],
      namedNode(shex)
    ),
    quad(
      blankNodes[29],
      namedNode(`${rdf}first`),
      namedNode(`${shex}EachOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[29],
      namedNode(`${rdf}rest`),
      blankNodes[37],
      namedNode(shex)
    ),
    quad(
      blankNodes[39],
      namedNode(`${rdf}first`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      blankNodes[39],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[40],
      namedNode(`${rdf}first`),
      namedNode(`${shex}OneOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[40],
      namedNode(`${rdf}rest`),
      blankNodes[39],
      namedNode(shex)
    ),
    quad(
      blankNodes[41],
      namedNode(`${rdf}first`),
      namedNode(`${shex}EachOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[41],
      namedNode(`${rdf}rest`),
      blankNodes[40],
      namedNode(shex)
    ),
    quad(
      blankNodes[42],
      namedNode(`${rdf}first`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      blankNodes[42],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[43],
      namedNode(`${rdf}first`),
      namedNode(`${shex}TripleConstraint`),
      namedNode(shex)
    ),
    quad(
      blankNodes[43],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[44],
      namedNode(`${rdf}first`),
      namedNode(`${shex}OneOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[44],
      namedNode(`${rdf}rest`),
      blankNodes[43],
      namedNode(shex)
    ),
    quad(
      blankNodes[15],
      namedNode(`${rdf}first`),
      namedNode(`${shex}EachOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[15],
      namedNode(`${rdf}rest`),
      blankNodes[44],
      namedNode(shex)
    ),
    quad(
      blankNodes[27],
      namedNode(`${rdf}first`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      blankNodes[27],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[22],
      namedNode(`${rdf}first`),
      namedNode(`${shex}StemRange`),
      namedNode(shex)
    ),
    quad(
      blankNodes[22],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[13],
      namedNode(`${owl}unionOf`),
      blankNodes[24],
      namedNode(shex)
    ),
    quad(
      blankNodes[45],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}double`),
      namedNode(shex)
    ),
    quad(
      blankNodes[45],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[46],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}decimal`),
      namedNode(shex)
    ),
    quad(
      blankNodes[46],
      namedNode(`${rdf}rest`),
      blankNodes[45],
      namedNode(shex)
    ),
    quad(
      blankNodes[28],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      blankNodes[28],
      namedNode(`${rdf}rest`),
      blankNodes[46],
      namedNode(shex)
    ),
    quad(
      blankNodes[47],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}double`),
      namedNode(shex)
    ),
    quad(
      blankNodes[47],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[48],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}decimal`),
      namedNode(shex)
    ),
    quad(
      blankNodes[48],
      namedNode(`${rdf}rest`),
      blankNodes[47],
      namedNode(shex)
    ),
    quad(
      blankNodes[19],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      blankNodes[19],
      namedNode(`${rdf}rest`),
      blankNodes[48],
      namedNode(shex)
    ),
    quad(
      blankNodes[49],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}double`),
      namedNode(shex)
    ),
    quad(
      blankNodes[49],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[50],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}decimal`),
      namedNode(shex)
    ),
    quad(
      blankNodes[50],
      namedNode(`${rdf}rest`),
      blankNodes[49],
      namedNode(shex)
    ),
    quad(
      blankNodes[33],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      blankNodes[33],
      namedNode(`${rdf}rest`),
      blankNodes[50],
      namedNode(shex)
    ),
    quad(
      blankNodes[51],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}double`),
      namedNode(shex)
    ),
    quad(
      blankNodes[51],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),
    quad(
      blankNodes[6],
      namedNode(`${owl}unionOf`),
      blankNodes[41],
      namedNode(shex)
    ),
    quad(
      blankNodes[52],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}decimal`),
      namedNode(shex)
    ),
    quad(
      blankNodes[52],
      namedNode(`${rdf}rest`),
      blankNodes[51],
      namedNode(shex)
    ),
    quad(
      blankNodes[31],
      namedNode(`${rdf}first`),
      namedNode(`${xsd}integer`),
      namedNode(shex)
    ),
    quad(
      blankNodes[31],
      namedNode(`${rdf}rest`),
      blankNodes[52],
      namedNode(shex)
    ),
    quad(
      blankNodes[53],
      namedNode(`${rdf}first`),
      namedNode(`${shex}EachOf`),
      namedNode(shex)
    ),
    quad(
      blankNodes[53],
      namedNode(`${rdf}rest`),
      blankNodes[32],
      namedNode(shex)
    ),
    quad(
      blankNodes[18],
      namedNode(`${rdf}first`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      blankNodes[18],
      namedNode(`${rdf}rest`),
      blankNodes[54],
      namedNode(shex)
    ),
    quad(
      blankNodes[16],
      namedNode(`${rdf}first`),
      namedNode(`${rdfs}Resource`),
      namedNode(shex)
    ),
    quad(
      blankNodes[16],
      namedNode(`${rdf}rest`),
      blankNodes[38],
      namedNode(shex)
    ),
    quad(
      blankNodes[2],
      namedNode(`${owl}unionOf`),
      blankNodes[53],
      namedNode(shex)
    ),
    quad(
      blankNodes[17],
      namedNode(`${rdf}first`),
      namedNode(`${shex}ShapeAnd`),
      namedNode(shex)
    ),
    quad(
      blankNodes[17],
      namedNode(`${rdf}rest`),
      blankNodes[20],
      namedNode(shex)
    ),
    quad(
      blankNodes[26],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Annotation`),
      namedNode(shex)
    ),
    quad(
      blankNodes[26],
      namedNode(`${rdf}rest`),
      blankNodes[42],
      namedNode(shex)
    ),
    quad(
      blankNodes[54],
      namedNode(`${rdf}first`),
      namedNode(`${shex}Stem`),
      namedNode(shex)
    ),
    quad(
      blankNodes[54],
      namedNode(`${rdf}rest`),
      namedNode(`${rdf}nil`),
      namedNode(shex)
    ),

  ]
}
